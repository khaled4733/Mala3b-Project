{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar SyntheticError = function (_Error) {\n  _inherits(SyntheticError, _Error);\n\n  var _super = _createSuper(SyntheticError);\n\n  function SyntheticError() {\n    var _this;\n\n    _classCallCheck(this, SyntheticError);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.name = '';\n    return _this;\n  }\n\n  return _createClass(SyntheticError);\n}(_wrapNativeSuper(Error));\n\nvar userExceptionDecorator;\nvar inUserExceptionDecorator = false;\n\nfunction unstable_setExceptionDecorator(exceptionDecorator) {\n  userExceptionDecorator = exceptionDecorator;\n}\n\nfunction preprocessException(data) {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n\n    try {\n      return userExceptionDecorator(data);\n    } catch (_unused) {} finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n\n  return data;\n}\n\nvar exceptionID = 0;\n\nfunction reportException(e, isFatal, reportToConsole) {\n  var NativeExceptionsManager = require(\"./NativeExceptionsManager\").default;\n\n  if (NativeExceptionsManager) {\n    var parseErrorStack = require(\"./Devtools/parseErrorStack\");\n\n    var stack = parseErrorStack(e == null ? void 0 : e.stack);\n    var currentExceptionID = ++exceptionID;\n    var originalMessage = e.message || '';\n    var message = originalMessage;\n\n    if (e.componentStack != null) {\n      message += \"\\n\\nThis error is located at:\" + e.componentStack;\n    }\n\n    var namePrefix = e.name == null || e.name === '' ? '' : e.name + \": \";\n\n    if (!message.startsWith(namePrefix)) {\n      message = namePrefix + message;\n    }\n\n    message = e.jsEngine == null ? message : message + \", js engine: \" + e.jsEngine;\n    var isHandledByLogBox = e.forceRedbox !== true && !global.RN$Bridgeless && !global.RN$Express;\n    var data = preprocessException({\n      message: message,\n      originalMessage: message === originalMessage ? null : originalMessage,\n      name: e.name == null || e.name === '' ? null : e.name,\n      componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,\n      stack: stack,\n      id: currentExceptionID,\n      isFatal: isFatal,\n      extraData: {\n        jsEngine: e.jsEngine,\n        rawStack: e.stack,\n        suppressRedBox: isHandledByLogBox\n      }\n    });\n\n    if (reportToConsole) {\n      console.error(data.message);\n    }\n\n    if (__DEV__ && isHandledByLogBox) {\n      var LogBoxData = require(\"../LogBox/Data/LogBoxData\");\n\n      LogBoxData.addException(_objectSpread(_objectSpread({}, data), {}, {\n        isComponentError: !!e.isComponentError\n      }));\n    }\n\n    NativeExceptionsManager.reportException(data);\n\n    if (__DEV__ && !global.RN$Express) {\n      if (e.preventSymbolication === true) {\n        return;\n      }\n\n      var symbolicateStackTrace = require(\"./Devtools/symbolicateStackTrace\");\n\n      symbolicateStackTrace(stack).then(function (_ref) {\n        var prettyStack = _ref.stack;\n\n        if (prettyStack) {\n          NativeExceptionsManager.updateExceptionMessage(data.message, prettyStack, currentExceptionID);\n        } else {\n          throw new Error('The stack is null');\n        }\n      }).catch(function (error) {\n        console.log('Unable to symbolicate stack trace: ' + error.message);\n      });\n    }\n  } else if (reportToConsole) {\n    console.error(e);\n  }\n}\n\nvar inExceptionHandler = false;\n\nfunction handleException(e, isFatal) {\n  var error;\n\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    error = new SyntheticError(e);\n  }\n\n  try {\n    inExceptionHandler = true;\n    reportException(error, isFatal, true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (inExceptionHandler) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], false, false);\n  } else {\n    var stringifySafe = require(\"../Utilities/stringifySafe\").default;\n\n    var str = Array.prototype.map.call(arguments, function (value) {\n      return typeof value === 'string' ? value : stringifySafe(value);\n    }).join(' ');\n\n    if (str.slice(0, 9) === 'Warning: ') {\n      return;\n    }\n\n    var _error = new SyntheticError(str);\n\n    _error.name = 'console.error';\n    reportException(_error, false, false);\n  }\n}\n\nfunction installConsoleErrorReporter() {\n  if (console._errorOriginal) {\n    return;\n  }\n\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n\n  if (console.reportErrorsAsExceptions === undefined) {\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  handleException: handleException,\n  installConsoleErrorReporter: installConsoleErrorReporter,\n  SyntheticError: SyntheticError,\n  unstable_setExceptionDecorator: unstable_setExceptionDecorator\n};","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Core/ExceptionsManager.js"],"names":["SyntheticError","name","Error","userExceptionDecorator","inUserExceptionDecorator","unstable_setExceptionDecorator","exceptionDecorator","preprocessException","data","exceptionID","reportException","e","isFatal","reportToConsole","NativeExceptionsManager","require","default","parseErrorStack","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","startsWith","jsEngine","isHandledByLogBox","forceRedbox","global","RN$Bridgeless","RN$Express","id","extraData","rawStack","suppressRedBox","console","error","__DEV__","LogBoxData","addException","isComponentError","preventSymbolication","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","catch","log","inExceptionHandler","handleException","reactConsoleErrorHandler","_errorOriginal","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","value","join","slice","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {ExtendedError} from './Devtools/parseErrorStack';\r\nimport type {ExceptionData} from './NativeExceptionsManager';\r\n\r\nclass SyntheticError extends Error {\r\n  name: string = '';\r\n}\r\n\r\ntype ExceptionDecorator = ExceptionData => ExceptionData;\r\n\r\nlet userExceptionDecorator: ?ExceptionDecorator;\r\nlet inUserExceptionDecorator = false;\r\n\r\n/**\r\n * Allows the app to add information to the exception report before it is sent\r\n * to native. This API is not final.\r\n */\r\n\r\nfunction unstable_setExceptionDecorator(\r\n  exceptionDecorator: ?ExceptionDecorator,\r\n) {\r\n  userExceptionDecorator = exceptionDecorator;\r\n}\r\n\r\nfunction preprocessException(data: ExceptionData): ExceptionData {\r\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\r\n    inUserExceptionDecorator = true;\r\n    try {\r\n      return userExceptionDecorator(data);\r\n    } catch {\r\n      // Fall through\r\n    } finally {\r\n      inUserExceptionDecorator = false;\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Handles the developer-visible aspect of errors and exceptions\r\n */\r\nlet exceptionID = 0;\r\nfunction reportException(\r\n  e: ExtendedError,\r\n  isFatal: boolean,\r\n  reportToConsole: boolean, // only true when coming from handleException; the error has not yet been logged\r\n) {\r\n  const NativeExceptionsManager = require('./NativeExceptionsManager').default;\r\n  if (NativeExceptionsManager) {\r\n    const parseErrorStack = require('./Devtools/parseErrorStack');\r\n    const stack = parseErrorStack(e?.stack);\r\n    const currentExceptionID = ++exceptionID;\r\n    const originalMessage = e.message || '';\r\n    let message = originalMessage;\r\n    if (e.componentStack != null) {\r\n      message += `\\n\\nThis error is located at:${e.componentStack}`;\r\n    }\r\n    const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\r\n\r\n    if (!message.startsWith(namePrefix)) {\r\n      message = namePrefix + message;\r\n    }\r\n\r\n    message =\r\n      e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\r\n\r\n    const isHandledByLogBox =\r\n      e.forceRedbox !== true && !global.RN$Bridgeless && !global.RN$Express;\r\n\r\n    const data = preprocessException({\r\n      message,\r\n      originalMessage: message === originalMessage ? null : originalMessage,\r\n      name: e.name == null || e.name === '' ? null : e.name,\r\n      componentStack:\r\n        typeof e.componentStack === 'string' ? e.componentStack : null,\r\n      stack,\r\n      id: currentExceptionID,\r\n      isFatal,\r\n      extraData: {\r\n        jsEngine: e.jsEngine,\r\n        rawStack: e.stack,\r\n\r\n        // Hack to hide native redboxes when in the LogBox experiment.\r\n        // This is intentionally untyped and stuffed here, because it is temporary.\r\n        suppressRedBox: isHandledByLogBox,\r\n      },\r\n    });\r\n\r\n    if (reportToConsole) {\r\n      // we feed back into console.error, to make sure any methods that are\r\n      // monkey patched on top of console.error are called when coming from\r\n      // handleException\r\n      console.error(data.message);\r\n    }\r\n\r\n    if (__DEV__ && isHandledByLogBox) {\r\n      const LogBoxData = require('../LogBox/Data/LogBoxData');\r\n      LogBoxData.addException({\r\n        ...data,\r\n        isComponentError: !!e.isComponentError,\r\n      });\r\n    }\r\n\r\n    NativeExceptionsManager.reportException(data);\r\n\r\n    if (__DEV__ && !global.RN$Express) {\r\n      if (e.preventSymbolication === true) {\r\n        return;\r\n      }\r\n      const symbolicateStackTrace = require('./Devtools/symbolicateStackTrace');\r\n      symbolicateStackTrace(stack)\r\n        .then(({stack: prettyStack}) => {\r\n          if (prettyStack) {\r\n            NativeExceptionsManager.updateExceptionMessage(\r\n              data.message,\r\n              prettyStack,\r\n              currentExceptionID,\r\n            );\r\n          } else {\r\n            throw new Error('The stack is null');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log('Unable to symbolicate stack trace: ' + error.message);\r\n        });\r\n    }\r\n  } else if (reportToConsole) {\r\n    // we feed back into console.error, to make sure any methods that are\r\n    // monkey patched on top of console.error are called when coming from\r\n    // handleException\r\n    console.error(e);\r\n  }\r\n}\r\n\r\ndeclare var console: typeof console & {\r\n  _errorOriginal: typeof console.error,\r\n  reportErrorsAsExceptions: boolean,\r\n  ...\r\n};\r\n\r\n// If we trigger console.error _from_ handleException,\r\n// we do want to make sure that console.error doesn't trigger error reporting again\r\nlet inExceptionHandler = false;\r\n\r\n/**\r\n * Logs exceptions to the (native) console and displays them\r\n */\r\nfunction handleException(e: mixed, isFatal: boolean) {\r\n  let error: Error;\r\n  if (e instanceof Error) {\r\n    error = e;\r\n  } else {\r\n    // Workaround for reporting errors caused by `throw 'some string'`\r\n    // Unfortunately there is no way to figure out the stacktrace in this\r\n    // case, so if you ended up here trying to trace an error, look for\r\n    // `throw '<error message>'` somewhere in your codebase.\r\n    error = new SyntheticError(e);\r\n  }\r\n  try {\r\n    inExceptionHandler = true;\r\n    reportException(error, isFatal, /*reportToConsole*/ true);\r\n  } finally {\r\n    inExceptionHandler = false;\r\n  }\r\n}\r\n\r\nfunction reactConsoleErrorHandler() {\r\n  // bubble up to any original handlers\r\n  console._errorOriginal.apply(console, arguments);\r\n  if (!console.reportErrorsAsExceptions) {\r\n    return;\r\n  }\r\n  if (inExceptionHandler) {\r\n    // The fundamental trick here is that are multiple entry point to logging errors:\r\n    // (see D19743075 for more background)\r\n    //\r\n    // 1. An uncaught exception being caught by the global handler\r\n    // 2. An error being logged throw console.error\r\n    //\r\n    // However, console.error is monkey patched multiple times: by this module, and by the\r\n    // DevTools setup that sends messages to Metro.\r\n    // The patching order cannot be relied upon.\r\n    //\r\n    // So, some scenarios that are handled by this flag:\r\n    //\r\n    // Logging an error:\r\n    // 1. console.error called from user code\r\n    // 2. (possibly) arrives _first_ at DevTool handler, send to Metro\r\n    // 3. Bubbles to here\r\n    // 4. goes into report Exception.\r\n    // 5. should not trigger console.error again, to avoid looping / logging twice\r\n    // 6. should still bubble up to original console\r\n    //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)\r\n    //\r\n    // Throwing an uncaught exception:\r\n    // 1. exception thrown\r\n    // 2. picked up by handleException\r\n    // 3. should be send to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)\r\n    // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here\r\n    //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)\r\n    // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)\r\n    return;\r\n  }\r\n\r\n  if (arguments[0] && arguments[0].stack) {\r\n    // reportException will console.error this with high enough fidelity.\r\n    reportException(\r\n      arguments[0],\r\n      /* isFatal */ false,\r\n      /*reportToConsole*/ false,\r\n    );\r\n  } else {\r\n    const stringifySafe = require('../Utilities/stringifySafe').default;\r\n    const str = Array.prototype.map\r\n      .call(arguments, value =>\r\n        typeof value === 'string' ? value : stringifySafe(value),\r\n      )\r\n      .join(' ');\r\n\r\n    if (str.slice(0, 9) === 'Warning: ') {\r\n      // React warnings use console.error so that a stack trace is shown, but\r\n      // we don't (currently) want these to show a redbox\r\n      // (Note: Logic duplicated in polyfills/console.js.)\r\n      return;\r\n    }\r\n    const error: ExtendedError = new SyntheticError(str);\r\n    error.name = 'console.error';\r\n    reportException(error, /* isFatal */ false, /*reportToConsole*/ false);\r\n  }\r\n}\r\n\r\n/**\r\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\r\n * setting `console.reportErrorsAsExceptions = false;` in your app.\r\n */\r\nfunction installConsoleErrorReporter() {\r\n  // Enable reportErrorsAsExceptions\r\n  if (console._errorOriginal) {\r\n    return; // already installed\r\n  }\r\n  // Flow doesn't like it when you set arbitrary values on a global object\r\n  console._errorOriginal = console.error.bind(console);\r\n  console.error = reactConsoleErrorHandler;\r\n  if (console.reportErrorsAsExceptions === undefined) {\r\n    // Individual apps can disable this\r\n    // Flow doesn't like it when you set arbitrary values on a global object\r\n    console.reportErrorsAsExceptions = true;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  handleException,\r\n  installConsoleErrorReporter,\r\n  SyntheticError,\r\n  unstable_setExceptionDecorator,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}