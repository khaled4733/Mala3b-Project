{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { db } from \"../Config\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where } from \"firebase/firestore\";\n\nfunction addStadium() {\n  return _regeneratorRuntime.async(function addStadium$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getStadium() {\n  var stadiumCol, stadiumSnapshot, stadiumList;\n  return _regeneratorRuntime.async(function getStadium$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          stadiumCol = collection(db, \"football\");\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(stadiumCol));\n\n        case 3:\n          stadiumSnapshot = _context2.sent;\n          stadiumList = stadiumSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(stadiumList);\n          return _context2.abrupt(\"return\", stadiumList);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction updateAvailible(flag) {\n  return _regeneratorRuntime.async(function updateAvailible$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          try {} catch (e) {\n            console.error(e);\n          }\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { addStadium, getStadium };","map":{"version":3,"sources":["C:/Users/mahmo/OneDrive/Desktop/CS303-Project/CS303-Project/db/Stadium/Football.js"],"names":["db","addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","addStadium","getStadium","stadiumCol","stadiumSnapshot","stadiumList","docs","map","id","data","console","log","updateAvailible","flag","e","error"],"mappings":";;;;;;;AAAA,SAASA,EAAT;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,OAA7B,EAAsCC,YAAtC,EAAoDC,MAApD,EAA4DC,GAA5D,EAAiEC,KAAjE,EAAwEC,KAAxE,QAAqF,oBAArF;;AAEA,SAAeC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAeC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,UADV,GACuBT,UAAU,CAACF,EAAD,EAAK,UAAL,CADjC;AAAA;AAAA,2CAEkCG,OAAO,CAACQ,UAAD,CAFzC;;AAAA;AAEUC,UAAAA,eAFV;AAGUC,UAAAA,WAHV,GAGwBD,eAAe,CAACE,IAAhB,CAAqBC,GAArB,CAAyB,UAACT,GAAD,EAAS;AAClD;AAASU,cAAAA,EAAE,EAAEV,GAAG,CAACU;AAAjB,eAAwBV,GAAG,CAACW,IAAJ,EAAxB;AACH,WAFmB,CAHxB;AAMIC,UAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AANJ,4CAOWA,WAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAeO,eAAf,CAA+BC,IAA/B;AAAA;AAAA;AAAA;AAAA;AACI,cAAI,CAEH,CAFD,CAGA,OAAOC,CAAP,EAAU;AACNJ,YAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACH;;AANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAASb,UAAT,EAAqBC,UAArB","sourcesContent":["import { db } from \"../Config\";\r\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where } from \"firebase/firestore\";\r\n\r\nasync function addStadium() {\r\n}\r\n\r\nasync function getStadium() {\r\n    const stadiumCol = collection(db, \"football\");\r\n    const stadiumSnapshot = await getDocs(stadiumCol);\r\n    const stadiumList = stadiumSnapshot.docs.map((doc) => {\r\n        return { id: doc.id, ...doc.data() };\r\n    });\r\n    console.log(stadiumList);\r\n    return stadiumList;\r\n}\r\n\r\nasync function updateAvailible(flag,){\r\n    try {\r\n\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n\r\n    }\r\n\r\nexport { addStadium, getStadium };"]},"metadata":{},"sourceType":"module"}