{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar invariant = require('invariant');\n\nimport EmitterSubscription from \"./_EmitterSubscription\";\nimport EventSubscriptionVendor from \"./_EventSubscriptionVendor\";\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      this._subscriber.removeAllSubscriptions(eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n      this._subscriber.removeSubscription(subscription);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n      return subscriptions ? subscriptions.filter(sparseFilterPredicate).length : 0;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n      if (subscriptions) {\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n\n          if (subscription && subscription.listener) {\n            subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n      if (subscriptions) {\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n          }\n        }\n      }\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nmodule.exports = EventEmitter;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/vendor/emitter/_EventEmitter.js"],"names":["invariant","require","EmitterSubscription","EventSubscriptionVendor","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","eventType","listener","context","addSubscription","removeAllSubscriptions","subscription","emitter","removeSubscription","subscriptions","getSubscriptionsForType","filter","length","i","l","apply","Array","prototype","slice","call","arguments","remove","module","exports"],"mappings":"AAWA;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,OAAOC,mBAAP;AACA,OAAOC,uBAAP;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAM,IAAN;AAAA,CAA9B;;IAeMC,Y;AASJ,wBAAYC,UAAZ,EAAkD;AAAA;;AAChD,SAAKC,WAAL,GAAmBD,UAAU,IAAI,IAAIH,uBAAJ,EAAjC;AACD;;;;WAgBD,qBACEK,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIuB;AACrB,aAAQ,KAAKH,WAAL,CAAiBI,eAAjB,CACNH,SADM,EAEN,IAAIN,mBAAJ,CAAwB,IAAxB,EAA8B,KAAKK,WAAnC,EAAgDE,QAAhD,EAA0DC,OAA1D,CAFM,CAAR;AAID;;;WASD,4BAAmBF,SAAnB,EAAuC;AACrC,WAAKD,WAAL,CAAiBK,sBAAjB,CAAwCJ,SAAxC;AACD;;;WAMD,4BAAmBK,YAAnB,EAAsD;AACpDb,MAAAA,SAAS,CACPa,YAAY,CAACC,OAAb,KAAyB,IADlB,EAEP,+CAFO,CAAT;;AAIA,WAAKP,WAAL,CAAiBQ,kBAAjB,CAAoCF,YAApC;AACD;;;WASD,uBAAcL,SAAd,EAAyC;AACvC,UAAMQ,aAAa,GAAG,KAAKT,WAAL,CAAiBU,uBAAjB,CAAyCT,SAAzC,CAAtB;;AACA,aAAOQ,aAAa,GAKhBA,aAAa,CAACE,MAAd,CAAqBd,qBAArB,EAA4Ce,MAL5B,GAMhB,CANJ;AAOD;;;WAgBD,cAAKX,SAAL,EAAwB;AACtB,UAAMQ,aAAa,GAAG,KAAKT,WAAL,CAAiBU,uBAAjB,CAAyCT,SAAzC,CAAtB;;AACA,UAAIQ,aAAJ,EAAmB;AACjB,aAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,aAAa,CAACG,MAAlC,EAA0CC,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,cAAMP,YAAY,GAAGG,aAAa,CAACI,CAAD,CAAlC;;AAGA,cAAIP,YAAY,IAAIA,YAAY,CAACJ,QAAjC,EAA2C;AACzCI,YAAAA,YAAY,CAACJ,QAAb,CAAsBa,KAAtB,CACET,YAAY,CAACH,OADf,EAEEa,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAFF;AAID;AACF;AACF;AACF;;;WAeD,wBAAenB,SAAf,EAAkCC,QAAlC,EAA4C;AAC1C,UAAMO,aAAa,GAAG,KAAKT,WAAL,CAAiBU,uBAAjB,CAAyCT,SAAzC,CAAtB;;AACA,UAAIQ,aAAJ,EAAmB;AACjB,aAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,aAAa,CAACG,MAAlC,EAA0CC,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,cAAMP,YAAY,GAAGG,aAAa,CAACI,CAAD,CAAlC;;AAIA,cAAIP,YAAY,IAAIA,YAAY,CAACJ,QAAb,KAA0BA,QAA9C,EAAwD;AACtDI,YAAAA,YAAY,CAACe,MAAb;AACD;AACF;AACF;AACF;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBzB,YAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @noflow\r\n * @typecheck\r\n */\r\n\r\n'use strict';\r\n\r\nconst invariant = require('invariant');\r\n\r\nimport EmitterSubscription from './_EmitterSubscription';\r\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\r\n\r\nconst sparseFilterPredicate = () => true;\r\n\r\n/**\r\n * @class EventEmitter\r\n * @description\r\n * An EventEmitter is responsible for managing a set of listeners and publishing\r\n * events to them when it is told that such events happened. In addition to the\r\n * data for the given event it also sends a event control object which allows\r\n * the listeners/handlers to prevent the default behavior of the given event.\r\n *\r\n * The emitter is designed to be generic enough to support all the different\r\n * contexts in which one might want to emit events. It is a simple multicast\r\n * mechanism on top of which extra functionality can be composed. For example, a\r\n * more advanced emitter may use an EventHolder and EventFactory.\r\n */\r\nclass EventEmitter {\r\n  _subscriber: EventSubscriptionVendor;\r\n\r\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\r\n   *   to use. If omitted, a new subscriber will be created for the emitter.\r\n   */\r\n  constructor(subscriber: ?EventSubscriptionVendor) {\r\n    this._subscriber = subscriber || new EventSubscriptionVendor();\r\n  }\r\n\r\n  /**\r\n   * Adds a listener to be invoked when events of the specified type are\r\n   * emitted. An optional calling context may be provided. The data arguments\r\n   * emitted will be passed to the listener function.\r\n   *\r\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\r\n   *       can be invoked with varargs.\r\n   *\r\n   * @param {string} eventType - Name of the event to listen to\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\r\n  addListener(\r\n    eventType: string,\r\n    listener: Function,\r\n    context: ?Object,\r\n  ): EmitterSubscription {\r\n    return (this._subscriber.addSubscription(\r\n      eventType,\r\n      new EmitterSubscription(this, this._subscriber, listener, context),\r\n    ): any);\r\n  }\r\n\r\n  /**\r\n   * Removes all of the registered listeners, including those registered as\r\n   * listener maps.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event whose registered\r\n   *   listeners to remove\r\n   */\r\n  removeAllListeners(eventType: ?string) {\r\n    this._subscriber.removeAllSubscriptions(eventType);\r\n  }\r\n\r\n  /**\r\n   * Removes a specific subscription. Called by the `remove()` method of the\r\n   * subscription itself to ensure any necessary cleanup is performed.\r\n   */\r\n  removeSubscription(subscription: EmitterSubscription) {\r\n    invariant(\r\n      subscription.emitter === this,\r\n      'Subscription does not belong to this emitter.',\r\n    );\r\n    this._subscriber.removeSubscription(subscription);\r\n  }\r\n\r\n  /**\r\n   * Returns the number of listeners that are currently registered for the given\r\n   * event.\r\n   *\r\n   * @param {string} eventType - Name of the event to query\r\n   * @returns {number}\r\n   */\r\n  listenerCount(eventType: string): number {\r\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\r\n    return subscriptions\r\n      ? // We filter out missing entries because the array is sparse.\r\n        // \"callbackfn is called only for elements of the array which actually\r\n        // exist; it is not called for missing elements of the array.\"\r\n        // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\r\n        subscriptions.filter(sparseFilterPredicate).length\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Emits an event of the given type with the given data. All handlers of that\r\n   * particular type will be notified.\r\n   *\r\n   * @param {string} eventType - Name of the event to emit\r\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\r\n   *\r\n   * @example\r\n   *   emitter.addListener('someEvent', function(message) {\r\n   *     console.log(message);\r\n   *   });\r\n   *\r\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n   */\r\n  emit(eventType: string) {\r\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\r\n    if (subscriptions) {\r\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\r\n        const subscription = subscriptions[i];\r\n\r\n        // The subscription may have been removed during this event loop.\r\n        if (subscription && subscription.listener) {\r\n          subscription.listener.apply(\r\n            subscription.context,\r\n            Array.prototype.slice.call(arguments, 1),\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the given listener for event of specific type.\r\n   *\r\n   * @param {string} eventType - Name of the event to emit\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   *\r\n   * @example\r\n   *   emitter.removeListener('someEvent', function(message) {\r\n   *     console.log(message);\r\n   *   }); // removes the listener if already registered\r\n   *\r\n   */\r\n  removeListener(eventType: String, listener) {\r\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\r\n    if (subscriptions) {\r\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\r\n        const subscription = subscriptions[i];\r\n\r\n        // The subscription may have been removed during this event loop.\r\n        // its listener matches the listener in method parameters\r\n        if (subscription && subscription.listener === listener) {\r\n          subscription.remove();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = EventEmitter;\r\n"]},"metadata":{},"sourceType":"module"}