{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where, updateDoc, deleteField, arrayUnion, arrayRemove, deleteDoc } from \"firebase/firestore\";\nimport { app, db } from \"./Config\";\nvar firestoreDB = getFirestore(app);\n\nfunction addUser(user) {\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(setDoc(doc(firestoreDB, \"users\", user.id), {\n            user: user\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction addUsersToDocuments(collectionName, docId, userCollection) {\n  var docRef;\n  return _regeneratorRuntime.async(function addUsersToDocuments$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"inside \" + collectionName);\n          docRef = doc(db, collectionName, docId);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(updateDoc(docRef, {\n            users: userCollection\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUsers() {\n  var usersCol, userSnapshot, userList;\n  return _regeneratorRuntime.async(function getUsers$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          usersCol = collection(firestoreDB, \"users\");\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(usersCol));\n\n        case 3:\n          userSnapshot = _context3.sent;\n          userList = userSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(userList);\n          return _context3.abrupt(\"return\", userList);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUserById(id) {\n  var usersRef, q, querySnapshot;\n  return _regeneratorRuntime.async(function getUserById$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          usersRef = collection(firestoreDB, \"users\");\n          q = query(usersRef, where(\"id\", \"==\", id));\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 4:\n          querySnapshot = _context4.sent;\n          return _context4.abrupt(\"return\", querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction updateFAvailable(tempDoc) {\n  return _regeneratorRuntime.async(function updateFAvailable$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log(tempDoc.date);\n          tempDoc.available = false;\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(setDoc());\n\n        case 5:\n          _context5.next = 10;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nfunction test() {\n  return _regeneratorRuntime.async(function test$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(deleteDoc(doc(db, \"football\", 'Iy6feOM9iNAT16kP24ug')));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction deleteFStadium(docId) {\n  var docRef;\n  return _regeneratorRuntime.async(function deleteFStadium$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          docRef = doc(db, \"football\", docId);\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(updateDoc(docRef, {\n            available: deleteField(),\n            date: deleteField(),\n            id: deleteField(),\n            name: deleteField(),\n            pic: deleteField(),\n            price: deleteField()\n          }));\n\n        case 4:\n          console.log(\"Document deleted with ID: \", docId);\n          _context7.next = 10;\n          break;\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(\"Error deleting document: \", _context7.t0);\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nexport { getUsers, addUser, updateFAvailable, addUsersToDocuments, test };","map":{"version":3,"sources":["C:/Users/mahmo/OneDrive/Desktop/CS303-Project/CS303-Project/db/User.js"],"names":["addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","updateDoc","deleteField","arrayUnion","arrayRemove","deleteDoc","app","db","firestoreDB","addUser","user","id","addUsersToDocuments","collectionName","docId","userCollection","console","log","docRef","users","getUsers","usersCol","userSnapshot","userList","docs","map","data","getUserById","usersRef","q","querySnapshot","updateFAvailable","tempDoc","date","available","error","test","deleteFStadium","name","pic","price"],"mappings":"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","sourcesContent":["import {\r\n    addDoc,\r\n    collection,\r\n    getDocs,\r\n    getFirestore,\r\n    setDoc,\r\n    doc,\r\n    query,\r\n    where,\r\n    updateDoc,\r\n    deleteField,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    deleteDoc\r\n} from \"firebase/firestore\";\r\nimport {app, db} from \"./Config\";\r\n\r\nconst firestoreDB = getFirestore(app);\r\n\r\n\r\nasync function addUser(user) {\r\n     await setDoc(doc(firestoreDB, \"users\",user.id), { user});\r\n}\r\n\r\nasync function addUsersToDocuments(collectionName,docId,userCollection){\r\n    console.log(\"inside \"+collectionName)\r\n    const docRef = doc(db, collectionName, docId);\r\n    await updateDoc(docRef, {\r\n        users:userCollection\r\n    });\r\n}\r\n\r\n\r\nasync function getUsers() {\r\n    const usersCol = collection(firestoreDB, \"users\");\r\n    const userSnapshot = await getDocs(usersCol);\r\n    const userList =  userSnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n    console.log(userList);\r\n    return userList;\r\n}\r\n\r\n async function getUserById(id) {\r\n    const usersRef = collection(firestoreDB, \"users\");\r\n    const q = query(usersRef, where(\"id\", \"==\", id));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n}\r\n//                    F-> for \"football\"\r\n async function updateFAvailable(tempDoc) {\r\n     try {\r\n         console.log(tempDoc.date);\r\n         tempDoc.available = false;\r\n         await setDoc()\r\n         // const docRef = doc(db, \"football\", docId);\r\n         // console.log(\"entered updateFAvailable()\", docId)\r\n         // await deleteDoc(doc(db, \"football\", docId)); //not working\r\n\r\n         /*Delete Doc Herre*/\r\n     //      await deleteFStadium(docId,tempDoc); //not working, delete from db !!!!\r\n     //\r\n     //     //add new stadium with \"available: false\"\r\n     //     await setDoc(docRef, {\r\n     //         available: false,\r\n     //         date: tempDoc.date,\r\n     //         id: tempDoc.id,\r\n     //         name: tempDoc.name,\r\n     //         pic: tempDoc.pic,\r\n     //         price: tempDoc.price\r\n     //     }).then(console.log('available updated!'))\r\n     } catch (e) {\r\n         console.error(e);\r\n     }\r\n\r\n}\r\n\r\nasync function test() {\r\n    await deleteDoc(doc(db, \"football\", 'Iy6feOM9iNAT16kP24ug')); //not working\r\n\r\n}\r\n\r\nasync function deleteFStadium(docId) {\r\n    try {\r\n        const docRef = doc(db, \"football\", docId);\r\n        await updateDoc(docRef,{\r\n            available: deleteField(),\r\n            date: deleteField(),\r\n            id: deleteField(),\r\n            name:deleteField(),\r\n            pic:deleteField(),\r\n            price:deleteField()\r\n        })\r\n\r\n        console.log(\"Document deleted with ID: \", docId);\r\n    } catch (error) {\r\n        console.error(\"Error deleting document: \", error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// function subscribe(callback) {\r\n//     const unsubscribe = onSnapshot(\r\n//         query(collection(db, \"Chats\")),\r\n//         (snapshot) => {\r\n//             const source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n//             snapshot.docChanges().forEach((change) => {\r\n//                 if (callback) callback({ change, snapshot });\r\n//             });\r\n//         }\r\n//     );\r\n//     return unsubscribe;\r\n// }\r\n\r\nexport {getUsers, addUser,updateFAvailable,addUsersToDocuments, test};"]},"metadata":{},"sourceType":"module"}