{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar Blob = function () {\n  function Blob() {\n    var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, Blob);\n\n    var BlobManager = require(\"./BlobManager\");\n\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  _createClass(Blob, [{\n    key: \"data\",\n    get: function get() {\n      if (!this._data) {\n        throw new Error('Blob has been closed and is no longer available');\n      }\n\n      return this._data;\n    },\n    set: function set(data) {\n      this._data = data;\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      var BlobManager = require(\"./BlobManager\");\n\n      var _this$data = this.data,\n          offset = _this$data.offset,\n          size = _this$data.size;\n\n      if (typeof start === 'number') {\n        if (start > size) {\n          start = size;\n        }\n\n        offset += start;\n        size -= start;\n\n        if (typeof end === 'number') {\n          if (end < 0) {\n            end = this.size + end;\n          }\n\n          size = end - start;\n        }\n      }\n\n      return BlobManager.createFromOptions({\n        blobId: this.data.blobId,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var BlobManager = require(\"./BlobManager\");\n\n      BlobManager.release(this.data.blobId);\n      this.data = null;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.data.size;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.data.type || '';\n    }\n  }]);\n\n  return Blob;\n}();\n\nmodule.exports = Blob;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Blob/Blob.js"],"names":["Blob","parts","options","BlobManager","require","data","createFromParts","_data","Error","start","end","offset","size","createFromOptions","blobId","release","type","module","exports"],"mappings":"AAUA;;;;;;IAyCMA,I;AAQJ,kBAAqE;AAAA,QAAzDC,KAAyD,uEAA3B,EAA2B;AAAA,QAAvBC,OAAuB;;AAAA;;AACnE,QAAMC,WAAW,GAAGC,OAAO,iBAA3B;;AACA,SAAKC,IAAL,GAAYF,WAAW,CAACG,eAAZ,CAA4BL,KAA5B,EAAmCC,OAAnC,EAA4CG,IAAxD;AACD;;;;SAaD,eAAqB;AACnB,UAAI,CAAC,KAAKE,KAAV,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,aAAO,KAAKD,KAAZ;AACD,K;SAXD,aAASF,IAAT,EAA0B;AACxB,WAAKE,KAAL,GAAaF,IAAb;AACD;;;WAWD,eAAMI,KAAN,EAAsBC,GAAtB,EAA0C;AACxC,UAAMP,WAAW,GAAGC,OAAO,iBAA3B;;AACA,uBAAqB,KAAKC,IAA1B;AAAA,UAAKM,MAAL,cAAKA,MAAL;AAAA,UAAaC,IAAb,cAAaA,IAAb;;AAEA,UAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAIA,KAAK,GAAGG,IAAZ,EAAkB;AAEhBH,UAAAA,KAAK,GAAGG,IAAR;AACD;;AACDD,QAAAA,MAAM,IAAIF,KAAV;AACAG,QAAAA,IAAI,IAAIH,KAAR;;AAEA,YAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3B,cAAIA,GAAG,GAAG,CAAV,EAAa;AAEXA,YAAAA,GAAG,GAAG,KAAKE,IAAL,GAAYF,GAAlB;AACD;;AACDE,UAAAA,IAAI,GAAGF,GAAG,GAAGD,KAAb;AACD;AACF;;AACD,aAAON,WAAW,CAACU,iBAAZ,CAA8B;AACnCC,QAAAA,MAAM,EAAE,KAAKT,IAAL,CAAUS,MADiB;AAEnCH,QAAAA,MAAM,EAANA,MAFmC;AAGnCC,QAAAA,IAAI,EAAJA;AAHmC,OAA9B,CAAP;AAKD;;;WAcD,iBAAQ;AACN,UAAMT,WAAW,GAAGC,OAAO,iBAA3B;;AACAD,MAAAA,WAAW,CAACY,OAAZ,CAAoB,KAAKV,IAAL,CAAUS,MAA9B;AACA,WAAKT,IAAL,GAAY,IAAZ;AACD;;;SAMD,eAAmB;AACjB,aAAO,KAAKA,IAAL,CAAUO,IAAjB;AACD;;;SAOD,eAAmB;AACjB,aAAO,KAAKP,IAAL,CAAUW,IAAV,IAAkB,EAAzB;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBlB,IAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {BlobData, BlobOptions} from './BlobTypes';\r\n\r\n/**\r\n * Opaque JS representation of some binary data in native.\r\n *\r\n * The API is modeled after the W3C Blob API, with one caveat\r\n * regarding explicit deallocation. Refer to the `close()`\r\n * method for further details.\r\n *\r\n * Example usage in a React component:\r\n *\r\n *   class WebSocketImage extends React.Component {\r\n *      state = {blob: null};\r\n *      componentDidMount() {\r\n *        let ws = this.ws = new WebSocket(...);\r\n *        ws.binaryType = 'blob';\r\n *        ws.onmessage = (event) => {\r\n *          if (this.state.blob) {\r\n *            this.state.blob.close();\r\n *          }\r\n *          this.setState({blob: event.data});\r\n *        };\r\n *      }\r\n *      componentUnmount() {\r\n *        if (this.state.blob) {\r\n *          this.state.blob.close();\r\n *        }\r\n *        this.ws.close();\r\n *      }\r\n *      render() {\r\n *        if (!this.state.blob) {\r\n *          return <View />;\r\n *        }\r\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\r\n *      }\r\n *   }\r\n *\r\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\r\n */\r\nclass Blob {\r\n  _data: ?BlobData;\r\n\r\n  /**\r\n   * Constructor for JS consumers.\r\n   * Currently we only support creating Blobs from other Blobs.\r\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\r\n   */\r\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\r\n    const BlobManager = require('./BlobManager');\r\n    this.data = BlobManager.createFromParts(parts, options).data;\r\n  }\r\n\r\n  /*\r\n   * This method is used to create a new Blob object containing\r\n   * the data in the specified range of bytes of the source Blob.\r\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\r\n   */\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  set data(data: ?BlobData) {\r\n    this._data = data;\r\n  }\r\n\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  get data(): BlobData {\r\n    if (!this._data) {\r\n      throw new Error('Blob has been closed and is no longer available');\r\n    }\r\n\r\n    return this._data;\r\n  }\r\n\r\n  slice(start?: number, end?: number): Blob {\r\n    const BlobManager = require('./BlobManager');\r\n    let {offset, size} = this.data;\r\n\r\n    if (typeof start === 'number') {\r\n      if (start > size) {\r\n        // $FlowFixMe[reassign-const]\r\n        start = size;\r\n      }\r\n      offset += start;\r\n      size -= start;\r\n\r\n      if (typeof end === 'number') {\r\n        if (end < 0) {\r\n          // $FlowFixMe[reassign-const]\r\n          end = this.size + end;\r\n        }\r\n        size = end - start;\r\n      }\r\n    }\r\n    return BlobManager.createFromOptions({\r\n      blobId: this.data.blobId,\r\n      offset,\r\n      size,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method is in the standard, but not actually implemented by\r\n   * any browsers at this point. It's important for how Blobs work in\r\n   * React Native, however, since we cannot de-allocate resources automatically,\r\n   * so consumers need to explicitly de-allocate them.\r\n   *\r\n   * Note that the semantics around Blobs created via `blob.slice()`\r\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\r\n   * new *view* onto the same binary data, so calling `close()` on any\r\n   * of those views is enough to deallocate the data, whereas\r\n   * `new Blob([blob, ...])` actually copies the data in memory.\r\n   */\r\n  close() {\r\n    const BlobManager = require('./BlobManager');\r\n    BlobManager.release(this.data.blobId);\r\n    this.data = null;\r\n  }\r\n\r\n  /**\r\n   * Size of the data contained in the Blob object, in bytes.\r\n   */\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  get size(): number {\r\n    return this.data.size;\r\n  }\r\n\r\n  /*\r\n   * String indicating the MIME type of the data contained in the Blob.\r\n   * If the type is unknown, this string is empty.\r\n   */\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  get type(): string {\r\n    return this.data.type || '';\r\n  }\r\n}\r\n\r\nmodule.exports = Blob;\r\n"]},"metadata":{},"sourceType":"script"}