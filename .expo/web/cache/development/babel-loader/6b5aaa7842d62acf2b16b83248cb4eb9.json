{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar DevSettings = require(\"./DevSettings\");\n\nvar invariant = require('invariant');\n\nvar MetroHMRClient = require('metro-runtime/src/modules/HMRClient');\n\nvar Platform = require(\"./Platform\");\n\nvar prettyFormat = require('pretty-format');\n\nimport getDevServer from \"../Core/Devtools/getDevServer\";\nimport NativeRedBox from \"../NativeModules/specs/NativeRedBox\";\nimport * as LogBoxData from \"../LogBox/Data/LogBoxData\";\nvar pendingEntryPoints = [];\nvar hmrClient = null;\nvar hmrUnavailableReason = null;\nvar currentCompileErrorMessage = null;\nvar didConnect = false;\nvar pendingLogs = [];\nvar HMRClient = {\n  enable: function enable() {\n    if (hmrUnavailableReason !== null) {\n      throw new Error(hmrUnavailableReason);\n    }\n\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n\n    var LoadingView = require(\"./LoadingView\");\n\n    hmrClient.send(JSON.stringify({\n      type: 'log-opt-in'\n    }));\n    var hasUpdates = hmrClient.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    showCompileError();\n  },\n  disable: function disable() {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n  registerBundle: function registerBundle(requestUrl) {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n  log: function log(level, data) {\n    if (!hmrClient) {\n      pendingLogs.push([level, data]);\n\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n\n      return;\n    }\n\n    try {\n      hmrClient.send(JSON.stringify({\n        type: 'log',\n        level: level,\n        data: data.map(function (item) {\n          return typeof item === 'string' ? item : prettyFormat(item, {\n            escapeString: true,\n            highlight: true,\n            maxDepth: 3,\n            min: true,\n            plugins: [prettyFormat.plugins.ReactElement]\n          });\n        })\n      }));\n    } catch (error) {}\n  },\n  setup: function setup(platform, bundleEntry, host, port, isEnabled) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required parameter `bundleEntry`');\n    invariant(host, 'Missing required parameter `host`');\n    invariant(!hmrClient, 'Cannot initialize hmrClient twice');\n\n    var LoadingView = require(\"./LoadingView\");\n\n    var wsHost = port !== null && port !== '' ? host + \":\" + port : host;\n    var client = new MetroHMRClient(\"ws://\" + wsHost + \"/hot\");\n    hmrClient = client;\n\n    var _getDevServer = getDevServer(),\n        fullBundleUrl = _getDevServer.fullBundleUrl;\n\n    pendingEntryPoints.push(fullBundleUrl != null ? fullBundleUrl : \"ws://\" + wsHost + \"/hot?bundleEntry=\" + bundleEntry + \"&platform=\" + platform);\n    client.on('connection-error', function (e) {\n      var error = \"Cannot connect to Metro.\\n\\nTry the following to fix the issue:\\n- Ensure that Metro is running and available on the same network\";\n\n      if (Platform.OS === 'ios') {\n        error += \"\\n- Ensure that the Metro URL is correctly set in AppDelegate\";\n      } else {\n        error += \"\\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081\";\n      }\n\n      error += \"\\n\\nURL: \" + host + \":\" + port + \"\\n\\nError: \" + e.message;\n      setHMRUnavailableReason(error);\n    });\n    client.on('update-start', function (_ref) {\n      var isInitialUpdate = _ref.isInitialUpdate;\n      currentCompileErrorMessage = null;\n      didConnect = true;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView.showMessage('Refreshing...', 'refresh');\n      }\n    });\n    client.on('update', function (_ref2) {\n      var isInitialUpdate = _ref2.isInitialUpdate;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBoxData.clear();\n      }\n    });\n    client.on('update-done', function () {\n      LoadingView.hide();\n    });\n    client.on('error', function (data) {\n      LoadingView.hide();\n\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro has restarted since the last edit. Reload to reconnect.');\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro and the client are out of sync. Reload to reconnect.');\n      } else {\n        currentCompileErrorMessage = data.type + \" \" + data.message;\n\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n    client.on('close', function (data) {\n      LoadingView.hide();\n      setHMRUnavailableReason('Disconnected from Metro.');\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs(hmrClient);\n  }\n};\n\nfunction setHMRUnavailableReason(reason) {\n  invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n\n  if (hmrUnavailableReason !== null) {\n    return;\n  }\n\n  hmrUnavailableReason = reason;\n\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n  }\n}\n\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason != null) {\n    DevSettings.reload('Bundle Splitting â€“ Metro disconnected');\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client.send(JSON.stringify({\n      type: 'register-entrypoints',\n      entryPoints: pendingEntryPoints\n    }));\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs(client) {\n  try {\n    pendingLogs.forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          level = _ref4[0],\n          data = _ref4[1];\n\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {\n  if (Platform.OS === 'ios' && NativeRedBox != null && NativeRedBox.dismiss != null) {\n    NativeRedBox.dismiss();\n  } else {\n    var NativeExceptionsManager = require(\"../Core/NativeExceptionsManager\").default;\n\n    NativeExceptionsManager && NativeExceptionsManager.dismissRedbox && NativeExceptionsManager.dismissRedbox();\n  }\n}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  dismissRedbox();\n  var message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n  var error = new Error(message);\n  error.preventSymbolication = true;\n  throw error;\n}\n\nmodule.exports = HMRClient;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Utilities/HMRClient.js"],"names":["DevSettings","require","invariant","MetroHMRClient","Platform","prettyFormat","getDevServer","NativeRedBox","LogBoxData","pendingEntryPoints","hmrClient","hmrUnavailableReason","currentCompileErrorMessage","didConnect","pendingLogs","HMRClient","enable","Error","LoadingView","send","JSON","stringify","type","hasUpdates","hasPendingUpdates","showMessage","hide","showCompileError","disable","registerBundle","requestUrl","push","registerBundleEntryPoints","log","level","data","length","shift","map","item","escapeString","highlight","maxDepth","min","plugins","ReactElement","error","setup","platform","bundleEntry","host","port","isEnabled","wsHost","client","fullBundleUrl","on","e","OS","message","setHMRUnavailableReason","isInitialUpdate","dismissRedbox","clear","close","flushEarlyLogs","reason","console","warn","reload","entryPoints","forEach","dismiss","NativeExceptionsManager","default","preventSymbolication","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n'use strict';\r\n\r\nconst DevSettings = require('./DevSettings');\r\nconst invariant = require('invariant');\r\nconst MetroHMRClient = require('metro-runtime/src/modules/HMRClient');\r\nconst Platform = require('./Platform');\r\nconst prettyFormat = require('pretty-format');\r\n\r\nimport getDevServer from '../Core/Devtools/getDevServer';\r\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\r\nimport * as LogBoxData from '../LogBox/Data/LogBoxData';\r\nimport type {ExtendedError} from '../Core/Devtools/parseErrorStack';\r\n\r\nconst pendingEntryPoints = [];\r\nlet hmrClient = null;\r\nlet hmrUnavailableReason: string | null = null;\r\nlet currentCompileErrorMessage: string | null = null;\r\nlet didConnect: boolean = false;\r\nlet pendingLogs: Array<[LogLevel, Array<mixed>]> = [];\r\n\r\ntype LogLevel =\r\n  | 'trace'\r\n  | 'info'\r\n  | 'warn'\r\n  | 'error'\r\n  | 'log'\r\n  | 'group'\r\n  | 'groupCollapsed'\r\n  | 'groupEnd'\r\n  | 'debug';\r\n\r\nexport type HMRClientNativeInterface = {|\r\n  enable(): void,\r\n  disable(): void,\r\n  registerBundle(requestUrl: string): void,\r\n  log(level: LogLevel, data: Array<mixed>): void,\r\n  setup(\r\n    platform: string,\r\n    bundleEntry: string,\r\n    host: string,\r\n    port: number | string,\r\n    isEnabled: boolean,\r\n  ): void,\r\n|};\r\n\r\n/**\r\n * HMR Client that receives from the server HMR updates and propagates them\r\n * runtime to reflects those changes.\r\n */\r\nconst HMRClient: HMRClientNativeInterface = {\r\n  enable() {\r\n    if (hmrUnavailableReason !== null) {\r\n      // If HMR became unavailable while you weren't using it,\r\n      // explain why when you try to turn it on.\r\n      // This is an error (and not a warning) because it is shown\r\n      // in response to a direct user action.\r\n      throw new Error(hmrUnavailableReason);\r\n    }\r\n\r\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\r\n    const LoadingView = require('./LoadingView');\r\n\r\n    // We use this for internal logging only.\r\n    // It doesn't affect the logic.\r\n    hmrClient.send(JSON.stringify({type: 'log-opt-in'}));\r\n\r\n    // When toggling Fast Refresh on, we might already have some stashed updates.\r\n    // Since they'll get applied now, we'll show a banner.\r\n    const hasUpdates = hmrClient.hasPendingUpdates();\r\n\r\n    if (hasUpdates) {\r\n      LoadingView.showMessage('Refreshing...', 'refresh');\r\n    }\r\n    try {\r\n      hmrClient.enable();\r\n    } finally {\r\n      if (hasUpdates) {\r\n        LoadingView.hide();\r\n      }\r\n    }\r\n\r\n    // There could be a compile error while Fast Refresh was off,\r\n    // but we ignored it at the time. Show it now.\r\n    showCompileError();\r\n  },\r\n\r\n  disable() {\r\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\r\n    hmrClient.disable();\r\n  },\r\n\r\n  registerBundle(requestUrl: string) {\r\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\r\n    pendingEntryPoints.push(requestUrl);\r\n    registerBundleEntryPoints(hmrClient);\r\n  },\r\n\r\n  log(level: LogLevel, data: Array<mixed>) {\r\n    if (!hmrClient) {\r\n      // Catch a reasonable number of early logs\r\n      // in case hmrClient gets initialized later.\r\n      pendingLogs.push([level, data]);\r\n      if (pendingLogs.length > 100) {\r\n        pendingLogs.shift();\r\n      }\r\n      return;\r\n    }\r\n    try {\r\n      hmrClient.send(\r\n        JSON.stringify({\r\n          type: 'log',\r\n          level,\r\n          data: data.map(item =>\r\n            typeof item === 'string'\r\n              ? item\r\n              : prettyFormat(item, {\r\n                  escapeString: true,\r\n                  highlight: true,\r\n                  maxDepth: 3,\r\n                  min: true,\r\n                  plugins: [prettyFormat.plugins.ReactElement],\r\n                }),\r\n          ),\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      // If sending logs causes any failures we want to silently ignore them\r\n      // to ensure we do not cause infinite-logging loops.\r\n    }\r\n  },\r\n\r\n  // Called once by the bridge on startup, even if Fast Refresh is off.\r\n  // It creates the HMR client but doesn't actually set up the socket yet.\r\n  setup(\r\n    platform: string,\r\n    bundleEntry: string,\r\n    host: string,\r\n    port: number | string,\r\n    isEnabled: boolean,\r\n  ) {\r\n    invariant(platform, 'Missing required parameter `platform`');\r\n    invariant(bundleEntry, 'Missing required parameter `bundleEntry`');\r\n    invariant(host, 'Missing required parameter `host`');\r\n    invariant(!hmrClient, 'Cannot initialize hmrClient twice');\r\n\r\n    // Moving to top gives errors due to NativeModules not being initialized\r\n    const LoadingView = require('./LoadingView');\r\n\r\n    const wsHost = port !== null && port !== '' ? `${host}:${port}` : host;\r\n    const client = new MetroHMRClient(`ws://${wsHost}/hot`);\r\n    hmrClient = client;\r\n\r\n    const {fullBundleUrl} = getDevServer();\r\n    pendingEntryPoints.push(\r\n      // HMRServer understands regular bundle URLs, so prefer that in case\r\n      // there are any important URL parameters we can't reconstruct from\r\n      // `setup()`'s arguments.\r\n      fullBundleUrl ??\r\n        // The ws://.../hot?bundleEntry= format is an alternative to specifying\r\n        // a regular HTTP bundle URL.\r\n        `ws://${wsHost}/hot?bundleEntry=${bundleEntry}&platform=${platform}`,\r\n    );\r\n\r\n    client.on('connection-error', e => {\r\n      let error = `Cannot connect to Metro.\r\n\r\nTry the following to fix the issue:\r\n- Ensure that Metro is running and available on the same network`;\r\n\r\n      if (Platform.OS === 'ios') {\r\n        error += `\r\n- Ensure that the Metro URL is correctly set in AppDelegate`;\r\n      } else {\r\n        error += `\r\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\r\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\r\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081`;\r\n      }\r\n\r\n      error += `\r\n\r\nURL: ${host}:${port}\r\n\r\nError: ${e.message}`;\r\n\r\n      setHMRUnavailableReason(error);\r\n    });\r\n\r\n    client.on('update-start', ({isInitialUpdate}) => {\r\n      currentCompileErrorMessage = null;\r\n      didConnect = true;\r\n\r\n      if (client.isEnabled() && !isInitialUpdate) {\r\n        LoadingView.showMessage('Refreshing...', 'refresh');\r\n      }\r\n    });\r\n\r\n    client.on('update', ({isInitialUpdate}) => {\r\n      if (client.isEnabled() && !isInitialUpdate) {\r\n        dismissRedbox();\r\n        LogBoxData.clear();\r\n      }\r\n    });\r\n\r\n    client.on('update-done', () => {\r\n      LoadingView.hide();\r\n    });\r\n\r\n    client.on('error', data => {\r\n      LoadingView.hide();\r\n\r\n      if (data.type === 'GraphNotFoundError') {\r\n        client.close();\r\n        setHMRUnavailableReason(\r\n          'Metro has restarted since the last edit. Reload to reconnect.',\r\n        );\r\n      } else if (data.type === 'RevisionNotFoundError') {\r\n        client.close();\r\n        setHMRUnavailableReason(\r\n          'Metro and the client are out of sync. Reload to reconnect.',\r\n        );\r\n      } else {\r\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\r\n        if (client.isEnabled()) {\r\n          showCompileError();\r\n        }\r\n      }\r\n    });\r\n\r\n    client.on('close', data => {\r\n      LoadingView.hide();\r\n      setHMRUnavailableReason('Disconnected from Metro.');\r\n    });\r\n\r\n    if (isEnabled) {\r\n      HMRClient.enable();\r\n    } else {\r\n      HMRClient.disable();\r\n    }\r\n\r\n    registerBundleEntryPoints(hmrClient);\r\n    flushEarlyLogs(hmrClient);\r\n  },\r\n};\r\n\r\nfunction setHMRUnavailableReason(reason) {\r\n  invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\r\n  if (hmrUnavailableReason !== null) {\r\n    // Don't show more than one warning.\r\n    return;\r\n  }\r\n  hmrUnavailableReason = reason;\r\n\r\n  // We only want to show a warning if Fast Refresh is on *and* if we ever\r\n  // previously managed to connect successfully. We don't want to show\r\n  // the warning to native engineers who use cached bundles without Metro.\r\n  if (hmrClient.isEnabled() && didConnect) {\r\n    console.warn(reason);\r\n    // (Not using the `warning` module to prevent a Buck cycle.)\r\n  }\r\n}\r\n\r\nfunction registerBundleEntryPoints(client) {\r\n  if (hmrUnavailableReason != null) {\r\n    DevSettings.reload('Bundle Splitting â€“ Metro disconnected');\r\n    return;\r\n  }\r\n\r\n  if (pendingEntryPoints.length > 0) {\r\n    client.send(\r\n      JSON.stringify({\r\n        type: 'register-entrypoints',\r\n        entryPoints: pendingEntryPoints,\r\n      }),\r\n    );\r\n    pendingEntryPoints.length = 0;\r\n  }\r\n}\r\n\r\nfunction flushEarlyLogs(client) {\r\n  try {\r\n    pendingLogs.forEach(([level: LogLevel, data: Array<mixed>]) => {\r\n      HMRClient.log(level, data);\r\n    });\r\n  } finally {\r\n    pendingLogs.length = 0;\r\n  }\r\n}\r\n\r\nfunction dismissRedbox() {\r\n  if (\r\n    Platform.OS === 'ios' &&\r\n    NativeRedBox != null &&\r\n    NativeRedBox.dismiss != null\r\n  ) {\r\n    NativeRedBox.dismiss();\r\n  } else {\r\n    const NativeExceptionsManager = require('../Core/NativeExceptionsManager')\r\n      .default;\r\n    NativeExceptionsManager &&\r\n      NativeExceptionsManager.dismissRedbox &&\r\n      NativeExceptionsManager.dismissRedbox();\r\n  }\r\n}\r\n\r\nfunction showCompileError() {\r\n  if (currentCompileErrorMessage === null) {\r\n    return;\r\n  }\r\n\r\n  // Even if there is already a redbox, syntax errors are more important.\r\n  // Otherwise you risk seeing a stale runtime error while a syntax error is more recent.\r\n  dismissRedbox();\r\n\r\n  const message = currentCompileErrorMessage;\r\n  currentCompileErrorMessage = null;\r\n\r\n  const error: ExtendedError = new Error(message);\r\n  // Symbolicating compile errors is wasted effort\r\n  // because the stack trace is meaningless:\r\n  error.preventSymbolication = true;\r\n  throw error;\r\n}\r\n\r\nmodule.exports = HMRClient;\r\n"]},"metadata":{},"sourceType":"module"}