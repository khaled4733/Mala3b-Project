{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { db } from \"../Config\";\nimport { getDocs, doc, setDoc, addDoc, deleteDoc, collection, query, where, onSnapshot } from \"firebase/firestore\";\n\nfunction addTStadium(Tennis) {\n  var docRef;\n  return _regeneratorRuntime.async(function addTStadium$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(addDoc(collection(db, \"tennis\"), Tennis));\n\n        case 3:\n          docRef = _context.sent;\n          console.log(\"Document written with ID: \", docRef.id);\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"Error adding document: \", _context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nfunction getTStadium() {\n  var stadiumsCol, stadiumsSnapshot, stadiumList;\n  return _regeneratorRuntime.async(function getTStadium$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          stadiumsCol = collection(db, \"tennis\");\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(stadiumsCol));\n\n        case 3:\n          stadiumsSnapshot = _context2.sent;\n          stadiumList = stadiumsSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(stadiumList);\n          return _context2.abrupt(\"return\", stadiumList);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction deleteTStadium(id) {\n  return _regeneratorRuntime.async(function deleteTStadium$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(deleteDoc(doc(db, \"tennis\", id)));\n\n        case 3:\n          console.log(\"Document deleted with ID: \", id);\n          _context3.next = 9;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(\"Error deleting document: \", _context3.t0);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nexport { addTStadium, getTStadium, deleteTStadium };","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/New folder (2)/CS303-Project/db/Stadium/Tennis.js"],"names":["db","getDocs","doc","setDoc","addDoc","deleteDoc","collection","query","where","onSnapshot","addTStadium","Tennis","docRef","console","log","id","error","getTStadium","stadiumsCol","stadiumsSnapshot","stadiumList","docs","map","data","deleteTStadium"],"mappings":";;;;;;;AAAA,SAASA,EAAT;AACA,SACIC,OADJ,EAEIC,GAFJ,EAGIC,MAHJ,EAIIC,MAJJ,EAKIC,SALJ,EAMIC,UANJ,EAOIC,KAPJ,EAQIC,KARJ,EASIC,UATJ,QAUS,oBAVT;;AAWA,SAAeC,WAAf,CAA2BC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAE6BP,MAAM,CAACE,UAAU,CAACN,EAAD,EAAK,QAAL,CAAX,EAA2BW,MAA3B,CAFnC;;AAAA;AAEcC,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,MAAM,CAACG,EAAjD;AAHR;AAAA;;AAAA;AAAA;AAAA;AAKQF,UAAAA,OAAO,CAACG,KAAR,CAAc,yBAAd;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAeC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,WADV,GACwBZ,UAAU,CAACN,EAAD,EAAK,QAAL,CADlC;AAAA;AAAA,2CAEmCC,OAAO,CAACiB,WAAD,CAF1C;;AAAA;AAEUC,UAAAA,gBAFV;AAGUC,UAAAA,WAHV,GAGwBD,gBAAgB,CAACE,IAAjB,CAAsBC,GAAtB,CAA0B,UAACpB,GAAD,EAAS;AACnD;AAASa,cAAAA,EAAE,EAAEb,GAAG,CAACa;AAAjB,eAAwBb,GAAG,CAACqB,IAAJ,EAAxB;AACH,WAFmB,CAHxB;AAMIV,UAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;AANJ,4CAOWA,WAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAeI,cAAf,CAA8BT,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEYV,SAAS,CAACH,GAAG,CAACF,EAAD,EAAK,QAAL,EAAee,EAAf,CAAJ,CAFrB;;AAAA;AAGMF,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,EAA1C;AAHN;AAAA;;AAAA;AAAA;AAAA;AAKMF,UAAAA,OAAO,CAACG,KAAR,CAAc,2BAAd;;AALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAASN,WAAT,EAAsBO,WAAtB,EAAmCO,cAAnC","sourcesContent":["import { db } from \"../Config\";\r\nimport {\r\n    getDocs,\r\n    doc,\r\n    setDoc,\r\n    addDoc,\r\n    deleteDoc,\r\n    collection,\r\n    query,\r\n    where,\r\n    onSnapshot,\r\n  } from \"firebase/firestore\";\r\nasync function addTStadium(Tennis) {\r\n    try {\r\n        const docRef = await addDoc(collection(db, \"tennis\"), Tennis);\r\n        console.log(\"Document written with ID: \", docRef.id);\r\n      } catch (e) {\r\n        console.error(\"Error adding document: \", e);\r\n      }\r\n}\r\n\r\nasync function getTStadium() {\r\n    const stadiumsCol = collection(db, \"tennis\");\r\n    const stadiumsSnapshot = await getDocs(stadiumsCol);\r\n    const stadiumList = stadiumsSnapshot.docs.map((doc) => {\r\n        return { id: doc.id, ...doc.data() };\r\n    });\r\n    console.log(stadiumList);\r\n    return stadiumList;\r\n}\r\n\r\nasync function deleteTStadium(id) {\r\n    try {\r\n      await deleteDoc(doc(db, \"tennis\", id));\r\n      console.log(\"Document deleted with ID: \", id);\r\n    } catch (error) {\r\n      console.error(\"Error deleting document: \", error);\r\n    }\r\n  }\r\n\r\nexport { addTStadium, getTStadium, deleteTStadium };"]},"metadata":{},"sourceType":"module"}