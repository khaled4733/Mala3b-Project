{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { db } from \"../Config\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where } from \"firebase/firestore\";\n\nfunction addFStadium(url, Name, photo, price) {\n  var docRef;\n  return _regeneratorRuntime.async(function addFStadium$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(addDoc(collection(db, \"football\"), {\n            link: url,\n            name: Name,\n            pic: photo,\n            price: price\n          }));\n\n        case 3:\n          docRef = _context.sent;\n          console.log(\"Document written with ID: \", docRef.id);\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"Error adding document: \", _context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nfunction getFStadium() {\n  var querySnapshot, stadiumList;\n  return _regeneratorRuntime.async(function getFStadium$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getDocs(collection(db, \"football\")));\n\n        case 2:\n          querySnapshot = _context2.sent;\n          stadiumList = querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(stadiumList);\n          return _context2.abrupt(\"return\", stadiumList);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { addFStadium, getFStadium };","map":{"version":3,"sources":["D:/CS303-Project-3/db/Stadium/Football.js"],"names":["db","addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","addFStadium","url","Name","photo","price","link","name","pic","docRef","console","log","id","error","getFStadium","querySnapshot","stadiumList","docs","map","data"],"mappings":";;;;;;;AAAA,SAASA,EAAT;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,OAA7B,EAAsCC,YAAtC,EAAoDC,MAApD,EAA4DC,GAA5D,EAAiEC,KAAjE,EAAwEC,KAAxE,QAAqF,oBAArF;;AAEA,SAAeC,WAAf,CAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6CC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAG6BZ,MAAM,CAACC,UAAU,CAACF,EAAD,EAAK,UAAL,CAAX,EAA6B;AACpDc,YAAAA,IAAI,EAAEJ,GAD8C;AAEpDK,YAAAA,IAAI,EAAEJ,IAF8C;AAGpDK,YAAAA,GAAG,EAAEJ,KAH+C;AAIpDC,YAAAA,KAAK,EAAEA;AAJ6C,WAA7B,CAHnC;;AAAA;AAGcI,UAAAA,MAHd;AAUQC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,MAAM,CAACG,EAAjD;AAVR;AAAA;;AAAA;AAAA;AAAA;AAYQF,UAAAA,OAAO,CAACG,KAAR,CAAc,yBAAd;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAeC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACgCnB,OAAO,CAACD,UAAU,CAACF,EAAD,EAAK,UAAL,CAAX,CADvC;;AAAA;AACUuB,UAAAA,aADV;AAEUC,UAAAA,WAFV,GAEwBD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,UAACpB,GAAD,EAAS;AAChD;AAAQc,cAAAA,EAAE,EAAEd,GAAG,CAACc;AAAhB,eAAuBd,GAAG,CAACqB,IAAJ,EAAvB;AACH,WAFmB,CAFxB;AAKIT,UAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;AALJ,4CAMWA,WANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAASf,WAAT,EAAuBa,WAAvB","sourcesContent":["import { db } from \"../Config\";\r\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where } from \"firebase/firestore\";\r\n\r\nasync function addFStadium(url, Name, photo, price) {\r\n\r\n    try {\r\n        const docRef = await addDoc(collection(db, \"football\"), {\r\n            link: url,\r\n            name: Name,\r\n            pic: photo,\r\n            price: price\r\n        });\r\n\r\n        console.log(\"Document written with ID: \", docRef.id);\r\n    } catch (e) {\r\n        console.error(\"Error adding document: \", e);\r\n    }\r\n}\r\n\r\nasync function getFStadium(){\r\n    const querySnapshot = await getDocs(collection(db, \"football\"))\r\n    const stadiumList = querySnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n    console.log(stadiumList);\r\n    return stadiumList;\r\n}\r\n\r\n\r\n\r\nexport { addFStadium , getFStadium };"]},"metadata":{},"sourceType":"module"}