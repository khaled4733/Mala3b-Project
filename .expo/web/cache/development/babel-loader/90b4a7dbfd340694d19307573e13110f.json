{"ast":null,"code":"'use strict';\n\nfunction __fetchSegment(segmentId, options, callback) {\n  var SegmentFetcher = require(\"./SegmentFetcher/NativeSegmentFetcher\").default;\n\n  SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {\n    if (errorObject) {\n      var error = new Error(errorObject.message);\n      error.code = errorObject.code;\n      callback(error);\n    }\n\n    callback(null);\n  });\n}\n\nglobal.__fetchSegment = __fetchSegment;\n\nfunction __getSegment(segmentId, options, callback) {\n  var SegmentFetcher = require(\"./SegmentFetcher/NativeSegmentFetcher\").default;\n\n  if (!SegmentFetcher.getSegment) {\n    throw new Error('SegmentFetcher.getSegment must be defined');\n  }\n\n  SegmentFetcher.getSegment(segmentId, options, function (errorObject, path) {\n    if (errorObject) {\n      var error = new Error(errorObject.message);\n      error.code = errorObject.code;\n      callback(error);\n    }\n\n    callback(null, path);\n  });\n}\n\nglobal.__getSegment = __getSegment;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Core/setUpSegmentFetcher.js"],"names":["__fetchSegment","segmentId","options","callback","SegmentFetcher","require","default","fetchSegment","errorObject","error","Error","message","code","global","__getSegment","getSegment","path"],"mappings":"AAUA;;AAUA,SAASA,cAAT,CACEC,SADF,EAEEC,OAFF,EAOEC,QAPF,EAQE;AACA,MAAMC,cAAc,GAAGC,OAAO,yCAAP,CACpBC,OADH;;AAEAF,EAAAA,cAAc,CAACG,YAAf,CACEN,SADF,EAEEC,OAFF,EAGE,UACEM,WADF,EAMK;AACH,QAAIA,WAAJ,EAAiB;AACf,UAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,WAAW,CAACG,OAAtB,CAAd;AACCF,MAAAA,KAAD,CAAaG,IAAb,GAAoBJ,WAAW,CAACI,IAAhC;AACAT,MAAAA,QAAQ,CAACM,KAAD,CAAR;AACD;;AAEDN,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAjBH;AAmBD;;AAEDU,MAAM,CAACb,cAAP,GAAwBA,cAAxB;;AAEA,SAASc,YAAT,CACEb,SADF,EAEEC,OAFF,EAOEC,QAPF,EAQE;AACA,MAAMC,cAAc,GAAGC,OAAO,yCAAP,CACpBC,OADH;;AAGA,MAAI,CAACF,cAAc,CAACW,UAApB,EAAgC;AAC9B,UAAM,IAAIL,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAEDN,EAAAA,cAAc,CAACW,UAAf,CACEd,SADF,EAEEC,OAFF,EAGE,UACEM,WADF,EAMEQ,IANF,EAOK;AACH,QAAIR,WAAJ,EAAiB;AACf,UAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,WAAW,CAACG,OAAtB,CAAd;AACCF,MAAAA,KAAD,CAAaG,IAAb,GAAoBJ,WAAW,CAACI,IAAhC;AACAT,MAAAA,QAAQ,CAACM,KAAD,CAAR;AACD;;AAEDN,IAAAA,QAAQ,CAAC,IAAD,EAAOa,IAAP,CAAR;AACD,GAlBH;AAoBD;;AAEDH,MAAM,CAACC,YAAP,GAAsBA,YAAtB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nexport type FetchSegmentFunction = typeof __fetchSegment;\r\nexport type GetSegmentFunction = typeof __getSegment;\r\n\r\n/**\r\n * Set up SegmentFetcher.\r\n * You can use this module directly, or just require InitializeCore.\r\n */\r\n\r\nfunction __fetchSegment(\r\n  segmentId: number,\r\n  options: $ReadOnly<{\r\n    otaBuildNumber: ?string,\r\n    requestedModuleName: string,\r\n    segmentHash: string,\r\n  }>,\r\n  callback: (?Error) => void,\r\n) {\r\n  const SegmentFetcher = require('./SegmentFetcher/NativeSegmentFetcher')\r\n    .default;\r\n  SegmentFetcher.fetchSegment(\r\n    segmentId,\r\n    options,\r\n    (\r\n      errorObject: ?{\r\n        message: string,\r\n        code: string,\r\n        ...\r\n      },\r\n    ) => {\r\n      if (errorObject) {\r\n        const error = new Error(errorObject.message);\r\n        (error: any).code = errorObject.code; // flowlint-line unclear-type: off\r\n        callback(error);\r\n      }\r\n\r\n      callback(null);\r\n    },\r\n  );\r\n}\r\n\r\nglobal.__fetchSegment = __fetchSegment;\r\n\r\nfunction __getSegment(\r\n  segmentId: number,\r\n  options: $ReadOnly<{\r\n    otaBuildNumber: ?string,\r\n    requestedModuleName: string,\r\n    segmentHash: string,\r\n  }>,\r\n  callback: (?Error, ?string) => void,\r\n) {\r\n  const SegmentFetcher = require('./SegmentFetcher/NativeSegmentFetcher')\r\n    .default;\r\n\r\n  if (!SegmentFetcher.getSegment) {\r\n    throw new Error('SegmentFetcher.getSegment must be defined');\r\n  }\r\n\r\n  SegmentFetcher.getSegment(\r\n    segmentId,\r\n    options,\r\n    (\r\n      errorObject: ?{\r\n        message: string,\r\n        code: string,\r\n        ...\r\n      },\r\n      path: ?string,\r\n    ) => {\r\n      if (errorObject) {\r\n        const error = new Error(errorObject.message);\r\n        (error: any).code = errorObject.code; // flowlint-line unclear-type: off\r\n        callback(error);\r\n      }\r\n\r\n      callback(null, path);\r\n    },\r\n  );\r\n}\r\n\r\nglobal.__getSegment = __getSegment;\r\n"]},"metadata":{},"sourceType":"script"}