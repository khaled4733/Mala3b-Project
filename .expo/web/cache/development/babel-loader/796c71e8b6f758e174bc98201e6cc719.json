{"ast":null,"code":"'use strict';\n\nvar start = Date.now();\n\nrequire(\"./setUpGlobals\");\n\nrequire(\"./setUpPerformance\");\n\nrequire(\"./setUpSystrace\");\n\nrequire(\"./setUpErrorHandling\");\n\nrequire(\"./polyfillPromise\");\n\nrequire(\"./setUpRegeneratorRuntime\");\n\nrequire(\"./setUpTimers\");\n\nrequire(\"./setUpXHR\");\n\nrequire(\"./setUpAlert\");\n\nrequire(\"./setUpNavigator\");\n\nrequire(\"./setUpBatchedBridge\");\n\nrequire(\"./setUpSegmentFetcher\");\n\nif (__DEV__) {\n  require(\"./checkNativeVersion\");\n\n  require(\"./setUpDeveloperTools\");\n}\n\nvar GlobalPerformanceLogger = require(\"../Utilities/GlobalPerformanceLogger\");\n\nGlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));\nGlobalPerformanceLogger.markPoint('initializeCore_end');","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Core/InitializeCore.js"],"names":["start","Date","now","require","__DEV__","GlobalPerformanceLogger","markPoint","currentTimestamp"],"mappings":"AA0BA;;AAEA,IAAMA,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;;AAEAC,OAAO,kBAAP;;AACAA,OAAO,sBAAP;;AACAA,OAAO,mBAAP;;AACAA,OAAO,wBAAP;;AACAA,OAAO,qBAAP;;AACAA,OAAO,6BAAP;;AACAA,OAAO,iBAAP;;AACAA,OAAO,cAAP;;AACAA,OAAO,gBAAP;;AACAA,OAAO,oBAAP;;AACAA,OAAO,wBAAP;;AACAA,OAAO,yBAAP;;AACA,IAAIC,OAAJ,EAAa;AACXD,EAAAA,OAAO,wBAAP;;AACAA,EAAAA,OAAO,yBAAP;AACD;;AAED,IAAME,uBAAuB,GAAGF,OAAO,wCAAvC;;AAIAE,uBAAuB,CAACC,SAAxB,CACE,sBADF,EAEED,uBAAuB,CAACE,gBAAxB,MAA8CN,IAAI,CAACC,GAAL,KAAaF,KAA3D,CAFF;AAIAK,uBAAuB,CAACC,SAAxB,CAAkC,oBAAlC","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n/* globals window: true */\r\n\r\n/**\r\n * Sets up global variables typical in most JavaScript environments.\r\n *\r\n *   1. Global timers (via `setTimeout` etc).\r\n *   2. Global console object.\r\n *   3. Hooks for printing stack traces with source maps.\r\n *\r\n * Leaves enough room in the environment for implementing your own:\r\n *\r\n *   1. Require system.\r\n *   2. Bridged modules.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nconst start = Date.now();\r\n\r\nrequire('./setUpGlobals');\r\nrequire('./setUpPerformance');\r\nrequire('./setUpSystrace');\r\nrequire('./setUpErrorHandling');\r\nrequire('./polyfillPromise');\r\nrequire('./setUpRegeneratorRuntime');\r\nrequire('./setUpTimers');\r\nrequire('./setUpXHR');\r\nrequire('./setUpAlert');\r\nrequire('./setUpNavigator');\r\nrequire('./setUpBatchedBridge');\r\nrequire('./setUpSegmentFetcher');\r\nif (__DEV__) {\r\n  require('./checkNativeVersion');\r\n  require('./setUpDeveloperTools');\r\n}\r\n\r\nconst GlobalPerformanceLogger = require('../Utilities/GlobalPerformanceLogger');\r\n// We could just call GlobalPerformanceLogger.markPoint at the top of the file,\r\n// but then we'd be excluding the time it took to require the logger.\r\n// Instead, we just use Date.now and backdate the timestamp.\r\nGlobalPerformanceLogger.markPoint(\r\n  'initializeCore_start',\r\n  GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start),\r\n);\r\nGlobalPerformanceLogger.markPoint('initializeCore_end');\r\n"]},"metadata":{},"sourceType":"script"}