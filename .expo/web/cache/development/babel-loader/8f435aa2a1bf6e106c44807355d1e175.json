{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar InspectorAgent = require(\"./InspectorAgent\");\n\nvar JSInspector = require(\"./JSInspector\");\n\nvar XMLHttpRequest = require(\"../Network/XMLHttpRequest\");\n\nvar Interceptor = function () {\n  function Interceptor(agent) {\n    _classCallCheck(this, Interceptor);\n\n    this._agent = agent;\n    this._requests = new Map();\n  }\n\n  _createClass(Interceptor, [{\n    key: \"getData\",\n    value: function getData(requestId) {\n      return this._requests.get(requestId);\n    }\n  }, {\n    key: \"requestSent\",\n    value: function requestSent(id, url, method, headers) {\n      var requestId = String(id);\n\n      this._requests.set(requestId, '');\n\n      var request = {\n        url: url,\n        method: method,\n        headers: headers,\n        initialPriority: 'Medium'\n      };\n      var event = {\n        requestId: requestId,\n        documentURL: '',\n        frameId: '1',\n        loaderId: '1',\n        request: request,\n        timestamp: JSInspector.getTimestamp(),\n        initiator: {\n          type: 'other'\n        },\n        type: 'Other'\n      };\n\n      this._agent.sendEvent('requestWillBeSent', event);\n    }\n  }, {\n    key: \"responseReceived\",\n    value: function responseReceived(id, url, status, headers) {\n      var requestId = String(id);\n      var response = {\n        url: url,\n        status: status,\n        statusText: String(status),\n        headers: headers,\n        requestHeaders: {},\n        mimeType: this._getMimeType(headers),\n        connectionReused: false,\n        connectionId: -1,\n        encodedDataLength: 0,\n        securityState: 'unknown'\n      };\n      var event = {\n        requestId: requestId,\n        frameId: '1',\n        loaderId: '1',\n        timestamp: JSInspector.getTimestamp(),\n        type: 'Other',\n        response: response\n      };\n\n      this._agent.sendEvent('responseReceived', event);\n    }\n  }, {\n    key: \"dataReceived\",\n    value: function dataReceived(id, data) {\n      var requestId = String(id);\n      var existingData = this._requests.get(requestId) || '';\n\n      this._requests.set(requestId, existingData.concat(data));\n\n      var event = {\n        requestId: requestId,\n        timestamp: JSInspector.getTimestamp(),\n        dataLength: data.length,\n        encodedDataLength: data.length\n      };\n\n      this._agent.sendEvent('dataReceived', event);\n    }\n  }, {\n    key: \"loadingFinished\",\n    value: function loadingFinished(id, encodedDataLength) {\n      var event = {\n        requestId: String(id),\n        timestamp: JSInspector.getTimestamp(),\n        encodedDataLength: encodedDataLength\n      };\n\n      this._agent.sendEvent('loadingFinished', event);\n    }\n  }, {\n    key: \"loadingFailed\",\n    value: function loadingFailed(id, error) {\n      var event = {\n        requestId: String(id),\n        timestamp: JSInspector.getTimestamp(),\n        type: 'Other',\n        errorText: error\n      };\n\n      this._agent.sendEvent('loadingFailed', event);\n    }\n  }, {\n    key: \"_getMimeType\",\n    value: function _getMimeType(headers) {\n      var contentType = headers['Content-Type'] || '';\n      return contentType.split(';')[0];\n    }\n  }]);\n\n  return Interceptor;\n}();\n\nvar NetworkAgent = function (_InspectorAgent) {\n  _inherits(NetworkAgent, _InspectorAgent);\n\n  var _super = _createSuper(NetworkAgent);\n\n  function NetworkAgent() {\n    _classCallCheck(this, NetworkAgent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NetworkAgent, [{\n    key: \"enable\",\n    value: function enable(_ref) {\n      var maxResourceBufferSize = _ref.maxResourceBufferSize,\n          maxTotalBufferSize = _ref.maxTotalBufferSize;\n      this._interceptor = new Interceptor(this);\n      XMLHttpRequest.setInterceptor(this._interceptor);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      XMLHttpRequest.setInterceptor(null);\n      this._interceptor = null;\n    }\n  }, {\n    key: \"getResponseBody\",\n    value: function getResponseBody(_ref2) {\n      var requestId = _ref2.requestId;\n      return {\n        body: this.interceptor().getData(requestId),\n        base64Encoded: false\n      };\n    }\n  }, {\n    key: \"interceptor\",\n    value: function interceptor() {\n      if (this._interceptor) {\n        return this._interceptor;\n      } else {\n        throw Error('_interceptor can not be null');\n      }\n    }\n  }]);\n\n  return NetworkAgent;\n}(InspectorAgent);\n\nNetworkAgent.DOMAIN = 'Network';\nmodule.exports = NetworkAgent;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/JSInspector/NetworkAgent.js"],"names":["InspectorAgent","require","JSInspector","XMLHttpRequest","Interceptor","agent","_agent","_requests","Map","requestId","get","id","url","method","headers","String","set","request","initialPriority","event","documentURL","frameId","loaderId","timestamp","getTimestamp","initiator","type","sendEvent","status","response","statusText","requestHeaders","mimeType","_getMimeType","connectionReused","connectionId","encodedDataLength","securityState","data","existingData","concat","dataLength","length","error","errorText","contentType","split","NetworkAgent","maxResourceBufferSize","maxTotalBufferSize","_interceptor","setInterceptor","body","interceptor","getData","base64Encoded","Error","DOMAIN","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n'use strict';\r\n\r\nconst InspectorAgent = require('./InspectorAgent');\r\nconst JSInspector = require('./JSInspector');\r\nconst XMLHttpRequest = require('../Network/XMLHttpRequest');\r\n\r\nimport type EventSender from './InspectorAgent';\r\n\r\ntype RequestId = string;\r\n\r\ntype LoaderId = string;\r\ntype FrameId = string;\r\ntype Timestamp = number;\r\n\r\ntype Headers = {[string]: string};\r\n\r\n// We don't currently care about this\r\ntype ResourceTiming = null;\r\n\r\ntype ResourceType =\r\n  | 'Document'\r\n  | 'Stylesheet'\r\n  | 'Image'\r\n  | 'Media'\r\n  | 'Font'\r\n  | 'Script'\r\n  | 'TextTrack'\r\n  | 'XHR'\r\n  | 'Fetch'\r\n  | 'EventSource'\r\n  | 'WebSocket'\r\n  | 'Manifest'\r\n  | 'Other';\r\n\r\ntype SecurityState =\r\n  | 'unknown'\r\n  | 'neutral'\r\n  | 'insecure'\r\n  | 'warning'\r\n  | 'secure'\r\n  | 'info';\r\ntype BlockedReason =\r\n  | 'csp'\r\n  | 'mixed-content'\r\n  | 'origin'\r\n  | 'inspector'\r\n  | 'subresource-filter'\r\n  | 'other';\r\n\r\ntype StackTrace = null;\r\n\r\ntype Initiator = {\r\n  type: 'script' | 'other',\r\n  stackTrace?: StackTrace,\r\n  url?: string,\r\n  lineNumber?: number,\r\n  ...\r\n};\r\n\r\ntype ResourcePriority = 'VeryLow' | 'Low' | 'Medium' | 'High' | 'VeryHigh';\r\n\r\ntype Request = {\r\n  url: string,\r\n  method: string,\r\n  headers: Headers,\r\n  postData?: string,\r\n  mixedContentType?: 'blockable' | 'optionally-blockable' | 'none',\r\n  initialPriority: ResourcePriority,\r\n  ...\r\n};\r\n\r\ntype Response = {\r\n  url: string,\r\n  status: number,\r\n  statusText: string,\r\n  headers: Headers,\r\n  headersText?: string,\r\n  mimeType: string,\r\n  requestHeaders?: Headers,\r\n  requestHeadersText?: string,\r\n  connectionReused: boolean,\r\n  connectionId: number,\r\n  fromDiskCache?: boolean,\r\n  encodedDataLength: number,\r\n  timing?: ResourceTiming,\r\n  securityState: SecurityState,\r\n  ...\r\n};\r\n\r\ntype RequestWillBeSentEvent = {\r\n  requestId: RequestId,\r\n  frameId: FrameId,\r\n  loaderId: LoaderId,\r\n  documentURL: string,\r\n  request: Request,\r\n  timestamp: Timestamp,\r\n  initiator: Initiator,\r\n  redirectResponse?: Response,\r\n  // This is supposed to be optional but the inspector crashes without it,\r\n  // see https://bugs.chromium.org/p/chromium/issues/detail?id=653138\r\n  type: ResourceType,\r\n  ...\r\n};\r\n\r\ntype ResponseReceivedEvent = {\r\n  requestId: RequestId,\r\n  frameId: FrameId,\r\n  loaderId: LoaderId,\r\n  timestamp: Timestamp,\r\n  type: ResourceType,\r\n  response: Response,\r\n  ...\r\n};\r\n\r\ntype DataReceived = {\r\n  requestId: RequestId,\r\n  timestamp: Timestamp,\r\n  dataLength: number,\r\n  encodedDataLength: number,\r\n  ...\r\n};\r\n\r\ntype LoadingFinishedEvent = {\r\n  requestId: RequestId,\r\n  timestamp: Timestamp,\r\n  encodedDataLength: number,\r\n  ...\r\n};\r\n\r\ntype LoadingFailedEvent = {\r\n  requestId: RequestId,\r\n  timestamp: Timestamp,\r\n  type: ResourceType,\r\n  errorText: string,\r\n  canceled?: boolean,\r\n  blockedReason?: BlockedReason,\r\n  ...\r\n};\r\n\r\nclass Interceptor {\r\n  _agent: NetworkAgent;\r\n  _requests: Map<string, string>;\r\n\r\n  constructor(agent: NetworkAgent) {\r\n    this._agent = agent;\r\n    this._requests = new Map();\r\n  }\r\n\r\n  getData(requestId: string): ?string {\r\n    return this._requests.get(requestId);\r\n  }\r\n\r\n  requestSent(id: number, url: string, method: string, headers: Headers) {\r\n    const requestId = String(id);\r\n    this._requests.set(requestId, '');\r\n\r\n    const request: Request = {\r\n      url,\r\n      method,\r\n      headers,\r\n      initialPriority: 'Medium',\r\n    };\r\n    const event: RequestWillBeSentEvent = {\r\n      requestId,\r\n      documentURL: '',\r\n      frameId: '1',\r\n      loaderId: '1',\r\n      request,\r\n      timestamp: JSInspector.getTimestamp(),\r\n      initiator: {\r\n        // TODO(blom): Get stack trace\r\n        // If type is 'script' the inspector will try to execute\r\n        // `stack.callFrames[0]`\r\n        type: 'other',\r\n      },\r\n      type: 'Other',\r\n    };\r\n    this._agent.sendEvent('requestWillBeSent', event);\r\n  }\r\n\r\n  responseReceived(id: number, url: string, status: number, headers: Headers) {\r\n    const requestId = String(id);\r\n    const response: Response = {\r\n      url,\r\n      status,\r\n      statusText: String(status),\r\n      headers,\r\n      // TODO(blom) refined headers, can we get this?\r\n      requestHeaders: {},\r\n      mimeType: this._getMimeType(headers),\r\n      connectionReused: false,\r\n      connectionId: -1,\r\n      encodedDataLength: 0,\r\n      securityState: 'unknown',\r\n    };\r\n\r\n    const event: ResponseReceivedEvent = {\r\n      requestId,\r\n      frameId: '1',\r\n      loaderId: '1',\r\n      timestamp: JSInspector.getTimestamp(),\r\n      type: 'Other',\r\n      response,\r\n    };\r\n    this._agent.sendEvent('responseReceived', event);\r\n  }\r\n\r\n  dataReceived(id: number, data: string) {\r\n    const requestId = String(id);\r\n    const existingData = this._requests.get(requestId) || '';\r\n    this._requests.set(requestId, existingData.concat(data));\r\n    const event: DataReceived = {\r\n      requestId,\r\n      timestamp: JSInspector.getTimestamp(),\r\n      dataLength: data.length,\r\n      encodedDataLength: data.length,\r\n    };\r\n    this._agent.sendEvent('dataReceived', event);\r\n  }\r\n\r\n  loadingFinished(id: number, encodedDataLength: number) {\r\n    const event: LoadingFinishedEvent = {\r\n      requestId: String(id),\r\n      timestamp: JSInspector.getTimestamp(),\r\n      encodedDataLength: encodedDataLength,\r\n    };\r\n    this._agent.sendEvent('loadingFinished', event);\r\n  }\r\n\r\n  loadingFailed(id: number, error: string) {\r\n    const event: LoadingFailedEvent = {\r\n      requestId: String(id),\r\n      timestamp: JSInspector.getTimestamp(),\r\n      type: 'Other',\r\n      errorText: error,\r\n    };\r\n    this._agent.sendEvent('loadingFailed', event);\r\n  }\r\n\r\n  _getMimeType(headers: Headers): string {\r\n    const contentType = headers['Content-Type'] || '';\r\n    return contentType.split(';')[0];\r\n  }\r\n}\r\n\r\ntype EnableArgs = {\r\n  maxResourceBufferSize?: number,\r\n  maxTotalBufferSize?: number,\r\n  ...\r\n};\r\n\r\nclass NetworkAgent extends InspectorAgent {\r\n  static DOMAIN: $TEMPORARY$string<'Network'> = 'Network';\r\n\r\n  _sendEvent: EventSender;\r\n  _interceptor: ?Interceptor;\r\n\r\n  enable({maxResourceBufferSize, maxTotalBufferSize}: EnableArgs) {\r\n    this._interceptor = new Interceptor(this);\r\n    XMLHttpRequest.setInterceptor(this._interceptor);\r\n  }\r\n\r\n  disable() {\r\n    XMLHttpRequest.setInterceptor(null);\r\n    this._interceptor = null;\r\n  }\r\n\r\n  getResponseBody({\r\n    requestId,\r\n  }: {\r\n    requestId: RequestId,\r\n    ...\r\n  }): {\r\n    body: ?string,\r\n    base64Encoded: boolean,\r\n    ...\r\n  } {\r\n    return {body: this.interceptor().getData(requestId), base64Encoded: false};\r\n  }\r\n\r\n  interceptor(): Interceptor {\r\n    if (this._interceptor) {\r\n      return this._interceptor;\r\n    } else {\r\n      throw Error('_interceptor can not be null');\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = NetworkAgent;\r\n"]},"metadata":{},"sourceType":"script"}