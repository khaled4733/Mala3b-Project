{"ast":null,"code":"import { handleException, SyntheticError } from \"./ExceptionsManager\";\n\nfunction showErrorDialog(capturedError) {\n  var componentStack = capturedError.componentStack,\n      error = capturedError.error;\n  var errorToHandle;\n\n  if (error instanceof Error) {\n    errorToHandle = error;\n  } else if (typeof error === 'string') {\n    errorToHandle = new SyntheticError(error);\n  } else {\n    errorToHandle = new SyntheticError('Unspecified error');\n  }\n\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n\n  handleException(errorToHandle, false);\n  return false;\n}\n\nmodule.exports = {\n  showErrorDialog: showErrorDialog\n};","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"names":["handleException","SyntheticError","showErrorDialog","capturedError","componentStack","error","errorToHandle","Error","isComponentError","e","module","exports"],"mappings":"AAmBA,SAAQA,eAAR,EAAyBC,cAAzB;;AAMA,SAASC,eAAT,CAAyBC,aAAzB,EAAgE;AAC9D,MAAOC,cAAP,GAAgCD,aAAhC,CAAOC,cAAP;AAAA,MAAuBC,KAAvB,GAAgCF,aAAhC,CAAuBE,KAAvB;AAEA,MAAIC,aAAJ;;AAGA,MAAID,KAAK,YAAYE,KAArB,EAA4B;AAC1BD,IAAAA,aAAa,GAAID,KAAjB;AACD,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,IAAAA,aAAa,GAAI,IAAIL,cAAJ,CAAmBI,KAAnB,CAAjB;AACD,GAFM,MAEA;AACLC,IAAAA,aAAa,GAAI,IAAIL,cAAJ,CAAmB,mBAAnB,CAAjB;AACD;;AACD,MAAI;AACFK,IAAAA,aAAa,CAACF,cAAd,GAA+BA,cAA/B;AACAE,IAAAA,aAAa,CAACE,gBAAd,GAAiC,IAAjC;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;AACdT,EAAAA,eAAe,CAACM,aAAD,EAAgB,KAAhB,CAAf;AAMA,SAAO,KAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AAACT,EAAAA,eAAe,EAAfA;AAAD,CAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\nexport type CapturedError = {\r\n  +componentStack: string,\r\n  +error: mixed,\r\n  +errorBoundary: ?{...},\r\n  ...\r\n};\r\n\r\nimport type {ExtendedError} from './Devtools/parseErrorStack';\r\n\r\nimport {handleException, SyntheticError} from './ExceptionsManager';\r\n\r\n/**\r\n * Intercept lifecycle errors and ensure they are shown with the correct stack\r\n * trace within the native redbox component.\r\n */\r\nfunction showErrorDialog(capturedError: CapturedError): boolean {\r\n  const {componentStack, error} = capturedError;\r\n\r\n  let errorToHandle;\r\n\r\n  // Typically Errors are thrown but eg strings or null can be thrown as well.\r\n  if (error instanceof Error) {\r\n    errorToHandle = (error: ExtendedError);\r\n  } else if (typeof error === 'string') {\r\n    errorToHandle = (new SyntheticError(error): ExtendedError);\r\n  } else {\r\n    errorToHandle = (new SyntheticError('Unspecified error'): ExtendedError);\r\n  }\r\n  try {\r\n    errorToHandle.componentStack = componentStack;\r\n    errorToHandle.isComponentError = true;\r\n  } catch (e) {}\r\n  handleException(errorToHandle, false);\r\n\r\n  // Return false here to prevent ReactFiberErrorLogger default behavior of\r\n  // logging error details to console.error. Calls to console.error are\r\n  // automatically routed to the native redbox controller, which we've already\r\n  // done above by calling ExceptionsManager.\r\n  return false;\r\n}\r\n\r\nmodule.exports = {showErrorDialog};\r\n"]},"metadata":{},"sourceType":"module"}