{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { db } from \"../Config\";\nimport { getDocs, doc, setDoc, addDoc, updateDoc, deleteDoc, collection, query, where, onSnapshot } from \"firebase/firestore\";\n\nfunction addTStadium(Tennis, id) {\n  return _regeneratorRuntime.async(function addTStadium$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(setDoc(doc(db, \"tennis\", id), Tennis));\n\n        case 3:\n          console.log(\"Document written with ID: \", id);\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"Error adding document: \", _context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction getTStadium() {\n  var stadiumsCol, stadiumsSnapshot, stadiumList;\n  return _regeneratorRuntime.async(function getTStadium$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          stadiumsCol = collection(db, \"tennis\");\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(stadiumsCol));\n\n        case 3:\n          stadiumsSnapshot = _context2.sent;\n          stadiumList = stadiumsSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(stadiumList);\n          return _context2.abrupt(\"return\", stadiumList);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction deleteTStadium(id) {\n  return _regeneratorRuntime.async(function deleteTStadium$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(deleteDoc(doc(db, \"tennis\", id)));\n\n        case 3:\n          console.log(\"Document deleted with ID: \", id);\n          _context3.next = 9;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(\"Error deleting document: \", _context3.t0);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction updateTStadium(docId, Tennis) {\n  return _regeneratorRuntime.async(function updateTStadium$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(updateDoc(doc(db, \"tennis\", docId), Tennis));\n\n        case 3:\n          console.log(\"Document updated with ID: \", docId);\n          _context4.next = 9;\n          break;\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(\"Error updateing document: \", _context4.t0);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nexport { addTStadium, getTStadium, deleteTStadium, updateTStadium };","map":{"version":3,"sources":["C:/Users/tboss/CS303-Project-4/db/Stadium/Tennis.js"],"names":["db","getDocs","doc","setDoc","addDoc","updateDoc","deleteDoc","collection","query","where","onSnapshot","addTStadium","Tennis","id","console","log","error","getTStadium","stadiumsCol","stadiumsSnapshot","stadiumList","docs","map","data","deleteTStadium","updateTStadium","docId"],"mappings":";;;;;;;AAAA,SAASA,EAAT;AACA,SACEC,OADF,EAEEC,GAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,SALF,EAMEC,SANF,EAOEC,UAPF,EAQEC,KARF,EASEC,KATF,EAUEC,UAVF,QAWO,oBAXP;;AAaA,SAAeC,WAAf,CAA2BC,MAA3B,EAAmCC,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEUV,MAAM,CAACD,GAAG,CAACF,EAAD,EAAK,QAAL,EAAea,EAAf,CAAJ,EAAwBD,MAAxB,CAFhB;;AAAA;AAGIE,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,EAA1C;AAHJ;AAAA;;AAAA;AAAA;AAAA;AAKIC,UAAAA,OAAO,CAACE,KAAR,CAAc,yBAAd;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAeC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,UAAAA,WADR,GACsBX,UAAU,CAACP,EAAD,EAAK,QAAL,CADhC;AAAA;AAAA,2CAEiCC,OAAO,CAACiB,WAAD,CAFxC;;AAAA;AAEQC,UAAAA,gBAFR;AAGQC,UAAAA,WAHR,GAGsBD,gBAAgB,CAACE,IAAjB,CAAsBC,GAAtB,CAA0B,UAACpB,GAAD,EAAS;AACrD;AAASW,cAAAA,EAAE,EAAEX,GAAG,CAACW;AAAjB,eAAwBX,GAAG,CAACqB,IAAJ,EAAxB;AACD,WAFmB,CAHtB;AAMET,UAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;AANF,4CAOSA,WAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAeI,cAAf,CAA8BX,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEUP,SAAS,CAACJ,GAAG,CAACF,EAAD,EAAK,QAAL,EAAea,EAAf,CAAJ,CAFnB;;AAAA;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,EAA1C;AAHJ;AAAA;;AAAA;AAAA;AAAA;AAKIC,UAAAA,OAAO,CAACE,KAAR,CAAc,2BAAd;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAeS,cAAf,CAA8BC,KAA9B,EAAqCd,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEUP,SAAS,CAACH,GAAG,CAACF,EAAD,EAAK,QAAL,EAAe0B,KAAf,CAAJ,EAA2Bd,MAA3B,CAFnB;;AAAA;AAGIE,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CW,KAA1C;AAHJ;AAAA;;AAAA;AAAA;AAAA;AAKIZ,UAAAA,OAAO,CAACE,KAAR,CAAc,4BAAd;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAASL,WAAT,EAAsBM,WAAtB,EAAmCO,cAAnC,EAAmDC,cAAnD","sourcesContent":["import { db } from \"../Config\";\r\nimport {\r\n  getDocs,\r\n  doc,\r\n  setDoc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  collection,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n} from \"firebase/firestore\";\r\n\r\nasync function addTStadium(Tennis, id) {\r\n  try {\r\n    await setDoc(doc(db, \"tennis\", id), Tennis);\r\n    console.log(\"Document written with ID: \", id);\r\n  } catch (e) {\r\n    console.error(\"Error adding document: \", e);\r\n  }\r\n}\r\n\r\nasync function getTStadium() {\r\n  const stadiumsCol = collection(db, \"tennis\");\r\n  const stadiumsSnapshot = await getDocs(stadiumsCol);\r\n  const stadiumList = stadiumsSnapshot.docs.map((doc) => {\r\n    return { id: doc.id, ...doc.data() };\r\n  });\r\n  console.log(stadiumList);\r\n  return stadiumList;\r\n}\r\n\r\nasync function deleteTStadium(id) {\r\n  try {\r\n    await deleteDoc(doc(db, \"tennis\", id));\r\n    console.log(\"Document deleted with ID: \", id);\r\n  } catch (error) {\r\n    console.error(\"Error deleting document: \", error);\r\n  }\r\n}\r\n\r\nasync function updateTStadium(docId, Tennis) {\r\n  try {\r\n    await updateDoc(doc(db, \"tennis\", docId), Tennis);\r\n    console.log(\"Document updated with ID: \", docId);\r\n  } catch (error) {\r\n    console.error(\"Error updateing document: \", error);\r\n  }\r\n}\r\n\r\nexport { addTStadium, getTStadium, deleteTStadium, updateTStadium };"]},"metadata":{},"sourceType":"module"}