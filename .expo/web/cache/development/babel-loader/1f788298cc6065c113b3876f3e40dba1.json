{"ast":null,"code":"'use strict';\n\nvar invariant = require('invariant');\n\nvar levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error'\n};\nvar warningHandler = null;\nvar RCTLog = {\n  logIfNoNativeHook: function logIfNoNativeHook(level) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole.apply(RCTLog, [level].concat(args));\n    } else {\n      if (warningHandler && level === 'warn') {\n        warningHandler.apply(void 0, args);\n      }\n    }\n  },\n  logToConsole: function logToConsole(level) {\n    var _console;\n\n    var logFn = levelsMap[level];\n    invariant(logFn, 'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString());\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    (_console = console)[logFn].apply(_console, args);\n  },\n  setWarningHandler: function setWarningHandler(handler) {\n    warningHandler = handler;\n  }\n};\nmodule.exports = RCTLog;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Utilities/RCTLog.js"],"names":["invariant","require","levelsMap","log","info","warn","error","fatal","warningHandler","RCTLog","logIfNoNativeHook","level","args","global","nativeLoggingHook","logToConsole","logFn","Object","keys","toString","console","setWarningHandler","handler","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,GAAG,EAAE,KADW;AAEhBC,EAAAA,IAAI,EAAE,MAFU;AAGhBC,EAAAA,IAAI,EAAE,MAHU;AAIhBC,EAAAA,KAAK,EAAE,OAJS;AAKhBC,EAAAA,KAAK,EAAE;AALS,CAAlB;AAQA,IAAIC,cAA0C,GAAG,IAAjD;AAEA,IAAMC,MAAM,GAAG;AAEbC,EAAAA,iBAFa,6BAEKC,KAFL,EAEiD;AAAA,sCAA1BC,IAA0B;AAA1BA,MAAAA,IAA0B;AAAA;;AAE5D,QAAI,OAAOC,MAAM,CAACC,iBAAd,KAAoC,WAAxC,EAAqD;AACnDL,MAAAA,MAAM,CAACM,YAAP,OAAAN,MAAM,GAAcE,KAAd,SAAwBC,IAAxB,EAAN;AACD,KAFD,MAEO;AAEL,UAAIJ,cAAc,IAAIG,KAAK,KAAK,MAAhC,EAAwC;AACtCH,QAAAA,cAAc,MAAd,SAAkBI,IAAlB;AACD;AACF;AACF,GAZY;AAebG,EAAAA,YAfa,wBAeAJ,KAfA,EAe4C;AAAA;;AACvD,QAAMK,KAAK,GAAGd,SAAS,CAACS,KAAD,CAAvB;AACAX,IAAAA,SAAS,CACPgB,KADO,EAEP,YAAYL,KAAZ,GAAoB,eAApB,GAAsCM,MAAM,CAACC,IAAP,CAAYhB,SAAZ,EAAuBiB,QAAvB,EAF/B,CAAT;;AAFuD,uCAA1BP,IAA0B;AAA1BA,MAAAA,IAA0B;AAAA;;AAOvD,gBAAAQ,OAAO,EAACJ,KAAD,CAAP,iBAAkBJ,IAAlB;AACD,GAvBY;AAyBbS,EAAAA,iBAzBa,6BAyBKC,OAzBL,EAyB2C;AACtDd,IAAAA,cAAc,GAAGc,OAAjB;AACD;AA3BY,CAAf;AA8BAC,MAAM,CAACC,OAAP,GAAiBf,MAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\n\r\nconst invariant = require('invariant');\r\n\r\nconst levelsMap = {\r\n  log: 'log',\r\n  info: 'info',\r\n  warn: 'warn',\r\n  error: 'error',\r\n  fatal: 'error',\r\n};\r\n\r\nlet warningHandler: ?(...Array<mixed>) => void = null;\r\n\r\nconst RCTLog = {\r\n  // level one of log, info, warn, error, mustfix\r\n  logIfNoNativeHook(level: string, ...args: Array<mixed>): void {\r\n    // We already printed in the native console, so only log here if using a js debugger\r\n    if (typeof global.nativeLoggingHook === 'undefined') {\r\n      RCTLog.logToConsole(level, ...args);\r\n    } else {\r\n      // Report native warnings to LogBox\r\n      if (warningHandler && level === 'warn') {\r\n        warningHandler(...args);\r\n      }\r\n    }\r\n  },\r\n\r\n  // Log to console regardless of nativeLoggingHook\r\n  logToConsole(level: string, ...args: Array<mixed>): void {\r\n    const logFn = levelsMap[level];\r\n    invariant(\r\n      logFn,\r\n      'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString(),\r\n    );\r\n\r\n    console[logFn](...args);\r\n  },\r\n\r\n  setWarningHandler(handler: typeof warningHandler): void {\r\n    warningHandler = handler;\r\n  },\r\n};\r\n\r\nmodule.exports = RCTLog;\r\n"]},"metadata":{},"sourceType":"script"}