{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where, updateDoc, deleteField, arrayUnion, arrayRemove, deleteDoc } from \"firebase/firestore\";\nimport { app, db } from \"./Config\";\nvar firestoreDB = getFirestore(app);\n\nfunction addUser(user) {\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(setDoc(doc(firestoreDB, \"users\", user.id), user));\n\n        case 3:\n          console.log(\"Document written with ID: \", user.id);\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"Error adding document: \", _context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction addUsersToDocuments(collectionName, docId, userCollection) {\n  var docRef;\n  return _regeneratorRuntime.async(function addUsersToDocuments$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"inside \" + collectionName);\n          docRef = doc(db, collectionName, docId);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(updateDoc(docRef, {\n            users: userCollection\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction editUser(user) {\n  return _regeneratorRuntime.async(function editUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"edit user\", user);\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(setDoc(doc(db, \"users\", user.id), user));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUsers() {\n  var usersCol, userSnapshot, userList;\n  return _regeneratorRuntime.async(function getUsers$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          usersCol = collection(firestoreDB, \"users\");\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(usersCol));\n\n        case 3:\n          userSnapshot = _context4.sent;\n          userList = userSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(userList);\n          return _context4.abrupt(\"return\", userList);\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUserById(id) {\n  var usersRef, q, querySnapshot;\n  return _regeneratorRuntime.async(function getUserById$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          usersRef = collection(firestoreDB, \"users\");\n          q = query(usersRef, where(\"id\", \"==\", id));\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 4:\n          querySnapshot = _context5.sent;\n          return _context5.abrupt(\"return\", querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction updateFAvailable(tempDoc) {\n  return _regeneratorRuntime.async(function updateFAvailable$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          console.log(tempDoc);\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(setDoc(doc(db, \"football\", tempDoc.id), tempDoc));\n\n        case 4:\n          _context6.next = 9;\n          break;\n\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction subscribe(callback) {\n  var unsubscribe = onSnapshot(query(collection(db, \"users\")), function (snapshot) {\n    var source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\n    snapshot.docChanges().forEach(function (change) {\n      if (callback) callback({\n        change: change,\n        snapshot: snapshot\n      });\n    });\n  });\n  return unsubscribe;\n}\n\nexport { getUsers, addUser, updateFAvailable, addUsersToDocuments, getUserById, editUser, subscribe };","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/New folder (2)/CS303-Project/db/User.js"],"names":["addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","updateDoc","deleteField","arrayUnion","arrayRemove","deleteDoc","app","db","firestoreDB","addUser","user","id","console","log","error","addUsersToDocuments","collectionName","docId","userCollection","docRef","users","editUser","getUsers","usersCol","userSnapshot","userList","docs","map","data","getUserById","usersRef","q","querySnapshot","updateFAvailable","tempDoc","subscribe","callback","unsubscribe","onSnapshot","snapshot","source","metadata","hasPendingWrites","docChanges","forEach","change"],"mappings":"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","sourcesContent":["import {\r\n  addDoc,\r\n  collection,\r\n  getDocs,\r\n  getFirestore,\r\n  setDoc,\r\n  doc,\r\n  query,\r\n  where,\r\n  updateDoc,\r\n  deleteField,\r\n  arrayUnion,\r\n  arrayRemove,\r\n  deleteDoc\r\n} from \"firebase/firestore\";\r\nimport {app, db} from \"./Config\";\r\n\r\nconst firestoreDB = getFirestore(app);\r\n\r\nasync function addUser(user) {\r\n  try {\r\n      await setDoc(doc(firestoreDB, \"users\", user.id),  user );\r\n      console.log(\"Document written with ID: \", user.id);\r\n    } catch (e) {\r\n      console.error(\"Error adding document: \", e);\r\n    }\r\n}\r\n\r\nasync function addUsersToDocuments(collectionName, docId, userCollection) {\r\n  console.log(\"inside \" + collectionName);\r\n  const docRef = doc(db, collectionName, docId);\r\n  await updateDoc(docRef, {\r\n    users: userCollection,\r\n  });\r\n}\r\n\r\nasync function editUser(user) {\r\n  console.log(\"edit user\", user);\r\n  await setDoc(doc(db, \"users\", user.id), user);\r\n}\r\n\r\nasync function getUsers() {\r\n  const usersCol = collection(firestoreDB, \"users\");\r\n  const userSnapshot = await getDocs(usersCol);\r\n  const userList = userSnapshot.docs.map((doc) => {\r\n    return { id: doc.id, ...doc.data() };\r\n  });\r\n  console.log(userList);\r\n  return userList;\r\n}\r\n\r\nasync function getUserById(id) {\r\n  const usersRef = collection(firestoreDB, \"users\");\r\n  const q = query(usersRef, where(\"id\", \"==\", id));\r\n  const querySnapshot = await getDocs(q);\r\n  return querySnapshot.docs.map((doc) => {\r\n    return { id: doc.id, ...doc.data() };\r\n  });\r\n}\r\n\r\n//                    F-> for \"football\"\r\nasync function updateFAvailable(tempDoc) {\r\n  try {\r\n    console.log(tempDoc);\r\n    await setDoc(doc(db, \"football\", tempDoc.id), tempDoc); //if document with \"tempDoc.id\" not found add it, else update it\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\nfunction subscribe(callback) {\r\n  const unsubscribe = onSnapshot(query(collection(db, \"users\")), (snapshot) => {\r\n    const source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n    snapshot.docChanges().forEach((change) => {\r\n      if (callback) callback({ change, snapshot });\r\n    });\r\n  });\r\n  return unsubscribe;\r\n}\r\n\r\nexport {\r\n  getUsers,\r\n  addUser,\r\n  updateFAvailable,\r\n  addUsersToDocuments,\r\n  getUserById,\r\n  editUser,\r\n  subscribe,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}