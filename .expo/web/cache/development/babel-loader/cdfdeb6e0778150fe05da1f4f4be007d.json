{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where, updateDoc } from \"firebase/firestore\";\nimport { app, db } from \"./Config\";\nvar firestoreDB = getFirestore(app);\n\nfunction addUser(user) {\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(setDoc(doc(firestoreDB, \"users\", user.id), {\n            user: user\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUsers() {\n  var usersCol, userSnapshot, userList;\n  return _regeneratorRuntime.async(function getUsers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          usersCol = collection(firestoreDB, \"users\");\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(usersCol));\n\n        case 3:\n          userSnapshot = _context2.sent;\n          userList = userSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(userList);\n          return _context2.abrupt(\"return\", userList);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUserById(id) {\n  var usersRef, q, querySnapshot;\n  return _regeneratorRuntime.async(function getUserById$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          usersRef = collection(firestoreDB, \"users\");\n          q = query(usersRef, where(\"id\", \"==\", id));\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 4:\n          querySnapshot = _context3.sent;\n          return _context3.abrupt(\"return\", querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction updateAvailable(docId, tempDoc) {\n  var docRef;\n  return _regeneratorRuntime.async(function updateAvailable$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          docRef = doc(db, \"football\", docId);\n          console.log(\"entered updateFAvailable()\");\n          docRef.delete();\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(setDoc(docRef, {\n            available: false\n          }).then(console.log('available updated!')));\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction subscribe(callback) {\n  var unsubscribe = onSnapshot(query(collection(db, \"Chats\")), function (snapshot) {\n    var source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\n    snapshot.docChanges().forEach(function (change) {\n      if (callback) callback({\n        change: change,\n        snapshot: snapshot\n      });\n    });\n  });\n  return unsubscribe;\n}\n\nexport { getUsers, addUser, subscribe, updateAvailable };","map":{"version":3,"sources":["C:/Users/mahmo/OneDrive/Desktop/CS303-Project/CS303-Project/db/User.js"],"names":["addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","updateDoc","app","db","firestoreDB","addUser","user","id","getUsers","usersCol","userSnapshot","userList","docs","map","data","console","log","getUserById","usersRef","q","querySnapshot","updateAvailable","docId","tempDoc","docRef","delete","available","then","error","subscribe","callback","unsubscribe","onSnapshot","snapshot","source","metadata","hasPendingWrites","docChanges","forEach","change"],"mappings":"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","sourcesContent":["import {addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where, updateDoc} from \"firebase/firestore\";\r\nimport {app, db} from \"./Config\";\r\n\r\nconst firestoreDB = getFirestore(app);\r\n\r\n\r\nasync function addUser(user) {\r\n     await setDoc(doc(firestoreDB, \"users\",user.id), { user});\r\n}\r\n\r\nasync function getUsers() {\r\n    const usersCol = collection(firestoreDB, \"users\");\r\n    const userSnapshot = await getDocs(usersCol);\r\n    const userList =  userSnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n    console.log(userList);\r\n    return userList;\r\n}\r\n\r\n async function getUserById(id) {\r\n    const usersRef = collection(firestoreDB, \"users\");\r\n    const q = query(usersRef, where(\"id\", \"==\", id));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n}\r\n async function updateAvailable(docId,tempDoc) {\r\n    try {\r\n        // for (let i = 0; i < stadium.length; i++) {\r\n        //     if (stadium[i].id == userId) {\r\n        //         stadium[i].available =false;\r\n        //         console.log(stadium[i].available);\r\n        //     }\r\n        // }\r\n        const docRef = doc(db, \"football\", docId);\r\n        console.log(\"entered updateFAvailable()\")\r\n       docRef.delete()\r\n        await setDoc(docRef, {\r\n\r\n            available: false\r\n        }).then(console.log('available updated!'))\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n    }\r\n\r\n\r\n\r\nfunction subscribe(callback) {\r\n    const unsubscribe = onSnapshot(\r\n        query(collection(db, \"Chats\")),\r\n        (snapshot) => {\r\n            const source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n            snapshot.docChanges().forEach((change) => {\r\n                if (callback) callback({ change, snapshot });\r\n            });\r\n        }\r\n    );\r\n    return unsubscribe;\r\n}\r\n\r\nexport {getUsers, addUser,subscribe,updateAvailable};"]},"metadata":{},"sourceType":"module"}