{"ast":null,"code":"'use strict';\n\nimport requireNativeComponent from \"../../ReactNative/requireNativeComponent\";\nimport codegenNativeCommands from \"../../Utilities/codegenNativeCommands\";\nimport AndroidTextInputViewConfig from \"./AndroidTextInputViewConfig\";\n\nvar ReactNativeViewConfigRegistry = require(\"../../Renderer/shims/ReactNativeViewConfigRegistry\");\n\nexport var Commands = codegenNativeCommands({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection']\n});\nvar AndroidTextInputNativeComponent;\n\nif (global.RN$Bridgeless) {\n  ReactNativeViewConfigRegistry.register('AndroidTextInput', function () {\n    return AndroidTextInputViewConfig;\n  });\n  AndroidTextInputNativeComponent = 'AndroidTextInput';\n} else {\n  AndroidTextInputNativeComponent = requireNativeComponent('AndroidTextInput');\n}\n\nexport default AndroidTextInputNativeComponent;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js"],"names":["requireNativeComponent","codegenNativeCommands","AndroidTextInputViewConfig","ReactNativeViewConfigRegistry","require","Commands","supportedCommands","AndroidTextInputNativeComponent","global","RN$Bridgeless","register"],"mappings":"AAUA;;AAcA,OAAOA,sBAAP;AACA,OAAOC,qBAAP;AAEA,OAAOC,0BAAP;;AACA,IAAMC,6BAA6B,GAAGC,OAAO,sDAA7C;;AAmgBA,OAAO,IAAMC,QAAwB,GAAGJ,qBAAqB,CAAiB;AAC5EK,EAAAA,iBAAiB,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,qBAAlB;AADyD,CAAjB,CAAtD;AAIP,IAAIC,+BAAJ;;AACA,IAAIC,MAAM,CAACC,aAAX,EAA0B;AACxBN,EAAAA,6BAA6B,CAACO,QAA9B,CAAuC,kBAAvC,EAA2D,YAAM;AAC/D,WAAOR,0BAAP;AACD,GAFD;AAGAK,EAAAA,+BAA+B,GAAG,kBAAlC;AACD,CALD,MAKO;AACLA,EAAAA,+BAA+B,GAAGP,sBAAsB,CACtD,kBADsD,CAAxD;AAGD;;AAGD,eAAiBO,+BAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {ViewProps} from '../View/ViewPropTypes';\r\nimport type {\r\n  BubblingEventHandler,\r\n  DirectEventHandler,\r\n  Double,\r\n  Float,\r\n  Int32,\r\n  WithDefault,\r\n} from '../../Types/CodegenTypes';\r\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\r\nimport type {TextStyleProp, ViewStyleProp} from '../../StyleSheet/StyleSheet';\r\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\r\nimport requireNativeComponent from '../../ReactNative/requireNativeComponent';\r\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\r\nimport type {TextInputNativeCommands} from './TextInputNativeCommands';\r\nimport AndroidTextInputViewConfig from './AndroidTextInputViewConfig';\r\nconst ReactNativeViewConfigRegistry = require('../../Renderer/shims/ReactNativeViewConfigRegistry');\r\n\r\nexport type KeyboardType =\r\n  // Cross Platform\r\n  | 'default'\r\n  | 'email-address'\r\n  | 'numeric'\r\n  | 'phone-pad'\r\n  | 'number-pad'\r\n  | 'decimal-pad'\r\n  // iOS-only\r\n  | 'ascii-capable'\r\n  | 'numbers-and-punctuation'\r\n  | 'url'\r\n  | 'name-phone-pad'\r\n  | 'twitter'\r\n  | 'web-search'\r\n  // Android-only\r\n  | 'visible-password';\r\n\r\nexport type ReturnKeyType =\r\n  // Cross Platform\r\n  | 'done'\r\n  | 'go'\r\n  | 'next'\r\n  | 'search'\r\n  | 'send'\r\n  // Android-only\r\n  | 'none'\r\n  | 'previous'\r\n  // iOS-only\r\n  | 'default'\r\n  | 'emergency-call'\r\n  | 'google'\r\n  | 'join'\r\n  | 'route'\r\n  | 'yahoo';\r\n\r\nexport type NativeProps = $ReadOnly<{|\r\n  // This allows us to inherit everything from ViewProps except for style (see below)\r\n  // This must be commented for Fabric codegen to work.\r\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\r\n\r\n  /**\r\n   * Android props after this\r\n   */\r\n  /**\r\n   * Determines which content to suggest on auto complete, e.g.`username`.\r\n   * To disable auto complete, use `off`.\r\n   *\r\n   * *Android Only*\r\n   *\r\n   * The following values work on Android only:\r\n   *\r\n   * - `username`\r\n   * - `password`\r\n   * - `email`\r\n   * - `name`\r\n   * - `tel`\r\n   * - `street-address`\r\n   * - `postal-code`\r\n   * - `cc-number`\r\n   * - `cc-csc`\r\n   * - `cc-exp`\r\n   * - `cc-exp-month`\r\n   * - `cc-exp-year`\r\n   * - `off`\r\n   *\r\n   * @platform android\r\n   */\r\n  autoCompleteType?: WithDefault<\r\n    | 'cc-csc'\r\n    | 'cc-exp'\r\n    | 'cc-exp-month'\r\n    | 'cc-exp-year'\r\n    | 'cc-number'\r\n    | 'email'\r\n    | 'name'\r\n    | 'password'\r\n    | 'postal-code'\r\n    | 'street-address'\r\n    | 'tel'\r\n    | 'username'\r\n    | 'off',\r\n    'off',\r\n  >,\r\n\r\n  /**\r\n   * Sets the return key to the label. Use it instead of `returnKeyType`.\r\n   * @platform android\r\n   */\r\n  returnKeyLabel?: ?string,\r\n\r\n  /**\r\n   * Sets the number of lines for a `TextInput`. Use it with multiline set to\r\n   * `true` to be able to fill the lines.\r\n   * @platform android\r\n   */\r\n  numberOfLines?: ?Int32,\r\n\r\n  /**\r\n   * When `false`, if there is a small amount of space available around a text input\r\n   * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\r\n   * the text inside of a full screen text input mode. When `true`, this feature is\r\n   * disabled and users will always edit the text directly inside of the text input.\r\n   * Defaults to `false`.\r\n   * @platform android\r\n   */\r\n  disableFullscreenUI?: ?boolean,\r\n\r\n  /**\r\n   * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\r\n   * The default value is `simple`.\r\n   * @platform android\r\n   */\r\n  textBreakStrategy?: WithDefault<\r\n    'simple' | 'highQuality' | 'balanced',\r\n    'simple',\r\n  >,\r\n\r\n  /**\r\n   * The color of the `TextInput` underline.\r\n   * @platform android\r\n   */\r\n  underlineColorAndroid?: ?ColorValue,\r\n\r\n  /**\r\n   * If defined, the provided image resource will be rendered on the left.\r\n   * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\r\n   * like\r\n   * ```\r\n   * <TextInput\r\n   *  inlineImageLeft='search_icon'\r\n   * />\r\n   * ```\r\n   * @platform android\r\n   */\r\n  inlineImageLeft?: ?string,\r\n\r\n  /**\r\n   * Padding between the inline image, if any, and the text input itself.\r\n   * @platform android\r\n   */\r\n  inlineImagePadding?: ?Int32,\r\n\r\n  importantForAutofill?: string /*?(\r\n    | 'auto'\r\n    | 'no'\r\n    | 'noExcludeDescendants'\r\n    | 'yes'\r\n    | 'yesExcludeDescendants'\r\n  ),*/,\r\n\r\n  /**\r\n   * When `false`, it will prevent the soft keyboard from showing when the field is focused.\r\n   * Defaults to `true`.\r\n   */\r\n  showSoftInputOnFocus?: ?boolean,\r\n\r\n  /**\r\n   * TextInput props after this\r\n   */\r\n  /**\r\n   * Can tell `TextInput` to automatically capitalize certain characters.\r\n   *\r\n   * - `characters`: all characters.\r\n   * - `words`: first letter of each word.\r\n   * - `sentences`: first letter of each sentence (*default*).\r\n   * - `none`: don't auto capitalize anything.\r\n   */\r\n  autoCapitalize?: WithDefault<\r\n    'none' | 'sentences' | 'words' | 'characters',\r\n    'none',\r\n  >,\r\n\r\n  /**\r\n   * If `false`, disables auto-correct. The default value is `true`.\r\n   */\r\n  autoCorrect?: ?boolean,\r\n\r\n  /**\r\n   * If `true`, focuses the input on `componentDidMount`.\r\n   * The default value is `false`.\r\n   */\r\n  autoFocus?: ?boolean,\r\n\r\n  /**\r\n   * Specifies whether fonts should scale to respect Text Size accessibility settings. The\r\n   * default is `true`.\r\n   */\r\n  allowFontScaling?: ?boolean,\r\n\r\n  /**\r\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\r\n   * Possible values:\r\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\r\n   * `0`: no max, ignore parent/global default\r\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\r\n   */\r\n  maxFontSizeMultiplier?: ?Float,\r\n\r\n  /**\r\n   * If `false`, text is not editable. The default value is `true`.\r\n   */\r\n  editable?: ?boolean,\r\n\r\n  /**\r\n   * Determines which keyboard to open, e.g.`numeric`.\r\n   *\r\n   * The following values work across platforms:\r\n   *\r\n   * - `default`\r\n   * - `numeric`\r\n   * - `number-pad`\r\n   * - `decimal-pad`\r\n   * - `email-address`\r\n   * - `phone-pad`\r\n   *\r\n   * *Android Only*\r\n   *\r\n   * The following values work on Android only:\r\n   *\r\n   * - `visible-password`\r\n   */\r\n  keyboardType?: WithDefault<KeyboardType, 'default'>,\r\n\r\n  /**\r\n   * Determines how the return key should look. On Android you can also use\r\n   * `returnKeyLabel`.\r\n   *\r\n   * *Cross platform*\r\n   *\r\n   * The following values work across platforms:\r\n   *\r\n   * - `done`\r\n   * - `go`\r\n   * - `next`\r\n   * - `search`\r\n   * - `send`\r\n   *\r\n   * *Android Only*\r\n   *\r\n   * The following values work on Android only:\r\n   *\r\n   * - `none`\r\n   * - `previous`\r\n   */\r\n  returnKeyType?: WithDefault<ReturnKeyType, 'done'>,\r\n\r\n  /**\r\n   * Limits the maximum number of characters that can be entered. Use this\r\n   * instead of implementing the logic in JS to avoid flicker.\r\n   */\r\n  maxLength?: ?Int32,\r\n\r\n  /**\r\n   * If `true`, the text input can be multiple lines.\r\n   * The default value is `false`.\r\n   */\r\n  multiline?: ?boolean,\r\n\r\n  /**\r\n   * Callback that is called when the text input is blurred.\r\n   * `target` is the reactTag of the element\r\n   */\r\n  onBlur?: ?BubblingEventHandler<$ReadOnly<{|target: Int32|}>>,\r\n\r\n  /**\r\n   * Callback that is called when the text input is focused.\r\n   * `target` is the reactTag of the element\r\n   */\r\n  onFocus?: ?BubblingEventHandler<$ReadOnly<{|target: Int32|}>>,\r\n\r\n  /**\r\n   * Callback that is called when the text input's text changes.\r\n   * `target` is the reactTag of the element\r\n   * TODO: differentiate between onChange and onChangeText\r\n   */\r\n  onChange?: ?BubblingEventHandler<\r\n    $ReadOnly<{|target: Int32, eventCount: Int32, text: string|}>,\r\n  >,\r\n\r\n  /**\r\n   * Callback that is called when the text input's text changes.\r\n   * Changed text is passed as an argument to the callback handler.\r\n   * TODO: differentiate between onChange and onChangeText\r\n   */\r\n  onChangeText?: ?BubblingEventHandler<\r\n    $ReadOnly<{|target: Int32, eventCount: Int32, text: string|}>,\r\n  >,\r\n\r\n  /**\r\n   * Callback that is called when the text input's content size changes.\r\n   * This will be called with\r\n   * `{ nativeEvent: { contentSize: { width, height } } }`.\r\n   *\r\n   * Only called for multiline text inputs.\r\n   */\r\n  onContentSizeChange?: ?DirectEventHandler<\r\n    $ReadOnly<{|\r\n      target: Int32,\r\n      contentSize: $ReadOnly<{|width: Double, height: Double|}>,\r\n    |}>,\r\n  >,\r\n\r\n  onTextInput?: ?BubblingEventHandler<\r\n    $ReadOnly<{|\r\n      target: Int32,\r\n      text: string,\r\n      previousText: string,\r\n      range: $ReadOnly<{|start: Double, end: Double|}>,\r\n    |}>,\r\n  >,\r\n\r\n  /**\r\n   * Callback that is called when text input ends.\r\n   */\r\n  onEndEditing?: ?BubblingEventHandler<\r\n    $ReadOnly<{|target: Int32, text: string|}>,\r\n  >,\r\n\r\n  /**\r\n   * Callback that is called when the text input selection is changed.\r\n   * This will be called with\r\n   * `{ nativeEvent: { selection: { start, end } } }`.\r\n   */\r\n  onSelectionChange?: ?DirectEventHandler<\r\n    $ReadOnly<{|\r\n      target: Int32,\r\n      selection: $ReadOnly<{|start: Double, end: Double|}>,\r\n    |}>,\r\n  >,\r\n\r\n  /**\r\n   * Callback that is called when the text input's submit button is pressed.\r\n   * Invalid if `multiline={true}` is specified.\r\n   */\r\n  onSubmitEditing?: ?BubblingEventHandler<\r\n    $ReadOnly<{|target: Int32, text: string|}>,\r\n  >,\r\n\r\n  /**\r\n   * Callback that is called when a key is pressed.\r\n   * This will be called with `{ nativeEvent: { key: keyValue } }`\r\n   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\r\n   * the typed-in character otherwise including `' '` for space.\r\n   * Fires before `onChange` callbacks.\r\n   */\r\n  onKeyPress?: ?BubblingEventHandler<$ReadOnly<{|target: Int32, key: string|}>>,\r\n\r\n  /**\r\n   * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\r\n   * May also contain other properties from ScrollEvent but on Android contentSize\r\n   * is not provided for performance reasons.\r\n   */\r\n  onScroll?: ?DirectEventHandler<\r\n    $ReadOnly<{|\r\n      target: Int32,\r\n      responderIgnoreScroll: boolean,\r\n      contentInset: $ReadOnly<{|\r\n        top: Double, // always 0 on Android\r\n        bottom: Double, // always 0 on Android\r\n        left: Double, // always 0 on Android\r\n        right: Double, // always 0 on Android\r\n      |}>,\r\n      contentOffset: $ReadOnly<{|\r\n        x: Double,\r\n        y: Double,\r\n      |}>,\r\n      contentSize: $ReadOnly<{|\r\n        width: Double, // always 0 on Android\r\n        height: Double, // always 0 on Android\r\n      |}>,\r\n      layoutMeasurement: $ReadOnly<{|\r\n        width: Double,\r\n        height: Double,\r\n      |}>,\r\n      velocity: $ReadOnly<{|\r\n        x: Double, // always 0 on Android\r\n        y: Double, // always 0 on Android\r\n      |}>,\r\n    |}>,\r\n  >,\r\n\r\n  /**\r\n   * The string that will be rendered before text input has been entered.\r\n   */\r\n  placeholder?: ?string,\r\n\r\n  /**\r\n   * The text color of the placeholder string.\r\n   */\r\n  placeholderTextColor?: ?ColorValue,\r\n\r\n  /**\r\n   * If `true`, the text input obscures the text entered so that sensitive text\r\n   * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\r\n   */\r\n  secureTextEntry?: ?boolean,\r\n\r\n  /**\r\n   * The highlight and cursor color of the text input.\r\n   */\r\n  selectionColor?: ?ColorValue,\r\n\r\n  /**\r\n   * The start and end of the text input's selection. Set start and end to\r\n   * the same value to position the cursor.\r\n   */\r\n  selection?: ?$ReadOnly<{|\r\n    start: Int32,\r\n    end?: ?Int32,\r\n  |}>,\r\n\r\n  /**\r\n   * The value to show for the text input. `TextInput` is a controlled\r\n   * component, which means the native value will be forced to match this\r\n   * value prop if provided. For most uses, this works great, but in some\r\n   * cases this may cause flickering - one common cause is preventing edits\r\n   * by keeping value the same. In addition to simply setting the same value,\r\n   * either set `editable={false}`, or set/update `maxLength` to prevent\r\n   * unwanted edits without flicker.\r\n   */\r\n  value?: ?string,\r\n\r\n  /**\r\n   * Provides an initial value that will change when the user starts typing.\r\n   * Useful for simple use-cases where you do not want to deal with listening\r\n   * to events and updating the value prop to keep the controlled state in sync.\r\n   */\r\n  defaultValue?: ?string,\r\n\r\n  /**\r\n   * If `true`, all text will automatically be selected on focus.\r\n   */\r\n  selectTextOnFocus?: ?boolean,\r\n\r\n  /**\r\n   * If `true`, the text field will blur when submitted.\r\n   * The default value is true for single-line fields and false for\r\n   * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\r\n   * to `true` means that pressing return will blur the field and trigger the\r\n   * `onSubmitEditing` event instead of inserting a newline into the field.\r\n   */\r\n  blurOnSubmit?: ?boolean,\r\n\r\n  /**\r\n   * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\r\n   *\r\n   * - `borderLeftWidth`\r\n   * - `borderTopWidth`\r\n   * - `borderRightWidth`\r\n   * - `borderBottomWidth`\r\n   * - `borderTopLeftRadius`\r\n   * - `borderTopRightRadius`\r\n   * - `borderBottomRightRadius`\r\n   * - `borderBottomLeftRadius`\r\n   *\r\n   * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\r\n   * for more detail.\r\n   *\r\n   * [Styles](docs/style.html)\r\n   */\r\n  // TODO: figure out what to do with this style prop for codegen/Fabric purposes\r\n  // This must be commented for Fabric codegen to work; it's currently not possible\r\n  // to override the default View style prop in codegen.\r\n  style?: ?TextStyleProp,\r\n\r\n  /**\r\n   * If `true`, caret is hidden. The default value is `false`.\r\n   * This property is supported only for single-line TextInput component on iOS.\r\n   */\r\n  caretHidden?: ?boolean,\r\n\r\n  /*\r\n   * If `true`, contextMenuHidden is hidden. The default value is `false`.\r\n   */\r\n  contextMenuHidden?: ?boolean,\r\n\r\n  /**\r\n   * The following are props that `BaseTextShadowNode` takes. It is unclear if they\r\n   * are used by TextInput.\r\n   */\r\n  textShadowColor?: ?ColorValue,\r\n  textShadowRadius?: ?Float,\r\n  textDecorationLine?: ?string,\r\n  fontStyle?: ?string,\r\n  textShadowOffset?: ?$ReadOnly<{|width?: ?Double, height?: ?Double|}>,\r\n  lineHeight?: ?Float,\r\n  textTransform?: ?string,\r\n  color?: ?Int32,\r\n  letterSpacing?: ?Float,\r\n  fontSize?: ?Float,\r\n  textAlign?: ?string,\r\n  includeFontPadding?: ?boolean,\r\n  fontWeight?: ?string,\r\n  fontFamily?: ?string,\r\n\r\n  /**\r\n   * I cannot find where these are defined but JS complains without them.\r\n   */\r\n  textAlignVertical?: ?string,\r\n  cursorColor?: ?ColorValue,\r\n\r\n  /**\r\n   * \"Private\" fields used by TextInput.js and not users of this component directly\r\n   */\r\n  mostRecentEventCount: Int32,\r\n  text?: ?string,\r\n|}>;\r\n\r\ntype NativeType = HostComponent<NativeProps>;\r\n\r\ntype NativeCommands = TextInputNativeCommands<NativeType>;\r\n\r\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\r\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection'],\r\n});\r\n\r\nlet AndroidTextInputNativeComponent;\r\nif (global.RN$Bridgeless) {\r\n  ReactNativeViewConfigRegistry.register('AndroidTextInput', () => {\r\n    return AndroidTextInputViewConfig;\r\n  });\r\n  AndroidTextInputNativeComponent = 'AndroidTextInput';\r\n} else {\r\n  AndroidTextInputNativeComponent = requireNativeComponent<NativeProps>(\r\n    'AndroidTextInput',\r\n  );\r\n}\r\n\r\n// flowlint-next-line unclear-type:off\r\nexport default ((AndroidTextInputNativeComponent: any): HostComponent<NativeProps>);\r\n"]},"metadata":{},"sourceType":"module"}