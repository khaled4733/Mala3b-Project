{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where, updateDoc, deleteField, arrayUnion, arrayRemove, deleteDoc } from \"firebase/firestore\";\nimport { getUserUId } from \"./Auth\";\nimport { app, db } from \"./Config\";\nvar firestoreDB = getFirestore(app);\n\nfunction addUser(user) {\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(setDoc(doc(firestoreDB, \"users\", user.id), user));\n\n        case 3:\n          console.log(\"Document written with ID: \", user.id);\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"Error adding document: \", _context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction addUsersToDocuments(collectionName, docId, userCollection) {\n  var docRef;\n  return _regeneratorRuntime.async(function addUsersToDocuments$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"inside \" + collectionName);\n          docRef = doc(db, collectionName, docId);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(updateDoc(docRef, {\n            users: userCollection\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUsers() {\n  var usersCol, userSnapshot, userList;\n  return _regeneratorRuntime.async(function getUsers$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          usersCol = collection(firestoreDB, \"users\");\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(usersCol));\n\n        case 3:\n          userSnapshot = _context3.sent;\n          userList = userSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(userList);\n          return _context3.abrupt(\"return\", userList);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUserById(id) {\n  var usersRef, q, querySnapshot;\n  return _regeneratorRuntime.async(function getUserById$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          usersRef = collection(firestoreDB, \"users\");\n          q = query(usersRef, where(\"id\", \"==\", id));\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 4:\n          querySnapshot = _context4.sent;\n          return _context4.abrupt(\"return\", querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction updateFAvailable(tempDoc) {\n  return _regeneratorRuntime.async(function updateFAvailable$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log(tempDoc);\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(setDoc(doc(db, \"football\", tempDoc.id), tempDoc));\n\n        case 4:\n          _context5.next = 9;\n          break;\n\n        case 6:\n          _context5.prev = 6;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction deleteFStadium(docId) {\n  return _regeneratorRuntime.async(function deleteFStadium$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(deleteDoc(doc(db, \"football\", docId)));\n\n        case 3:\n          console.log(\"Document deleted with ID: \", docId);\n          _context6.next = 9;\n          break;\n\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(\"Error deleting document: \", _context6.t0);\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nexport { getUsers, addUser, updateFAvailable, addUsersToDocuments, getUserById, deleteFStadium };","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/New folder (2)/CS303-Project/db/User.js"],"names":["addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","updateDoc","deleteField","arrayUnion","arrayRemove","deleteDoc","getUserUId","app","db","firestoreDB","addUser","user","id","console","log","error","addUsersToDocuments","collectionName","docId","userCollection","docRef","users","getUsers","usersCol","userSnapshot","userList","docs","map","data","getUserById","usersRef","q","querySnapshot","updateFAvailable","tempDoc","deleteFStadium"],"mappings":"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","sourcesContent":["import {\r\n    addDoc,\r\n    collection,\r\n    getDocs,\r\n    getFirestore,\r\n    setDoc,\r\n    doc,\r\n    query,\r\n    where,\r\n    updateDoc,\r\n    deleteField,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    deleteDoc\r\n} from \"firebase/firestore\";\r\nimport { getUserUId } from \"./Auth\";\r\nimport {app, db} from \"./Config\";\r\n\r\nconst firestoreDB = getFirestore(app);\r\n\r\n\r\nasync function addUser(user) {\r\n    try {\r\n        await setDoc(doc(firestoreDB, \"users\", user.id),  user );\r\n        console.log(\"Document written with ID: \", user.id);\r\n      } catch (e) {\r\n        console.error(\"Error adding document: \", e);\r\n      }\r\n}\r\n\r\nasync function addUsersToDocuments(collectionName,docId,userCollection){\r\n    console.log(\"inside \"+collectionName)\r\n    const docRef = doc(db, collectionName, docId);\r\n    await updateDoc(docRef, {\r\n        users:userCollection\r\n    });\r\n}\r\n\r\n\r\nasync function getUsers() {\r\n    const usersCol = collection(firestoreDB, \"users\");\r\n    const userSnapshot = await getDocs(usersCol);\r\n    const userList =  userSnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n    console.log(userList);\r\n    return userList;\r\n}\r\n\r\n async function getUserById(id) {\r\n    const usersRef = collection(firestoreDB, \"users\");\r\n    const q = query(usersRef, where(\"id\", \"==\", id));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n}\r\n\r\n//                    F-> for \"football\"\r\n async function updateFAvailable(tempDoc) {\r\n     try {\r\n         console.log(tempDoc);\r\n         await setDoc(doc(db, \"football\", tempDoc.id), tempDoc); //if document with \"tempDoc.id\" not found add it, else update it\r\n     } catch (e) {\r\n         console.error(e);\r\n     }\r\n\r\n}\r\n\r\nasync function deleteFStadium(docId) {\r\n    try {\r\n        await deleteDoc(doc(db, \"football\", docId));\r\n        console.log(\"Document deleted with ID: \", docId);\r\n    } catch (error) {\r\n        console.error(\"Error deleting document: \", error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// function subscribe(callback) {\r\n//     const unsubscribe = onSnapshot(\r\n//         query(collection(db, \"Chats\")),\r\n//         (snapshot) => {\r\n//             const source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n//             snapshot.docChanges().forEach((change) => {\r\n//                 if (callback) callback({ change, snapshot });\r\n//             });\r\n//         }\r\n//     );\r\n//     return unsubscribe;\r\n// }\r\n\r\nexport {getUsers, addUser,updateFAvailable,addUsersToDocuments , getUserById , deleteFStadium};"]},"metadata":{},"sourceType":"module"}