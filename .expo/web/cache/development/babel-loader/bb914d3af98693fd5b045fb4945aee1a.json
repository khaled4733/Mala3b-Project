{"ast":null,"code":"'use strict';\n\nvar invariant = require('invariant');\n\nvar customBubblingEventTypes = {};\nvar customDirectEventTypes = {};\nexports.customBubblingEventTypes = customBubblingEventTypes;\nexports.customDirectEventTypes = customDirectEventTypes;\nvar viewConfigCallbacks = new Map();\nvar viewConfigs = new Map();\n\nfunction processEventTypes(viewConfig) {\n  var bubblingEventTypes = viewConfig.bubblingEventTypes,\n      directEventTypes = viewConfig.directEventTypes;\n\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (var topLevelType in directEventTypes) {\n        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);\n      }\n    }\n  }\n\n  if (bubblingEventTypes != null) {\n    for (var _topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[_topLevelType] == null) {\n        customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];\n      }\n    }\n  }\n\n  if (directEventTypes != null) {\n    for (var _topLevelType2 in directEventTypes) {\n      if (customDirectEventTypes[_topLevelType2] == null) {\n        customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];\n      }\n    }\n  }\n}\n\nexports.register = function (name, callback) {\n  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);\n  invariant(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);\n  viewConfigCallbacks.set(name, callback);\n  return name;\n};\n\nexports.get = function (name) {\n  var viewConfig;\n\n  if (!viewConfigs.has(name)) {\n    var callback = viewConfigCallbacks.get(name);\n\n    if (typeof callback !== 'function') {\n      invariant(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');\n    }\n\n    viewConfig = callback();\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n    viewConfigCallbacks.set(name, null);\n  } else {\n    viewConfig = viewConfigs.get(name);\n  }\n\n  invariant(viewConfig, 'View config not found for name %s', name);\n  return viewConfig;\n};","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js"],"names":["invariant","require","customBubblingEventTypes","customDirectEventTypes","exports","viewConfigCallbacks","Map","viewConfigs","processEventTypes","viewConfig","bubblingEventTypes","directEventTypes","__DEV__","topLevelType","register","name","callback","has","set","get","test"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n/* eslint-disable react-internal/invariant-args */\r\n\r\n'use strict';\r\n\r\nimport type {\r\n  ReactNativeBaseComponentViewConfig,\r\n  ViewConfigGetter,\r\n} from './ReactNativeTypes';\r\n\r\nconst invariant = require('invariant');\r\n\r\n// Event configs\r\nconst customBubblingEventTypes: {\r\n  [eventName: string]: $ReadOnly<{|\r\n    phasedRegistrationNames: $ReadOnly<{|\r\n      captured: string,\r\n      bubbled: string,\r\n    |}>,\r\n  |}>,\r\n  ...,\r\n} = {};\r\nconst customDirectEventTypes: {\r\n  [eventName: string]: $ReadOnly<{|\r\n    registrationName: string,\r\n  |}>,\r\n  ...,\r\n} = {};\r\n\r\nexports.customBubblingEventTypes = customBubblingEventTypes;\r\nexports.customDirectEventTypes = customDirectEventTypes;\r\n\r\nconst viewConfigCallbacks = new Map();\r\nconst viewConfigs = new Map();\r\n\r\nfunction processEventTypes(\r\n  viewConfig: ReactNativeBaseComponentViewConfig<>,\r\n): void {\r\n  const {bubblingEventTypes, directEventTypes} = viewConfig;\r\n\r\n  if (__DEV__) {\r\n    if (bubblingEventTypes != null && directEventTypes != null) {\r\n      for (const topLevelType in directEventTypes) {\r\n        invariant(\r\n          bubblingEventTypes[topLevelType] == null,\r\n          'Event cannot be both direct and bubbling: %s',\r\n          topLevelType,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (bubblingEventTypes != null) {\r\n    for (const topLevelType in bubblingEventTypes) {\r\n      if (customBubblingEventTypes[topLevelType] == null) {\r\n        customBubblingEventTypes[topLevelType] =\r\n          bubblingEventTypes[topLevelType];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (directEventTypes != null) {\r\n    for (const topLevelType in directEventTypes) {\r\n      if (customDirectEventTypes[topLevelType] == null) {\r\n        customDirectEventTypes[topLevelType] = directEventTypes[topLevelType];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a native view/component by name.\r\n * A callback is provided to load the view config from UIManager.\r\n * The callback is deferred until the view is actually rendered.\r\n */\r\nexports.register = function(name: string, callback: ViewConfigGetter): string {\r\n  invariant(\r\n    !viewConfigCallbacks.has(name),\r\n    'Tried to register two views with the same name %s',\r\n    name,\r\n  );\r\n  invariant(\r\n    typeof callback === 'function',\r\n    'View config getter callback for component `%s` must be a function (received `%s`)',\r\n    name,\r\n    callback === null ? 'null' : typeof callback,\r\n  );\r\n  viewConfigCallbacks.set(name, callback);\r\n  return name;\r\n};\r\n\r\n/**\r\n * Retrieves a config for the specified view.\r\n * If this is the first time the view has been used,\r\n * This configuration will be lazy-loaded from UIManager.\r\n */\r\nexports.get = function(name: string): ReactNativeBaseComponentViewConfig<> {\r\n  let viewConfig;\r\n  if (!viewConfigs.has(name)) {\r\n    const callback = viewConfigCallbacks.get(name);\r\n    if (typeof callback !== 'function') {\r\n      invariant(\r\n        false,\r\n        'View config getter callback for component `%s` must be a function (received `%s`).%s',\r\n        name,\r\n        callback === null ? 'null' : typeof callback,\r\n        typeof name[0] === 'string' && /[a-z]/.test(name[0])\r\n          ? ' Make sure to start component names with a capital letter.'\r\n          : '',\r\n      );\r\n    }\r\n    viewConfig = callback();\r\n    processEventTypes(viewConfig);\r\n    viewConfigs.set(name, viewConfig);\r\n\r\n    // Clear the callback after the config is set so that\r\n    // we don't mask any errors during registration.\r\n    viewConfigCallbacks.set(name, null);\r\n  } else {\r\n    viewConfig = viewConfigs.get(name);\r\n  }\r\n  invariant(viewConfig, 'View config not found for name %s', name);\r\n  return viewConfig;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}