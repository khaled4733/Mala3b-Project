{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nvar _require = require(\"../../Renderer/shims/ReactNative\"),\n    findNodeHandle = _require.findNodeHandle;\n\nimport { Commands as AndroidTextInputCommands } from \"../../Components/TextInput/AndroidTextInputNativeComponent\";\nimport { Commands as iOSTextInputCommands } from \"../../Components/TextInput/RCTSingelineTextInputNativeComponent\";\nvar currentlyFocusedInputRef = null;\nvar inputs = new Set();\n\nfunction currentlyFocusedInput() {\n  return currentlyFocusedInputRef;\n}\n\nfunction currentlyFocusedField() {\n  if (__DEV__) {\n    console.error('currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput');\n  }\n\n  return findNodeHandle(currentlyFocusedInputRef);\n}\n\nfunction focusInput(textField) {\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    currentlyFocusedInputRef = textField;\n  }\n}\n\nfunction blurInput(textField) {\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    currentlyFocusedInputRef = null;\n  }\n}\n\nfunction focusField(textFieldID) {\n  if (__DEV__) {\n    console.error('focusField no longer works. Use focusInput');\n  }\n\n  return;\n}\n\nfunction blurField(textFieldID) {\n  if (__DEV__) {\n    console.error('blurField no longer works. Use blurInput');\n  }\n\n  return;\n}\n\nfunction focusTextInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    focusInput(textField);\n\n    if (Platform.OS === 'ios') {\n      iOSTextInputCommands.focus(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.focus(textField);\n    }\n  }\n}\n\nfunction blurTextInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    blurInput(textField);\n\n    if (Platform.OS === 'ios') {\n      iOSTextInputCommands.blur(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.blur(textField);\n    }\n  }\n}\n\nfunction registerInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('registerInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  inputs.add(textField);\n}\n\nfunction unregisterInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('unregisterInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  inputs.delete(textField);\n}\n\nfunction isTextInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('isTextInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return false;\n  }\n\n  return inputs.has(textField);\n}\n\nmodule.exports = {\n  currentlyFocusedInput: currentlyFocusedInput,\n  focusInput: focusInput,\n  blurInput: blurInput,\n  currentlyFocusedField: currentlyFocusedField,\n  focusField: focusField,\n  blurField: blurField,\n  focusTextInput: focusTextInput,\n  blurTextInput: blurTextInput,\n  registerInput: registerInput,\n  unregisterInput: unregisterInput,\n  isTextInput: isTextInput\n};","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js"],"names":["React","require","Platform","findNodeHandle","Commands","AndroidTextInputCommands","iOSTextInputCommands","currentlyFocusedInputRef","inputs","Set","currentlyFocusedInput","currentlyFocusedField","__DEV__","console","error","focusInput","textField","blurInput","focusField","textFieldID","blurField","focusTextInput","OS","focus","blurTextInput","blur","registerInput","add","unregisterInput","delete","isTextInput","has","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n// This class is responsible for coordinating the \"focused\" state for\r\n// TextInputs. All calls relating to the keyboard should be funneled\r\n// through here.\r\n\r\n'use strict';\r\n\r\nconst React = require('react');\r\nconst Platform = require('../../Utilities/Platform');\r\nconst {findNodeHandle} = require('../../Renderer/shims/ReactNative');\r\nimport {Commands as AndroidTextInputCommands} from '../../Components/TextInput/AndroidTextInputNativeComponent';\r\nimport {Commands as iOSTextInputCommands} from '../../Components/TextInput/RCTSingelineTextInputNativeComponent';\r\n\r\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\r\ntype ComponentRef = React.ElementRef<HostComponent<mixed>>;\r\n\r\nlet currentlyFocusedInputRef: ?ComponentRef = null;\r\nconst inputs = new Set();\r\n\r\nfunction currentlyFocusedInput(): ?ComponentRef {\r\n  return currentlyFocusedInputRef;\r\n}\r\n\r\n/**\r\n * Returns the ID of the currently focused text field, if one exists\r\n * If no text field is focused it returns null\r\n */\r\nfunction currentlyFocusedField(): ?number {\r\n  if (__DEV__) {\r\n    console.error(\r\n      'currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput',\r\n    );\r\n  }\r\n\r\n  return findNodeHandle(currentlyFocusedInputRef);\r\n}\r\n\r\nfunction focusInput(textField: ?ComponentRef): void {\r\n  if (currentlyFocusedInputRef !== textField && textField != null) {\r\n    currentlyFocusedInputRef = textField;\r\n  }\r\n}\r\n\r\nfunction blurInput(textField: ?ComponentRef): void {\r\n  if (currentlyFocusedInputRef === textField && textField != null) {\r\n    currentlyFocusedInputRef = null;\r\n  }\r\n}\r\n\r\nfunction focusField(textFieldID: ?number): void {\r\n  if (__DEV__) {\r\n    console.error('focusField no longer works. Use focusInput');\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nfunction blurField(textFieldID: ?number) {\r\n  if (__DEV__) {\r\n    console.error('blurField no longer works. Use blurInput');\r\n  }\r\n\r\n  return;\r\n}\r\n\r\n/**\r\n * @param {number} TextInputID id of the text field to focus\r\n * Focuses the specified text field\r\n * noop if the text field was already focused\r\n */\r\nfunction focusTextInput(textField: ?ComponentRef) {\r\n  if (typeof textField === 'number') {\r\n    if (__DEV__) {\r\n      console.error(\r\n        'focusTextInput must be called with a host component. Passing a react tag is deprecated.',\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  if (currentlyFocusedInputRef !== textField && textField != null) {\r\n    focusInput(textField);\r\n    if (Platform.OS === 'ios') {\r\n      // This isn't necessarily a single line text input\r\n      // But commands don't actually care as long as the thing being passed in\r\n      // actually has a command with that name. So this should work with single\r\n      // and multiline text inputs. Ideally we'll merge them into one component\r\n      // in the future.\r\n      iOSTextInputCommands.focus(textField);\r\n    } else if (Platform.OS === 'android') {\r\n      AndroidTextInputCommands.focus(textField);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} textFieldID id of the text field to unfocus\r\n * Unfocuses the specified text field\r\n * noop if it wasn't focused\r\n */\r\nfunction blurTextInput(textField: ?ComponentRef) {\r\n  if (typeof textField === 'number') {\r\n    if (__DEV__) {\r\n      console.error(\r\n        'focusTextInput must be called with a host component. Passing a react tag is deprecated.',\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  if (currentlyFocusedInputRef === textField && textField != null) {\r\n    blurInput(textField);\r\n    if (Platform.OS === 'ios') {\r\n      // This isn't necessarily a single line text input\r\n      // But commands don't actually care as long as the thing being passed in\r\n      // actually has a command with that name. So this should work with single\r\n      // and multiline text inputs. Ideally we'll merge them into one component\r\n      // in the future.\r\n      iOSTextInputCommands.blur(textField);\r\n    } else if (Platform.OS === 'android') {\r\n      AndroidTextInputCommands.blur(textField);\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerInput(textField: ComponentRef) {\r\n  if (typeof textField === 'number') {\r\n    if (__DEV__) {\r\n      console.error(\r\n        'registerInput must be called with a host component. Passing a react tag is deprecated.',\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  inputs.add(textField);\r\n}\r\n\r\nfunction unregisterInput(textField: ComponentRef) {\r\n  if (typeof textField === 'number') {\r\n    if (__DEV__) {\r\n      console.error(\r\n        'unregisterInput must be called with a host component. Passing a react tag is deprecated.',\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n  inputs.delete(textField);\r\n}\r\n\r\nfunction isTextInput(textField: ComponentRef): boolean {\r\n  if (typeof textField === 'number') {\r\n    if (__DEV__) {\r\n      console.error(\r\n        'isTextInput must be called with a host component. Passing a react tag is deprecated.',\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  return inputs.has(textField);\r\n}\r\n\r\nmodule.exports = {\r\n  currentlyFocusedInput,\r\n  focusInput,\r\n  blurInput,\r\n\r\n  currentlyFocusedField,\r\n  focusField,\r\n  blurField,\r\n  focusTextInput,\r\n  blurTextInput,\r\n  registerInput,\r\n  unregisterInput,\r\n  isTextInput,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}