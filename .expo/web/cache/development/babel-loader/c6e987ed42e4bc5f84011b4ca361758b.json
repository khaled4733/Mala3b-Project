{"ast":null,"code":"'use strict';\n\nvar RE_FRAME = /^ {4}at (.+?)(?: \\((native)\\)?| \\((address at )?(.+?):(\\d+):(\\d+)\\))$/;\nvar RE_SKIPPED = /^ {4}... skipping (\\d+) frames$/;\n\nfunction parseLine(line) {\n  var asFrame = line.match(RE_FRAME);\n\n  if (asFrame) {\n    return {\n      type: 'FRAME',\n      functionName: asFrame[1],\n      location: asFrame[2] === 'native' ? {\n        type: 'NATIVE'\n      } : asFrame[3] === 'address at ' ? {\n        type: 'BYTECODE',\n        sourceUrl: asFrame[4],\n        line1Based: Number.parseInt(asFrame[5], 10),\n        virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n      } : {\n        type: 'SOURCE',\n        sourceUrl: asFrame[4],\n        line1Based: Number.parseInt(asFrame[5], 10),\n        column1Based: Number.parseInt(asFrame[6], 10)\n      }\n    };\n  }\n\n  var asSkipped = line.match(RE_SKIPPED);\n\n  if (asSkipped) {\n    return {\n      type: 'SKIPPED',\n      count: Number.parseInt(asSkipped[1], 10)\n    };\n  }\n}\n\nmodule.exports = function parseHermesStack(stack) {\n  var lines = stack.split(/\\n/);\n  var entries = [];\n  var lastMessageLine = -1;\n\n  for (var i = 0; i < lines.length; ++i) {\n    var line = lines[i];\n\n    if (!line) {\n      continue;\n    }\n\n    var entry = parseLine(line);\n\n    if (entry) {\n      entries.push(entry);\n      continue;\n    }\n\n    lastMessageLine = i;\n    entries = [];\n  }\n\n  var message = lines.slice(0, lastMessageLine + 1).join('\\n');\n  return {\n    message: message,\n    entries: entries\n  };\n};","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Core/Devtools/parseHermesStack.js"],"names":["RE_FRAME","RE_SKIPPED","parseLine","line","asFrame","match","type","functionName","location","sourceUrl","line1Based","Number","parseInt","virtualOffset0Based","column1Based","asSkipped","count","module","exports","parseHermesStack","stack","lines","split","entries","lastMessageLine","i","length","entry","push","message","slice","join"],"mappings":"AAUA;;AAkDA,IAAMA,QAAQ,GAAG,uEAAjB;AAIA,IAAMC,UAAU,GAAG,iCAAnB;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAoD;AAClD,MAAMC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAWL,QAAX,CAAhB;;AACA,MAAII,OAAJ,EAAa;AACX,WAAO;AACLE,MAAAA,IAAI,EAAE,OADD;AAELC,MAAAA,YAAY,EAAEH,OAAO,CAAC,CAAD,CAFhB;AAGLI,MAAAA,QAAQ,EACNJ,OAAO,CAAC,CAAD,CAAP,KAAe,QAAf,GACI;AAACE,QAAAA,IAAI,EAAE;AAAP,OADJ,GAEIF,OAAO,CAAC,CAAD,CAAP,KAAe,aAAf,GACA;AACEE,QAAAA,IAAI,EAAE,UADR;AAEEG,QAAAA,SAAS,EAAEL,OAAO,CAAC,CAAD,CAFpB;AAGEM,QAAAA,UAAU,EAAEC,MAAM,CAACC,QAAP,CAAgBR,OAAO,CAAC,CAAD,CAAvB,EAA4B,EAA5B,CAHd;AAIES,QAAAA,mBAAmB,EAAEF,MAAM,CAACC,QAAP,CAAgBR,OAAO,CAAC,CAAD,CAAvB,EAA4B,EAA5B;AAJvB,OADA,GAOA;AACEE,QAAAA,IAAI,EAAE,QADR;AAEEG,QAAAA,SAAS,EAAEL,OAAO,CAAC,CAAD,CAFpB;AAGEM,QAAAA,UAAU,EAAEC,MAAM,CAACC,QAAP,CAAgBR,OAAO,CAAC,CAAD,CAAvB,EAA4B,EAA5B,CAHd;AAIEU,QAAAA,YAAY,EAAEH,MAAM,CAACC,QAAP,CAAgBR,OAAO,CAAC,CAAD,CAAvB,EAA4B,EAA5B;AAJhB;AAbD,KAAP;AAoBD;;AACD,MAAMW,SAAS,GAAGZ,IAAI,CAACE,KAAL,CAAWJ,UAAX,CAAlB;;AACA,MAAIc,SAAJ,EAAe;AACb,WAAO;AACLT,MAAAA,IAAI,EAAE,SADD;AAELU,MAAAA,KAAK,EAAEL,MAAM,CAACC,QAAP,CAAgBG,SAAS,CAAC,CAAD,CAAzB,EAA8B,EAA9B;AAFF,KAAP;AAID;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,KAA1B,EAA4D;AAC3E,MAAMC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,CAAd;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,eAAe,GAAG,CAAC,CAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrC,QAAMtB,IAAI,GAAGkB,KAAK,CAACI,CAAD,CAAlB;;AACA,QAAI,CAACtB,IAAL,EAAW;AACT;AACD;;AACD,QAAMwB,KAAK,GAAGzB,SAAS,CAACC,IAAD,CAAvB;;AACA,QAAIwB,KAAJ,EAAW;AACTJ,MAAAA,OAAO,CAACK,IAAR,CAAaD,KAAb;AACA;AACD;;AAEDH,IAAAA,eAAe,GAAGC,CAAlB;AACAF,IAAAA,OAAO,GAAG,EAAV;AACD;;AACD,MAAMM,OAAO,GAAGR,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeN,eAAe,GAAG,CAAjC,EAAoCO,IAApC,CAAyC,IAAzC,CAAhB;AACA,SAAO;AAACF,IAAAA,OAAO,EAAPA,OAAD;AAAUN,IAAAA,OAAO,EAAPA;AAAV,GAAP;AACD,CApBD","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\n\r\ntype HermesStackLocationNative = {|\r\n  +type: 'NATIVE',\r\n|};\r\n\r\ntype HermesStackLocationSource = {|\r\n  +type: 'SOURCE',\r\n  +sourceUrl: string,\r\n  +line1Based: number,\r\n  +column1Based: number,\r\n|};\r\n\r\ntype HermesStackLocationBytecode = {|\r\n  +type: 'BYTECODE',\r\n  +sourceUrl: string,\r\n  +line1Based: number,\r\n  +virtualOffset0Based: number,\r\n|};\r\n\r\ntype HermesStackLocation =\r\n  | HermesStackLocationNative\r\n  | HermesStackLocationSource\r\n  | HermesStackLocationBytecode;\r\n\r\ntype HermesStackEntryFrame = {|\r\n  +type: 'FRAME',\r\n  +location: HermesStackLocation,\r\n  +functionName: string,\r\n|};\r\n\r\ntype HermesStackEntrySkipped = {|\r\n  +type: 'SKIPPED',\r\n  +count: number,\r\n|};\r\n\r\ntype HermesStackEntry = HermesStackEntryFrame | HermesStackEntrySkipped;\r\n\r\nexport type HermesParsedStack = {|\r\n  +message: string,\r\n  +entries: $ReadOnlyArray<HermesStackEntry>,\r\n|};\r\n\r\n// Capturing groups:\r\n// 1. function name\r\n// 2. is this a native stack frame?\r\n// 3. is this a bytecode address or a source location?\r\n// 4. source URL (filename)\r\n// 5. line number (1 based)\r\n// 6. column number (1 based) or virtual offset (0 based)\r\nconst RE_FRAME = /^ {4}at (.+?)(?: \\((native)\\)?| \\((address at )?(.+?):(\\d+):(\\d+)\\))$/;\r\n\r\n// Capturing groups:\r\n// 1. count of skipped frames\r\nconst RE_SKIPPED = /^ {4}... skipping (\\d+) frames$/;\r\n\r\nfunction parseLine(line: string): ?HermesStackEntry {\r\n  const asFrame = line.match(RE_FRAME);\r\n  if (asFrame) {\r\n    return {\r\n      type: 'FRAME',\r\n      functionName: asFrame[1],\r\n      location:\r\n        asFrame[2] === 'native'\r\n          ? {type: 'NATIVE'}\r\n          : asFrame[3] === 'address at '\r\n          ? {\r\n              type: 'BYTECODE',\r\n              sourceUrl: asFrame[4],\r\n              line1Based: Number.parseInt(asFrame[5], 10),\r\n              virtualOffset0Based: Number.parseInt(asFrame[6], 10),\r\n            }\r\n          : {\r\n              type: 'SOURCE',\r\n              sourceUrl: asFrame[4],\r\n              line1Based: Number.parseInt(asFrame[5], 10),\r\n              column1Based: Number.parseInt(asFrame[6], 10),\r\n            },\r\n    };\r\n  }\r\n  const asSkipped = line.match(RE_SKIPPED);\r\n  if (asSkipped) {\r\n    return {\r\n      type: 'SKIPPED',\r\n      count: Number.parseInt(asSkipped[1], 10),\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = function parseHermesStack(stack: string): HermesParsedStack {\r\n  const lines = stack.split(/\\n/);\r\n  let entries = [];\r\n  let lastMessageLine = -1;\r\n  for (let i = 0; i < lines.length; ++i) {\r\n    const line = lines[i];\r\n    if (!line) {\r\n      continue;\r\n    }\r\n    const entry = parseLine(line);\r\n    if (entry) {\r\n      entries.push(entry);\r\n      continue;\r\n    }\r\n    // No match - we're still in the message\r\n    lastMessageLine = i;\r\n    entries = [];\r\n  }\r\n  const message = lines.slice(0, lastMessageLine + 1).join('\\n');\r\n  return {message, entries};\r\n};\r\n"]},"metadata":{},"sourceType":"script"}