{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar ReactNativeStyleAttributes = require(\"../Components/View/ReactNativeStyleAttributes\");\n\nvar UIManager = require(\"./UIManager\");\n\nvar insetsDiffer = require(\"../Utilities/differ/insetsDiffer\");\n\nvar invariant = require('invariant');\n\nvar matricesDiffer = require(\"../Utilities/differ/matricesDiffer\");\n\nvar pointsDiffer = require(\"../Utilities/differ/pointsDiffer\");\n\nvar processColor = require(\"../StyleSheet/processColor\");\n\nvar processColorArray = require(\"../StyleSheet/processColorArray\");\n\nvar resolveAssetSource = require(\"../Image/resolveAssetSource\");\n\nvar sizesDiffer = require(\"../Utilities/differ/sizesDiffer\");\n\nfunction getNativeComponentAttributes(uiViewClassName) {\n  var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);\n  invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: \"%s\" was not found in the UIManager.', uiViewClassName);\n  var baseModuleName = viewConfig.baseModuleName,\n      bubblingEventTypes = viewConfig.bubblingEventTypes,\n      directEventTypes = viewConfig.directEventTypes;\n  var nativeProps = viewConfig.NativeProps;\n\n  while (baseModuleName) {\n    var baseModule = UIManager.getViewManagerConfig(baseModuleName);\n\n    if (!baseModule) {\n      baseModuleName = null;\n    } else {\n      bubblingEventTypes = _objectSpread(_objectSpread({}, baseModule.bubblingEventTypes), bubblingEventTypes);\n      directEventTypes = _objectSpread(_objectSpread({}, baseModule.directEventTypes), directEventTypes);\n      nativeProps = _objectSpread(_objectSpread({}, baseModule.NativeProps), nativeProps);\n      baseModuleName = baseModule.baseModuleName;\n    }\n  }\n\n  var validAttributes = {};\n\n  for (var key in nativeProps) {\n    var typeName = nativeProps[key];\n    var diff = getDifferForType(typeName);\n    var process = getProcessorForType(typeName);\n    validAttributes[key] = diff == null && process == null ? true : {\n      diff: diff,\n      process: process\n    };\n  }\n\n  validAttributes.style = ReactNativeStyleAttributes;\n\n  _extends(viewConfig, {\n    uiViewClassName: uiViewClassName,\n    validAttributes: validAttributes,\n    bubblingEventTypes: bubblingEventTypes,\n    directEventTypes: directEventTypes\n  });\n\n  if (!hasAttachedDefaultEventTypes) {\n    attachDefaultEventTypes(viewConfig);\n    hasAttachedDefaultEventTypes = true;\n  }\n\n  return viewConfig;\n}\n\nvar hasAttachedDefaultEventTypes = false;\n\nfunction attachDefaultEventTypes(viewConfig) {\n  var constants = UIManager.getConstants();\n\n  if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {\n    viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());\n  } else {\n    viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);\n    viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);\n  }\n}\n\nfunction merge(destination, source) {\n  if (!source) {\n    return destination;\n  }\n\n  if (!destination) {\n    return source;\n  }\n\n  for (var key in source) {\n    if (!source.hasOwnProperty(key)) {\n      continue;\n    }\n\n    var sourceValue = source[key];\n\n    if (destination.hasOwnProperty(key)) {\n      var destinationValue = destination[key];\n\n      if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {\n        sourceValue = merge(destinationValue, sourceValue);\n      }\n    }\n\n    destination[key] = sourceValue;\n  }\n\n  return destination;\n}\n\nfunction getDifferForType(typeName) {\n  switch (typeName) {\n    case 'CATransform3D':\n      return matricesDiffer;\n\n    case 'CGPoint':\n      return pointsDiffer;\n\n    case 'CGSize':\n      return sizesDiffer;\n\n    case 'UIEdgeInsets':\n      return insetsDiffer;\n  }\n\n  return null;\n}\n\nfunction getProcessorForType(typeName) {\n  switch (typeName) {\n    case 'CGColor':\n    case 'UIColor':\n      return processColor;\n\n    case 'CGColorArray':\n    case 'UIColorArray':\n      return processColorArray;\n\n    case 'CGImage':\n    case 'UIImage':\n    case 'RCTImageSource':\n      return resolveAssetSource;\n\n    case 'Color':\n      return processColor;\n\n    case 'ColorArray':\n      return processColorArray;\n  }\n\n  return null;\n}\n\nmodule.exports = getNativeComponentAttributes;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/ReactNative/getNativeComponentAttributes.js"],"names":["ReactNativeStyleAttributes","require","UIManager","insetsDiffer","invariant","matricesDiffer","pointsDiffer","processColor","processColorArray","resolveAssetSource","sizesDiffer","getNativeComponentAttributes","uiViewClassName","viewConfig","getViewManagerConfig","NativeProps","baseModuleName","bubblingEventTypes","directEventTypes","nativeProps","baseModule","validAttributes","key","typeName","diff","getDifferForType","process","getProcessorForType","style","hasAttachedDefaultEventTypes","attachDefaultEventTypes","constants","getConstants","ViewManagerNames","LazyViewManagersEnabled","merge","getDefaultEventTypes","genericBubblingEventTypes","genericDirectEventTypes","destination","source","hasOwnProperty","sourceValue","destinationValue","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nconst ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes');\r\nconst UIManager = require('./UIManager');\r\n\r\nconst insetsDiffer = require('../Utilities/differ/insetsDiffer');\r\nconst invariant = require('invariant');\r\nconst matricesDiffer = require('../Utilities/differ/matricesDiffer');\r\nconst pointsDiffer = require('../Utilities/differ/pointsDiffer');\r\nconst processColor = require('../StyleSheet/processColor');\r\nconst processColorArray = require('../StyleSheet/processColorArray');\r\nconst resolveAssetSource = require('../Image/resolveAssetSource');\r\nconst sizesDiffer = require('../Utilities/differ/sizesDiffer');\r\n\r\nfunction getNativeComponentAttributes(uiViewClassName: string): any {\r\n  const viewConfig = UIManager.getViewManagerConfig(uiViewClassName);\r\n\r\n  invariant(\r\n    viewConfig != null && viewConfig.NativeProps != null,\r\n    'requireNativeComponent: \"%s\" was not found in the UIManager.',\r\n    uiViewClassName,\r\n  );\r\n\r\n  // TODO: This seems like a whole lot of runtime initialization for every\r\n  // native component that can be either avoided or simplified.\r\n  let {baseModuleName, bubblingEventTypes, directEventTypes} = viewConfig;\r\n  let nativeProps = viewConfig.NativeProps;\r\n  while (baseModuleName) {\r\n    const baseModule = UIManager.getViewManagerConfig(baseModuleName);\r\n    if (!baseModule) {\r\n      baseModuleName = null;\r\n    } else {\r\n      bubblingEventTypes = {\r\n        ...baseModule.bubblingEventTypes,\r\n        ...bubblingEventTypes,\r\n      };\r\n      directEventTypes = {\r\n        ...baseModule.directEventTypes,\r\n        ...directEventTypes,\r\n      };\r\n      nativeProps = {\r\n        ...baseModule.NativeProps,\r\n        ...nativeProps,\r\n      };\r\n      baseModuleName = baseModule.baseModuleName;\r\n    }\r\n  }\r\n\r\n  const validAttributes = {};\r\n\r\n  for (const key in nativeProps) {\r\n    const typeName = nativeProps[key];\r\n    const diff = getDifferForType(typeName);\r\n    const process = getProcessorForType(typeName);\r\n\r\n    validAttributes[key] =\r\n      diff == null && process == null ? true : {diff, process};\r\n  }\r\n\r\n  // Unfortunately, the current setup declares style properties as top-level\r\n  // props. This makes it so we allow style properties in the `style` prop.\r\n  // TODO: Move style properties into a `style` prop and disallow them as\r\n  // top-level props on the native side.\r\n  validAttributes.style = ReactNativeStyleAttributes;\r\n\r\n  Object.assign(viewConfig, {\r\n    uiViewClassName,\r\n    validAttributes,\r\n    bubblingEventTypes,\r\n    directEventTypes,\r\n  });\r\n\r\n  if (!hasAttachedDefaultEventTypes) {\r\n    attachDefaultEventTypes(viewConfig);\r\n    hasAttachedDefaultEventTypes = true;\r\n  }\r\n\r\n  return viewConfig;\r\n}\r\n\r\n// TODO: Figure out how this makes sense. We're using a global boolean to only\r\n// initialize this on the first eagerly initialized native component.\r\nlet hasAttachedDefaultEventTypes = false;\r\nfunction attachDefaultEventTypes(viewConfig: any) {\r\n  // This is supported on UIManager platforms (ex: Android),\r\n  // as lazy view managers are not implemented for all platforms.\r\n  // See [UIManager] for details on constants and implementations.\r\n  const constants = UIManager.getConstants();\r\n  if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {\r\n    // Lazy view managers enabled.\r\n    viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());\r\n  } else {\r\n    viewConfig.bubblingEventTypes = merge(\r\n      viewConfig.bubblingEventTypes,\r\n      constants.genericBubblingEventTypes,\r\n    );\r\n    viewConfig.directEventTypes = merge(\r\n      viewConfig.directEventTypes,\r\n      constants.genericDirectEventTypes,\r\n    );\r\n  }\r\n}\r\n\r\n// TODO: Figure out how to avoid all this runtime initialization cost.\r\nfunction merge(destination: ?Object, source: ?Object): ?Object {\r\n  if (!source) {\r\n    return destination;\r\n  }\r\n  if (!destination) {\r\n    return source;\r\n  }\r\n\r\n  for (const key in source) {\r\n    if (!source.hasOwnProperty(key)) {\r\n      continue;\r\n    }\r\n\r\n    let sourceValue = source[key];\r\n    if (destination.hasOwnProperty(key)) {\r\n      const destinationValue = destination[key];\r\n      if (\r\n        typeof sourceValue === 'object' &&\r\n        typeof destinationValue === 'object'\r\n      ) {\r\n        sourceValue = merge(destinationValue, sourceValue);\r\n      }\r\n    }\r\n    destination[key] = sourceValue;\r\n  }\r\n  return destination;\r\n}\r\n\r\nfunction getDifferForType(\r\n  typeName: string,\r\n): ?(prevProp: any, nextProp: any) => boolean {\r\n  switch (typeName) {\r\n    // iOS Types\r\n    case 'CATransform3D':\r\n      return matricesDiffer;\r\n    case 'CGPoint':\r\n      return pointsDiffer;\r\n    case 'CGSize':\r\n      return sizesDiffer;\r\n    case 'UIEdgeInsets':\r\n      return insetsDiffer;\r\n    // Android Types\r\n    // (not yet implemented)\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction getProcessorForType(typeName: string): ?(nextProp: any) => any {\r\n  switch (typeName) {\r\n    // iOS Types\r\n    case 'CGColor':\r\n    case 'UIColor':\r\n      return processColor;\r\n    case 'CGColorArray':\r\n    case 'UIColorArray':\r\n      return processColorArray;\r\n    case 'CGImage':\r\n    case 'UIImage':\r\n    case 'RCTImageSource':\r\n      return resolveAssetSource;\r\n    // Android Types\r\n    case 'Color':\r\n      return processColor;\r\n    case 'ColorArray':\r\n      return processColorArray;\r\n  }\r\n  return null;\r\n}\r\n\r\nmodule.exports = getNativeComponentAttributes;\r\n"]},"metadata":{},"sourceType":"script"}