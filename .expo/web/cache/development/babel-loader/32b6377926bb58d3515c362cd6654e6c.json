{"ast":null,"code":"'use strict';\n\nvar ExceptionsManager = require(\"./ExceptionsManager\");\n\nExceptionsManager.installConsoleErrorReporter();\n\nif (!global.__fbDisableExceptionsManager) {\n  var handleError = function handleError(e, isFatal) {\n    try {\n      ExceptionsManager.handleException(e, isFatal);\n    } catch (ee) {\n      console.log('Failed to print error: ', ee.message);\n      throw e;\n    }\n  };\n\n  var ErrorUtils = require(\"../vendor/core/ErrorUtils\");\n\n  ErrorUtils.setGlobalHandler(handleError);\n}","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Core/setUpErrorHandling.js"],"names":["ExceptionsManager","require","installConsoleErrorReporter","global","__fbDisableExceptionsManager","handleError","e","isFatal","handleException","ee","console","log","message","ErrorUtils","setGlobalHandler"],"mappings":"AAUA;;AAMA,IAAMA,iBAAiB,GAAGC,OAAO,uBAAjC;;AACAD,iBAAiB,CAACE,2BAAlB;;AAGA,IAAI,CAACC,MAAM,CAACC,4BAAZ,EAA0C;AACxC,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAIC,OAAJ,EAAgB;AAClC,QAAI;AACFP,MAAAA,iBAAiB,CAACQ,eAAlB,CAAkCF,CAAlC,EAAqCC,OAArC;AACD,KAFD,CAEE,OAAOE,EAAP,EAAW;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,EAAE,CAACG,OAA1C;AACA,YAAMN,CAAN;AACD;AACF,GAPD;;AASA,MAAMO,UAAU,GAAGZ,OAAO,6BAA1B;;AACAY,EAAAA,UAAU,CAACC,gBAAX,CAA4BT,WAA5B;AACD","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Sets up the console and exception handling (redbox) for React Native.\r\n * You can use this module directly, or just require InitializeCore.\r\n */\r\nconst ExceptionsManager = require('./ExceptionsManager');\r\nExceptionsManager.installConsoleErrorReporter();\r\n\r\n// Set up error handler\r\nif (!global.__fbDisableExceptionsManager) {\r\n  const handleError = (e, isFatal) => {\r\n    try {\r\n      ExceptionsManager.handleException(e, isFatal);\r\n    } catch (ee) {\r\n      console.log('Failed to print error: ', ee.message);\r\n      throw e;\r\n    }\r\n  };\r\n\r\n  const ErrorUtils = require('../vendor/core/ErrorUtils');\r\n  ErrorUtils.setGlobalHandler(handleError);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}