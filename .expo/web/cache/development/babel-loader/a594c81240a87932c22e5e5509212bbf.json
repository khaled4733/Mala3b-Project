{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where, updateDoc, arrayUnion, arrayRemove, deleteDoc } from \"firebase/firestore\";\nimport { app, db } from \"./Config\";\nvar firestoreDB = getFirestore(app);\n\nfunction addUser(user) {\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(setDoc(doc(firestoreDB, \"users\", user.id), {\n            user: user\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction addUsersToDocuments(collectionName, docId, user) {\n  var docRef;\n  return _regeneratorRuntime.async(function addUsersToDocuments$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"inside \" + collectionName);\n          docRef = doc(db, collectionName, docId);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(updateDoc(docRef, {\n            users: user\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUsers() {\n  var usersCol, userSnapshot, userList;\n  return _regeneratorRuntime.async(function getUsers$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          usersCol = collection(firestoreDB, \"users\");\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(usersCol));\n\n        case 3:\n          userSnapshot = _context3.sent;\n          userList = userSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(userList);\n          return _context3.abrupt(\"return\", userList);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getUserById(id) {\n  var usersRef, q, querySnapshot;\n  return _regeneratorRuntime.async(function getUserById$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          usersRef = collection(firestoreDB, \"users\");\n          q = query(usersRef, where(\"id\", \"==\", id));\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 4:\n          querySnapshot = _context4.sent;\n          return _context4.abrupt(\"return\", querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction updateFAvailable(docId, tempDoc) {\n  var docRef;\n  return _regeneratorRuntime.async(function updateFAvailable$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log(tempDoc.date);\n          docRef = doc(db, \"football\", docId);\n          console.log(\"entered updateFAvailable()\");\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(deleteStadium(tempDoc));\n\n        case 6:\n          _context5.next = 8;\n          return _regeneratorRuntime.awrap(setDoc(docRef, {\n            available: false,\n            date: tempDoc.date,\n            id: tempDoc.id,\n            name: tempDoc.name,\n            pic: tempDoc.pic,\n            price: tempDoc.price\n          }).then(console.log('available updated!')));\n\n        case 8:\n          _context5.next = 13;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\n\nfunction deleteStadium(docId, tempDoc) {\n  var docRef;\n  return _regeneratorRuntime.async(function deleteStadium$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          docRef = doc(db, \"football\", docId);\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(updateDoc(docRef, {}));\n\n        case 4:\n          console.log(\"Document deleted with ID: \", docId);\n          _context6.next = 10;\n          break;\n\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(\"Error deleting document: \", _context6.t0);\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nexport { getUsers, addUser, updateFAvailable, addUsersToDocuments };","map":{"version":3,"sources":["C:/Users/mahmo/OneDrive/Desktop/CS303-Project/CS303-Project/db/User.js"],"names":["addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","updateDoc","arrayUnion","arrayRemove","deleteDoc","app","db","firestoreDB","addUser","user","id","addUsersToDocuments","collectionName","docId","console","log","docRef","users","getUsers","usersCol","userSnapshot","userList","docs","map","data","getUserById","usersRef","q","querySnapshot","updateFAvailable","tempDoc","date","deleteStadium","available","name","pic","price","then","error"],"mappings":"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","sourcesContent":["import {\r\n    addDoc,\r\n    collection,\r\n    getDocs,\r\n    getFirestore,\r\n    setDoc,\r\n    doc,\r\n    query,\r\n    where,\r\n    updateDoc,\r\n    arrayUnion,\r\n    arrayRemove,\r\n    deleteDoc\r\n} from \"firebase/firestore\";\r\nimport {app, db} from \"./Config\";\r\n\r\nconst firestoreDB = getFirestore(app);\r\n\r\n\r\nasync function addUser(user) {\r\n     await setDoc(doc(firestoreDB, \"users\",user.id), { user});\r\n}\r\n\r\nasync function addUsersToDocuments(collectionName,docId,user){\r\n    console.log(\"inside \"+collectionName)\r\n    const docRef = doc(db, collectionName, docId);\r\n    await updateDoc(docRef, {\r\n        users:user\r\n    });\r\n}\r\n\r\n\r\nasync function getUsers() {\r\n    const usersCol = collection(firestoreDB, \"users\");\r\n    const userSnapshot = await getDocs(usersCol);\r\n    const userList =  userSnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n    console.log(userList);\r\n    return userList;\r\n}\r\n\r\n async function getUserById(id) {\r\n    const usersRef = collection(firestoreDB, \"users\");\r\n    const q = query(usersRef, where(\"id\", \"==\", id));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n}\r\n//                    F-> for \"football\"\r\n async function updateFAvailable(docId, tempDoc) {\r\n     try {\r\n         console.log(tempDoc.date);\r\n         const docRef = doc(db, \"football\", docId);\r\n         console.log(\"entered updateFAvailable()\")\r\n         // await deleteDoc(doc(db, \"football\", docId)); //not working\r\n\r\n         /*Delete Doc Herre*/\r\n          await deleteStadium(tempDoc); //not working, delete from db !!!!\r\n\r\n         //add new stadium with \"available: false\"\r\n         await setDoc(docRef, {\r\n             available: false,\r\n             date: tempDoc.date,\r\n             id: tempDoc.id,\r\n             name: tempDoc.name,\r\n             pic: tempDoc.pic,\r\n             price: tempDoc.price\r\n         }).then(console.log('available updated!'))\r\n     } catch (e) {\r\n         console.error(e);\r\n     }\r\n }\r\n\r\n\r\nasync function deleteStadium(docId,tempDoc) {\r\n    try {\r\n        const docRef = doc(db, \"football\", docId);\r\n        await updateDoc(docRef,{\r\n        })\r\n\r\n        console.log(\"Document deleted with ID: \", docId);\r\n    } catch (error) {\r\n        console.error(\"Error deleting document: \", error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// function subscribe(callback) {\r\n//     const unsubscribe = onSnapshot(\r\n//         query(collection(db, \"Chats\")),\r\n//         (snapshot) => {\r\n//             const source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n//             snapshot.docChanges().forEach((change) => {\r\n//                 if (callback) callback({ change, snapshot });\r\n//             });\r\n//         }\r\n//     );\r\n//     return unsubscribe;\r\n// }\r\n\r\nexport {getUsers, addUser,updateFAvailable,addUsersToDocuments};"]},"metadata":{},"sourceType":"module"}