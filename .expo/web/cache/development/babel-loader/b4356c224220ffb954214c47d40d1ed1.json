{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _global$nativeQPLTime;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar Systrace = require(\"../Performance/Systrace\");\n\nvar infoLog = require(\"./infoLog\");\n\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\nexport var getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : global.performance.now.bind(global.performance);\n\nvar PerformanceLogger = function () {\n  function PerformanceLogger() {\n    _classCallCheck(this, PerformanceLogger);\n\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    this._pointExtras = {};\n    this._closed = false;\n  }\n\n  _createClass(PerformanceLogger, [{\n    key: \"addTimespan\",\n    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n        }\n\n        return;\n      }\n\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n\n        return;\n      }\n\n      this._timespans[key] = {\n        startTime: startTime,\n        endTime: endTime,\n        totalTime: endTime - (startTime || 0),\n        startExtras: startExtras,\n        endExtras: endExtras\n      };\n    }\n  }, {\n    key: \"append\",\n    value: function append(performanceLogger) {\n      this._timespans = _objectSpread(_objectSpread({}, performanceLogger.getTimespans()), this._timespans);\n      this._extras = _objectSpread(_objectSpread({}, performanceLogger.getExtras()), this._extras);\n      this._points = _objectSpread(_objectSpread({}, performanceLogger.getPoints()), this._points);\n      this._pointExtras = _objectSpread(_objectSpread({}, performanceLogger.getPointExtras()), this._pointExtras);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    }\n  }, {\n    key: \"clearCompleted\",\n    value: function clearCompleted() {\n      for (var _key in this._timespans) {\n        var _this$_timespans$_key;\n\n        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {\n          delete this._timespans[_key];\n        }\n      }\n\n      this._extras = {};\n      this._points = {};\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n    }\n  }, {\n    key: \"currentTimestamp\",\n    value: function currentTimestamp() {\n      return getCurrentTimestamp();\n    }\n  }, {\n    key: \"getExtras\",\n    value: function getExtras() {\n      return this._extras;\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this._points;\n    }\n  }, {\n    key: \"getPointExtras\",\n    value: function getPointExtras() {\n      return this._pointExtras;\n    }\n  }, {\n    key: \"getTimespans\",\n    value: function getTimespans() {\n      return this._timespans;\n    }\n  }, {\n    key: \"hasTimespan\",\n    value: function hasTimespan(key) {\n      return !!this._timespans[key];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this._closed;\n    }\n  }, {\n    key: \"logEverything\",\n    value: function logEverything() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          var _this$_timespans$_key2;\n\n          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {\n            infoLog(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n\n        infoLog(this._extras);\n\n        for (var _key3 in this._points) {\n          if (this._points[_key3] != null) {\n            infoLog(_key3 + ': ' + this._points[_key3] + 'ms');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"markPoint\",\n    value: function markPoint(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n        }\n\n        return;\n      }\n\n      if (this._points[key] != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n\n        return;\n      }\n\n      this._points[key] = timestamp;\n\n      if (extras) {\n        this._pointExtras[key] = extras;\n      }\n    }\n  }, {\n    key: \"removeExtra\",\n    value: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    }\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, value) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n        }\n\n        return;\n      }\n\n      if (this._extras.hasOwnProperty(key)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n\n        return;\n      }\n\n      this._extras[key] = value;\n    }\n  }, {\n    key: \"startTimespan\",\n    value: function startTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n        }\n\n        return;\n      }\n\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n\n        return;\n      }\n\n      this._timespans[key] = {\n        startTime: timestamp,\n        startExtras: extras\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n    }\n  }, {\n    key: \"stopTimespan\",\n    value: function stopTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n        }\n\n        return;\n      }\n\n      var timespan = this._timespans[key];\n\n      if (!timespan || timespan.startTime == null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n\n        return;\n      }\n\n      if (timespan.endTime != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n\n        return;\n      }\n\n      timespan.endExtras = extras;\n      timespan.endTime = timestamp;\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n    }\n  }]);\n\n  return PerformanceLogger;\n}();\n\nexport default function createPerformanceLogger() {\n  return new PerformanceLogger();\n}","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"names":["Systrace","require","infoLog","_cookies","PRINT_TO_CONSOLE","getCurrentTimestamp","global","nativeQPLTimestamp","performance","now","bind","PerformanceLogger","_timespans","_extras","_points","_pointExtras","_closed","key","startTime","endTime","startExtras","endExtras","__DEV__","totalTime","performanceLogger","getTimespans","getExtras","getPoints","getPointExtras","timestamp","extras","value","hasOwnProperty","currentValue","attemptedValue","beginAsyncEvent","timespan","endAsyncEvent","createPerformanceLogger"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nconst Systrace = require('../Performance/Systrace');\r\n\r\nconst infoLog = require('./infoLog');\r\n\r\nexport type Timespan = {\r\n  startTime: number,\r\n  endTime?: number,\r\n  totalTime?: number,\r\n  startExtras?: Extras,\r\n  endExtras?: Extras,\r\n};\r\n\r\n// Extra values should be serializable primitives\r\nexport type ExtraValue = number | string | boolean;\r\n\r\nexport type Extras = {[key: string]: ExtraValue};\r\n\r\nexport interface IPerformanceLogger {\r\n  addTimespan(\r\n    key: string,\r\n    startTime: number,\r\n    endTime: number,\r\n    startExtras?: Extras,\r\n    endExtras?: Extras,\r\n  ): void;\r\n  append(logger: IPerformanceLogger): void;\r\n  clear(): void;\r\n  clearCompleted(): void;\r\n  close(): void;\r\n  currentTimestamp(): number;\r\n  getExtras(): $ReadOnly<{[key: string]: ?ExtraValue, ...}>;\r\n  getPoints(): $ReadOnly<{[key: string]: ?number, ...}>;\r\n  getPointExtras(): $ReadOnly<{[key: string]: ?Extras, ...}>;\r\n  getTimespans(): $ReadOnly<{[key: string]: ?Timespan, ...}>;\r\n  hasTimespan(key: string): boolean;\r\n  isClosed(): boolean;\r\n  logEverything(): void;\r\n  markPoint(key: string, timestamp?: number, extras?: Extras): void;\r\n  removeExtra(key: string): ?ExtraValue;\r\n  setExtra(key: string, value: ExtraValue): void;\r\n  startTimespan(key: string, timestamp?: number, extras?: Extras): void;\r\n  stopTimespan(key: string, timestamp?: number, extras?: Extras): void;\r\n}\r\n\r\nconst _cookies: {[key: string]: number, ...} = {};\r\n\r\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\r\n\r\nexport const getCurrentTimestamp: () => number =\r\n  global.nativeQPLTimestamp ?? global.performance.now.bind(global.performance);\r\n\r\nclass PerformanceLogger implements IPerformanceLogger {\r\n  _timespans: {[key: string]: ?Timespan} = {};\r\n  _extras: {[key: string]: ?ExtraValue} = {};\r\n  _points: {[key: string]: ?number} = {};\r\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\r\n  _closed: boolean = false;\r\n\r\n  addTimespan(\r\n    key: string,\r\n    startTime: number,\r\n    endTime: number,\r\n    startExtras?: Extras,\r\n    endExtras?: Extras,\r\n  ) {\r\n    if (this._closed) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\r\n      }\r\n      return;\r\n    }\r\n    if (this._timespans[key]) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog(\r\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\r\n          key,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    this._timespans[key] = {\r\n      startTime,\r\n      endTime,\r\n      totalTime: endTime - (startTime || 0),\r\n      startExtras,\r\n      endExtras,\r\n    };\r\n  }\r\n\r\n  append(performanceLogger: IPerformanceLogger) {\r\n    this._timespans = {\r\n      ...performanceLogger.getTimespans(),\r\n      ...this._timespans,\r\n    };\r\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\r\n    this._points = {...performanceLogger.getPoints(), ...this._points};\r\n    this._pointExtras = {\r\n      ...performanceLogger.getPointExtras(),\r\n      ...this._pointExtras,\r\n    };\r\n  }\r\n\r\n  clear() {\r\n    this._timespans = {};\r\n    this._extras = {};\r\n    this._points = {};\r\n    if (PRINT_TO_CONSOLE) {\r\n      infoLog('PerformanceLogger.js', 'clear');\r\n    }\r\n  }\r\n\r\n  clearCompleted() {\r\n    for (const key in this._timespans) {\r\n      if (this._timespans[key]?.totalTime != null) {\r\n        delete this._timespans[key];\r\n      }\r\n    }\r\n    this._extras = {};\r\n    this._points = {};\r\n    if (PRINT_TO_CONSOLE) {\r\n      infoLog('PerformanceLogger.js', 'clearCompleted');\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this._closed = true;\r\n  }\r\n\r\n  currentTimestamp() {\r\n    return getCurrentTimestamp();\r\n  }\r\n\r\n  getExtras() {\r\n    return this._extras;\r\n  }\r\n\r\n  getPoints() {\r\n    return this._points;\r\n  }\r\n\r\n  getPointExtras() {\r\n    return this._pointExtras;\r\n  }\r\n\r\n  getTimespans() {\r\n    return this._timespans;\r\n  }\r\n\r\n  hasTimespan(key: string) {\r\n    return !!this._timespans[key];\r\n  }\r\n\r\n  isClosed() {\r\n    return this._closed;\r\n  }\r\n\r\n  logEverything() {\r\n    if (PRINT_TO_CONSOLE) {\r\n      // log timespans\r\n      for (const key in this._timespans) {\r\n        if (this._timespans[key]?.totalTime != null) {\r\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\r\n        }\r\n      }\r\n\r\n      // log extras\r\n      infoLog(this._extras);\r\n\r\n      // log points\r\n      for (const key in this._points) {\r\n        if (this._points[key] != null) {\r\n          infoLog(key + ': ' + this._points[key] + 'ms');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  markPoint(\r\n    key: string,\r\n    timestamp?: number = getCurrentTimestamp(),\r\n    extras?: Extras,\r\n  ) {\r\n    if (this._closed) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\r\n      }\r\n      return;\r\n    }\r\n    if (this._points[key] != null) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog(\r\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\r\n          key,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n    this._points[key] = timestamp;\r\n    if (extras) {\r\n      this._pointExtras[key] = extras;\r\n    }\r\n  }\r\n\r\n  removeExtra(key: string): ?ExtraValue {\r\n    const value = this._extras[key];\r\n    delete this._extras[key];\r\n    return value;\r\n  }\r\n\r\n  setExtra(key: string, value: ExtraValue) {\r\n    if (this._closed) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._extras.hasOwnProperty(key)) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog(\r\n          'PerformanceLogger: Attempting to set an extra that already exists ',\r\n          {key, currentValue: this._extras[key], attemptedValue: value},\r\n        );\r\n      }\r\n      return;\r\n    }\r\n    this._extras[key] = value;\r\n  }\r\n\r\n  startTimespan(\r\n    key: string,\r\n    timestamp?: number = getCurrentTimestamp(),\r\n    extras?: Extras,\r\n  ) {\r\n    if (this._closed) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog(\r\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\r\n          key,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._timespans[key]) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog(\r\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\r\n          key,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    this._timespans[key] = {\r\n      startTime: timestamp,\r\n      startExtras: extras,\r\n    };\r\n    _cookies[key] = Systrace.beginAsyncEvent(key);\r\n    if (PRINT_TO_CONSOLE) {\r\n      infoLog('PerformanceLogger.js', 'start: ' + key);\r\n    }\r\n  }\r\n\r\n  stopTimespan(\r\n    key: string,\r\n    timestamp?: number = getCurrentTimestamp(),\r\n    extras?: Extras,\r\n  ) {\r\n    if (this._closed) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const timespan = this._timespans[key];\r\n    if (!timespan || timespan.startTime == null) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog(\r\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\r\n          key,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n    if (timespan.endTime != null) {\r\n      if (PRINT_TO_CONSOLE && __DEV__) {\r\n        infoLog(\r\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\r\n          key,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    timespan.endExtras = extras;\r\n    timespan.endTime = timestamp;\r\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\r\n    if (PRINT_TO_CONSOLE) {\r\n      infoLog('PerformanceLogger.js', 'end: ' + key);\r\n    }\r\n\r\n    if (_cookies[key] != null) {\r\n      Systrace.endAsyncEvent(key, _cookies[key]);\r\n      delete _cookies[key];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function creates performance loggers that can be used to collect and log\r\n * various performance data such as timespans, points and extras.\r\n * The loggers need to have minimal overhead since they're used in production.\r\n */\r\nexport default function createPerformanceLogger(): IPerformanceLogger {\r\n  return new PerformanceLogger();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}