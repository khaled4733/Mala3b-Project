{"ast":null,"code":"'use strict';\n\nimport requireNativeComponent from \"../../Libraries/ReactNative/requireNativeComponent\";\nimport UIManager from \"../ReactNative/UIManager\";\n\nfunction codegenNativeComponent(componentName, options) {\n  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.getViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (options.paperComponentNameDeprecated != null && UIManager.getViewManagerConfig(options.paperComponentNameDeprecated)) {\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      var _options$paperCompone;\n\n      throw new Error(\"Failed to find native component for either \" + componentName + \" or \" + ((_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'));\n    }\n  }\n\n  return requireNativeComponent(componentNameInUse);\n}\n\nexport default codegenNativeComponent;","map":{"version":3,"sources":["D:/khaled/Matriels/Third Year/Second term/CS303/CS303-Project-1/node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"],"names":["requireNativeComponent","UIManager","codegenNativeComponent","componentName","options","componentNameInUse","paperComponentName","paperComponentNameDeprecated","getViewManagerConfig","Error"],"mappings":"AAYA;;AAEA,OAAOA,sBAAP;AAEA,OAAOC,SAAP;;AAYA,SAASC,sBAAT,CACEC,aADF,EAEEC,OAFF,EAG8B;AAC5B,MAAIC,kBAAkB,GACpBD,OAAO,IAAIA,OAAO,CAACE,kBAAR,IAA8B,IAAzC,GACIF,OAAO,CAACE,kBADZ,GAEIH,aAHN;;AAKA,MAAIC,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACG,4BAAR,IAAwC,IAA/D,EAAqE;AACnE,QAAIN,SAAS,CAACO,oBAAV,CAA+BL,aAA/B,CAAJ,EAAmD;AACjDE,MAAAA,kBAAkB,GAAGF,aAArB;AACD,KAFD,MAEO,IACLC,OAAO,CAACG,4BAAR,IAAwC,IAAxC,IACAN,SAAS,CAACO,oBAAV,CAA+BJ,OAAO,CAACG,4BAAvC,CAFK,EAGL;AACAF,MAAAA,kBAAkB,GAAGD,OAAO,CAACG,4BAA7B;AACD,KALM,MAKA;AAAA;;AACL,YAAM,IAAIE,KAAJ,iDAC0CN,aAD1C,sCAC8DC,OAAO,CAACG,4BADtE,oCAEF,WAFE,EAAN;AAID;AACF;;AAMD,SAAQP,sBAAsB,CAC5BK,kBAD4B,CAA9B;AAGD;;AAED,eAAeH,sBAAf","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n// TODO: move this file to shims/ReactNative (requires React update and sync)\r\n\r\n'use strict';\r\n\r\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\r\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\r\nimport UIManager from '../ReactNative/UIManager';\r\n\r\n// TODO: import from CodegenSchema once workspaces are enabled\r\ntype Options = $ReadOnly<{|\r\n  interfaceOnly?: boolean,\r\n  paperComponentName?: string,\r\n  paperComponentNameDeprecated?: string,\r\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\r\n|}>;\r\n\r\nexport type NativeComponentType<T> = HostComponent<T>;\r\n\r\nfunction codegenNativeComponent<Props>(\r\n  componentName: string,\r\n  options?: Options,\r\n): NativeComponentType<Props> {\r\n  let componentNameInUse =\r\n    options && options.paperComponentName != null\r\n      ? options.paperComponentName\r\n      : componentName;\r\n\r\n  if (options != null && options.paperComponentNameDeprecated != null) {\r\n    if (UIManager.getViewManagerConfig(componentName)) {\r\n      componentNameInUse = componentName;\r\n    } else if (\r\n      options.paperComponentNameDeprecated != null &&\r\n      UIManager.getViewManagerConfig(options.paperComponentNameDeprecated)\r\n    ) {\r\n      componentNameInUse = options.paperComponentNameDeprecated;\r\n    } else {\r\n      throw new Error(\r\n        `Failed to find native component for either ${componentName} or ${options.paperComponentNameDeprecated ??\r\n          '(unknown)'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  // If this function is run at runtime then that means the view configs were not\r\n  // generated with the view config babel plugin, so we need to require the native component.\r\n  //\r\n  // This will be useful during migration, but eventually this will error.\r\n  return (requireNativeComponent<Props>(\r\n    componentNameInUse,\r\n  ): HostComponent<Props>);\r\n}\r\n\r\nexport default codegenNativeComponent;\r\n"]},"metadata":{},"sourceType":"module"}