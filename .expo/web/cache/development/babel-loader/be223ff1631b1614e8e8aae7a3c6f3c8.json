{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where } from \"firebase/firestore\";\nimport { app } from \"./Config\";\nvar firestoreDB = getFirestore(app);\n\nfunction getUsers() {\n  var usersCol, userSnapshot;\n  return _regeneratorRuntime.async(function getUsers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          usersCol = collection(firestoreDB, \"users\");\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(usersCol));\n\n        case 3:\n          userSnapshot = _context.sent;\n          return _context.abrupt(\"return\", userSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function getUserById(id) {\n  var usersRef, q, querySnapshot;\n  return _regeneratorRuntime.async(function getUserById$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          usersRef = collection(firestoreDB, \"users\");\n          q = query(usersRef, where(\"id\", \"==\", id));\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 4:\n          querySnapshot = _context2.sent;\n          return _context2.abrupt(\"return\", querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction addUser(user) {\n  return _regeneratorRuntime.async(function addUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(setDoc(doc(firestoreDB, \"users\", user.id), user));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction subscribe(callback) {\n  var unsubscribe = onSnapshot(query(collection(db, \"Chats\")), function (snapshot) {\n    var source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\n    snapshot.docChanges().forEach(function (change) {\n      if (callback) callback({\n        change: change,\n        snapshot: snapshot\n      });\n    });\n  });\n  return unsubscribe;\n}\n\nexport { getUsers, addUser, subscribe };","map":{"version":3,"sources":["C:/Users/mahmo/OneDrive/Desktop/CS303-Project/CS-303 Project/db/User.js"],"names":["addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","app","firestoreDB","getUsers","usersCol","userSnapshot","docs","map","id","data","getUserById","usersRef","q","querySnapshot","addUser","user","subscribe","callback","unsubscribe","onSnapshot","db","snapshot","source","metadata","hasPendingWrites","docChanges","forEach","change"],"mappings":";;;;;;;AAAA,SAAQA,MAAR,EAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,YAArC,EAAmDC,MAAnD,EAA2DC,GAA3D,EAAgEC,KAAhE,EAAuEC,KAAvE,QAAmF,oBAAnF;AACA,SAAQC,GAAR;AAEA,IAAMC,WAAW,GAAGN,YAAY,CAACK,GAAD,CAAhC;;AAGA,SAAeE,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,QADV,GACqBV,UAAU,CAACQ,WAAD,EAAc,OAAd,CAD/B;AAAA;AAAA,2CAE+BP,OAAO,CAACS,QAAD,CAFtC;;AAAA;AAEUC,UAAAA,YAFV;AAAA,2CAGWA,YAAY,CAACC,IAAb,CAAkBC,GAAlB,CAAsB,UAACT,GAAD,EAAS;AAClC;AAAQU,cAAAA,EAAE,EAAEV,GAAG,CAACU;AAAhB,eAAuBV,GAAG,CAACW,IAAJ,EAAvB;AACH,WAFM,CAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,OAAO,SAAeC,WAAf,CAA2BF,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGG,UAAAA,QADH,GACcjB,UAAU,CAACQ,WAAD,EAAc,OAAd,CADxB;AAEGU,UAAAA,CAFH,GAEOb,KAAK,CAACY,QAAD,EAAWX,KAAK,CAAC,IAAD,EAAO,IAAP,EAAaQ,EAAb,CAAhB,CAFZ;AAAA;AAAA,2CAGyBb,OAAO,CAACiB,CAAD,CAHhC;;AAAA;AAGGC,UAAAA,aAHH;AAAA,4CAIIA,aAAa,CAACP,IAAd,CAAmBC,GAAnB,CAAuB,UAACT,GAAD,EAAS;AACnC;AAAQU,cAAAA,EAAE,EAAEV,GAAG,CAACU;AAAhB,eAAuBV,GAAG,CAACW,IAAJ,EAAvB;AACH,WAFM,CAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASP,SAAeK,OAAf,CAAuBC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACUlB,MAAM,CAACC,GAAG,CAACI,WAAD,EAAc,OAAd,EAAuBa,IAAI,CAACP,EAA5B,CAAJ,EAAqCO,IAArC,CADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,MAAMC,WAAW,GAAGC,UAAU,CAC1BpB,KAAK,CAACL,UAAU,CAAC0B,EAAD,EAAK,OAAL,CAAX,CADqB,EAE1B,UAACC,QAAD,EAAc;AACV,QAAMC,MAAM,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,gBAAlB,GAAqC,OAArC,GAA+C,QAA9D;AACAH,IAAAA,QAAQ,CAACI,UAAT,GAAsBC,OAAtB,CAA8B,UAACC,MAAD,EAAY;AACtC,UAAIV,QAAJ,EAAcA,QAAQ,CAAC;AAAEU,QAAAA,MAAM,EAANA,MAAF;AAAUN,QAAAA,QAAQ,EAARA;AAAV,OAAD,CAAR;AACjB,KAFD;AAGH,GAPyB,CAA9B;AASA,SAAOH,WAAP;AACH;;AAED,SAAQf,QAAR,EAAkBW,OAAlB,EAA0BE,SAA1B","sourcesContent":["import {addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where} from \"firebase/firestore\";\r\nimport {app} from \"./Config\";\r\n\r\nconst firestoreDB = getFirestore(app);\r\n\r\n\r\nasync function getUsers() {\r\n    const usersCol = collection(firestoreDB, \"users\");\r\n    const userSnapshot = await getDocs(usersCol);\r\n    return userSnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n    console.log(getUsers());\r\n    return \r\n}\r\n\r\nexport async function getUserById(id) {\r\n    const usersRef = collection(firestoreDB, \"users\");\r\n    const q = query(usersRef, where(\"id\", \"==\", id));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n}\r\n\r\nasync function addUser(user) {\r\n    await setDoc(doc(firestoreDB, \"users\", user.id), user);\r\n}\r\n\r\nfunction subscribe(callback) {\r\n    const unsubscribe = onSnapshot(\r\n        query(collection(db, \"Chats\")),\r\n        (snapshot) => {\r\n            const source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n            snapshot.docChanges().forEach((change) => {\r\n                if (callback) callback({ change, snapshot });\r\n            });\r\n        }\r\n    );\r\n    return unsubscribe;\r\n}\r\n\r\nexport {getUsers, addUser,subscribe};"]},"metadata":{},"sourceType":"module"}