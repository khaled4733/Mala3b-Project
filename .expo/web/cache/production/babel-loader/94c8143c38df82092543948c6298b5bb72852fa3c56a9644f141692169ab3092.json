{"ast":null,"code":"export var MediaTypeOptions;(function(MediaTypeOptions){MediaTypeOptions[\"All\"]=\"All\";MediaTypeOptions[\"Videos\"]=\"Videos\";MediaTypeOptions[\"Images\"]=\"Images\";})(MediaTypeOptions||(MediaTypeOptions={}));export var VideoExportPreset;(function(VideoExportPreset){VideoExportPreset[VideoExportPreset[\"Passthrough\"]=0]=\"Passthrough\";VideoExportPreset[VideoExportPreset[\"LowQuality\"]=1]=\"LowQuality\";VideoExportPreset[VideoExportPreset[\"MediumQuality\"]=2]=\"MediumQuality\";VideoExportPreset[VideoExportPreset[\"HighestQuality\"]=3]=\"HighestQuality\";VideoExportPreset[VideoExportPreset[\"H264_640x480\"]=4]=\"H264_640x480\";VideoExportPreset[VideoExportPreset[\"H264_960x540\"]=5]=\"H264_960x540\";VideoExportPreset[VideoExportPreset[\"H264_1280x720\"]=6]=\"H264_1280x720\";VideoExportPreset[VideoExportPreset[\"H264_1920x1080\"]=7]=\"H264_1920x1080\";VideoExportPreset[VideoExportPreset[\"H264_3840x2160\"]=8]=\"H264_3840x2160\";VideoExportPreset[VideoExportPreset[\"HEVC_1920x1080\"]=9]=\"HEVC_1920x1080\";VideoExportPreset[VideoExportPreset[\"HEVC_3840x2160\"]=10]=\"HEVC_3840x2160\";})(VideoExportPreset||(VideoExportPreset={}));export var UIImagePickerControllerQualityType;(function(UIImagePickerControllerQualityType){UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"High\"]=0]=\"High\";UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"Medium\"]=1]=\"Medium\";UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"Low\"]=2]=\"Low\";UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"VGA640x480\"]=3]=\"VGA640x480\";UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"IFrame1280x720\"]=4]=\"IFrame1280x720\";UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"IFrame960x540\"]=5]=\"IFrame960x540\";})(UIImagePickerControllerQualityType||(UIImagePickerControllerQualityType={}));export var UIImagePickerPresentationStyle;(function(UIImagePickerPresentationStyle){UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"FullScreen\"]=0]=\"FullScreen\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"PageSheet\"]=1]=\"PageSheet\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"FormSheet\"]=2]=\"FormSheet\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"CurrentContext\"]=3]=\"CurrentContext\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"OverFullScreen\"]=5]=\"OverFullScreen\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"OverCurrentContext\"]=6]=\"OverCurrentContext\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"Popover\"]=7]=\"Popover\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"BlurOverFullScreen\"]=8]=\"BlurOverFullScreen\";UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"Automatic\"]=-2]=\"Automatic\";})(UIImagePickerPresentationStyle||(UIImagePickerPresentationStyle={}));","map":{"version":3,"names":["MediaTypeOptions","VideoExportPreset","UIImagePickerControllerQualityType","UIImagePickerPresentationStyle"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\expo-image-picker\\src\\ImagePicker.types.ts"],"sourcesContent":["import { PermissionResponse } from 'expo-modules-core';\n\n// @needsAudit\n/**\n * Alias for `PermissionResponse` type exported by `unimodules-permission-interface`.\n */\nexport type CameraPermissionResponse = PermissionResponse;\n\n// @needsAudit\n/**\n * Extends [PermissionResponse](permissions.md#permissionresponse) type exported by\n * `unimodules-permission-interface` and contains additional iOS-specific field.\n */\nexport type MediaLibraryPermissionResponse = CameraPermissionResponse & {\n  /**\n   * @platform ios\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\n// @needsAudit\n/**\n * An alias for the `MediaLibraryPermissionResponse` object.\n * @deprecated Use `ImagePicker.MediaLibraryPermissionResponse`\n */\nexport type CameraRollPermissionResponse = MediaLibraryPermissionResponse;\n\n// @needsAudit\nexport enum MediaTypeOptions {\n  /**\n   * Images and videos.\n   */\n  All = 'All',\n  /**\n   * Only videos.\n   */\n  Videos = 'Videos',\n  /**\n   * Only images.\n   */\n  Images = 'Images',\n}\n\n// @needsAudit\nexport enum VideoExportPreset {\n  /**\n   * Resolution: __Unchanged__ •\n   * Video compression: __None__ •\n   * Audio compression: __None__\n   */\n  Passthrough = 0,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  LowQuality = 1,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  MediumQuality = 2,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  HighestQuality = 3,\n  /**\n   * Resolution: __640 × 480__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_640x480 = 4,\n  /**\n   * Resolution: __960 × 540__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_960x540 = 5,\n  /**\n   * Resolution: __1280 × 720__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_1280x720 = 6,\n  /**\n   * Resolution: __1920 × 1080__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_1920x1080 = 7,\n  /**\n   * Resolution: __3840 × 2160__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_3840x2160 = 8,\n  /**\n   * Resolution: __1920 × 1080__ •\n   * Video compression: __HEVC__ •\n   * Audio compression: __AAC__\n   */\n  HEVC_1920x1080 = 9,\n  /**\n   * Resolution: __3840 × 2160__ •\n   * Video compression: __HEVC__ •\n   * Audio compression: __AAC__\n   */\n  HEVC_3840x2160 = 10,\n}\n\n// @needsAudit\nexport enum UIImagePickerControllerQualityType {\n  /**\n   * Highest available resolution.\n   */\n  High = 0,\n  /**\n   * Depends on the device.\n   */\n  Medium = 1,\n  /**\n   * Depends on the device.\n   */\n  Low = 2,\n  /**\n   * 640 × 480\n   */\n  VGA640x480 = 3,\n  /**\n   * 1280 × 720\n   */\n  IFrame1280x720 = 4,\n  /**\n   * 960 × 540\n   */\n  IFrame960x540 = 5,\n}\n\n// @docsMissing\nexport enum UIImagePickerPresentationStyle {\n  FullScreen = 0,\n  PageSheet = 1,\n  FormSheet = 2,\n  CurrentContext = 3,\n  OverFullScreen = 5,\n  OverCurrentContext = 6,\n  Popover = 7,\n  BlurOverFullScreen = 8,\n  Automatic = -2,\n}\n\n// @needsAudit\nexport type ImageInfo = {\n  /**\n   * URI to the local image or video file (usable as the source of an `Image` element, in the case of\n   * an image) and `width` and `height` specify the dimensions of the media.\n   */\n  uri: string;\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * The type of the asset.\n   */\n  type?: 'image' | 'video';\n  /**\n   * The `exif` field is included if the `exif` option is truthy, and is an object containing the\n   * image's EXIF data. The names of this object's properties are EXIF tags and the values are the\n   * respective EXIF values for those tags.\n   */\n  exif?: Record<string, any>;\n  /**\n   * Included if the `base64` option is truthy, and is a Base64-encoded string of the selected\n   * image's JPEG data. If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,\n   * you can use it as the source of an `Image` element; for example:\n   * ```ts\n   * <Image\n   *   source={{ uri: 'data:image/jpeg;base64,' + launchCameraResult.base64 }}\n   *   style={{ width: 200, height: 200 }}\n   * />\n   * ```\n   */\n  base64?: string;\n  /**\n   * Length of the video in milliseconds.\n   */\n  duration?: number;\n  /**\n   * Boolean flag which shows if request was cancelled. If asset data have been returned this should\n   * always be `false`.\n   */\n  cancelled: boolean;\n};\n\n// @needsAudit\nexport type ImagePickerErrorResult = {\n  /**\n   * The error code.\n   */\n  code: string;\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The exception which caused the error.\n   */\n  exception?: string;\n};\n\n// @needsAudit\n/**\n * An object returned when the pick action has been cancelled by the user.\n */\nexport type ImagePickerCancelledResult = { cancelled: true };\n\n// @needsAudit\nexport type ImagePickerResult = ImagePickerCancelledResult | ImageInfo;\n\n// @needsAudit @docsMissing\nexport type ImagePickerMultipleResult =\n  | ImagePickerCancelledResult\n  | { cancelled: false; selected: ImageInfo[] };\n\n// @needsAudit\nexport type ImagePickerOptions = {\n  /**\n   * Whether to show a UI to edit the image after it is picked. On Android the user can crop and\n   * rotate the image and on iOS simply crop it.\n   * @default false\n   */\n  allowsEditing?: boolean;\n  /**\n   * An array with two entries `[x, y]` specifying the aspect ratio to maintain if the user is\n   * allowed to edit the image (by passing `allowsEditing: true`). This is only applicable on\n   * Android, since on iOS the crop rectangle is always a square.\n   */\n  aspect?: [number, number];\n  /**\n   * Specify the quality of compression, from `0` to `1`. `0` means compress for small size,\n   * `1` means compress for maximum quality.\n   * > Note: If the selected image has been compressed before, the size of the output file may be\n   * > bigger than the size of the original image.\n   */\n  quality?: number;\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes?: MediaTypeOptions;\n  /**\n   * Whether to also include the EXIF data for the image. On iOS the EXIF data does not include GPS\n   * tags in the camera case.\n   */\n  exif?: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Specify preset which will be used to compress selected video.\n   * @default ImagePicker.VideoExportPreset.Passthrough\n   * @platform ios 11+\n   * @deprecated Deprecate: see [iOS videoExportPreset](https://developer.apple.com/documentation/uikit/uiimagepickercontroller/2890964-videoexportpreset?language=objc)\n   */\n  videoExportPreset?: VideoExportPreset;\n  /**\n   * Specify the quality of recorded videos. Defaults to `ImagePicker.UIImagePickerControllerQualityType.High`,\n   * which is the highest available for the device.\n   * @platform ios\n   */\n  videoQuality?: UIImagePickerControllerQualityType;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection?: boolean;\n  /**\n   * Maximum duration, in seconds, for video recording. Setting this to `0` disables the limit.\n   * Defaults to `0` (no limit).\n   * - **On iOS**, when `allowsEditing` is set to `true`, maximum duration is limited to 10 minutes.\n   *   This limit is applied automatically, if `0` or no value is specified.\n   * - **On Android**, effect of this option depends on support of installed camera app.\n   * - **On Web** this option has no effect - the limit is browser-dependant.\n   */\n  videoMaxDuration?: number;\n  /**\n   * Choose [presentation style](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle?language=objc)\n   * to customize view during taking photo/video.\n   * @default ImagePicker.UIImagePickerPresentationStyle.Automatic\n   * @platform ios\n   */\n  presentationStyle?: UIImagePickerPresentationStyle;\n};\n\n// @needsAudit\nexport type OpenFileBrowserOptions = {\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes: MediaTypeOptions;\n  // @docsMissing\n  capture?: boolean;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64: boolean;\n};\n\n// @needsAudit @docsMissing\nexport type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> =\n  T extends {\n    allowsMultipleSelection: true;\n  }\n    ? ImagePickerMultipleResult\n    : ImagePickerResult;\n"],"mappings":"AA4BA,UAAY,CAAAA,gBAaX,CAbD,UAAYA,gBAAgB,EAI1BA,gBAAA,aAAW,CAIXA,gBAAA,mBAAiB,CAIjBA,gBAAA,mBAAiB,CACnB,CAAC,EAbWA,gBAAgB,GAAhBA,gBAAgB,MAgB5B,UAAY,CAAAC,iBAmEX,CAnED,UAAYA,iBAAiB,EAM3BA,iBAAA,CAAAA,iBAAA,gCAAe,CAMfA,iBAAA,CAAAA,iBAAA,8BAAc,CAMdA,iBAAA,CAAAA,iBAAA,oCAAiB,CAMjBA,iBAAA,CAAAA,iBAAA,sCAAkB,CAMlBA,iBAAA,CAAAA,iBAAA,kCAAgB,CAMhBA,iBAAA,CAAAA,iBAAA,kCAAgB,CAMhBA,iBAAA,CAAAA,iBAAA,oCAAiB,CAMjBA,iBAAA,CAAAA,iBAAA,sCAAkB,CAMlBA,iBAAA,CAAAA,iBAAA,sCAAkB,CAMlBA,iBAAA,CAAAA,iBAAA,sCAAkB,CAMlBA,iBAAA,CAAAA,iBAAA,uCAAmB,CACrB,CAAC,EAnEWA,iBAAiB,GAAjBA,iBAAiB,MAsE7B,UAAY,CAAAC,kCAyBX,CAzBD,UAAYA,kCAAkC,EAI5CA,kCAAA,CAAAA,kCAAA,kBAAQ,CAIRA,kCAAA,CAAAA,kCAAA,sBAAU,CAIVA,kCAAA,CAAAA,kCAAA,gBAAO,CAIPA,kCAAA,CAAAA,kCAAA,8BAAc,CAIdA,kCAAA,CAAAA,kCAAA,sCAAkB,CAIlBA,kCAAA,CAAAA,kCAAA,oCAAiB,CACnB,CAAC,EAzBWA,kCAAkC,GAAlCA,kCAAkC,MA4B9C,UAAY,CAAAC,8BAUX,CAVD,UAAYA,8BAA8B,EACxCA,8BAAA,CAAAA,8BAAA,8BAAc,CACdA,8BAAA,CAAAA,8BAAA,4BAAa,CACbA,8BAAA,CAAAA,8BAAA,4BAAa,CACbA,8BAAA,CAAAA,8BAAA,sCAAkB,CAClBA,8BAAA,CAAAA,8BAAA,sCAAkB,CAClBA,8BAAA,CAAAA,8BAAA,8CAAsB,CACtBA,8BAAA,CAAAA,8BAAA,wBAAW,CACXA,8BAAA,CAAAA,8BAAA,8CAAsB,CACtBA,8BAAA,CAAAA,8BAAA,6BAAc,CAChB,CAAC,EAVWA,8BAA8B,GAA9BA,8BAA8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}