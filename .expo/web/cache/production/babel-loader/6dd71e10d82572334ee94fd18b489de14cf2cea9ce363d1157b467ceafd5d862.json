{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _extends from\"@babel/runtime/helpers/extends\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import*as queryString from'query-string';import fromEntries from\"./fromEntries\";import validatePathConfig from\"./validatePathConfig\";var getActiveRoute=function getActiveRoute(state){var route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}return route;};export default function getPathFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}if(options){validatePathConfig(options);}var configs=options!==null&&options!==void 0&&options.screens?createNormalizedConfigs(options===null||options===void 0?void 0:options.screens):{};var path='/';var current=state;var allParams={};var _loop=function _loop(){var index=typeof current.index==='number'?current.index:0;var route=current.routes[index];var pattern=void 0;var focusedParams=void 0;var focusedRoute=getActiveRoute(state);var currentOptions=configs;var nestedRouteNames=[];var hasNext=true;while(route.name in currentOptions&&hasNext){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){(function(){var stringify=(_currentOptions$route=currentOptions[route.name])===null||_currentOptions$route===void 0?void 0:_currentOptions$route.stringify;var currentParams=fromEntries(Object.entries(route.params).map(function(_ref){var _ref3=_slicedToArray(_ref,2),key=_ref3[0],value=_ref3[1];return[key,stringify!==null&&stringify!==void 0&&stringify[key]?stringify[key](value):String(value)];}));if(pattern){_extends(allParams,currentParams);}if(focusedRoute===route){focusedParams=_objectSpread({},currentParams);(_pattern=pattern)===null||_pattern===void 0?void 0:_pattern.split('/').filter(function(p){return p.startsWith(':');}).forEach(function(p){var name=getParamName(p);if(focusedParams){delete focusedParams[name];}});}})();}if(!currentOptions[route.name].screens||route.state===undefined){hasNext=false;}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){path+=pattern.split('/').map(function(p){var name=getParamName(p);if(p==='*'){return route.name;}if(p.startsWith(':')){var value=allParams[name];if(value===undefined&&p.endsWith('?')){return'';}return encodeURIComponent(value);}return encodeURIComponent(p);}).join('/');}else{path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(var param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}var query=queryString.stringify(focusedParams,{sort:false});if(query){path+=\"?\"+query;}}current=route.state;};while(current){var _currentOptions$route;var _pattern;_loop();}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;return path;}var getParamName=function getParamName(pattern){return pattern.replace(/^:/,'').replace(/\\?$/,'');};var joinPaths=function joinPaths(){var _ref4;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref4=[]).concat.apply(_ref4,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var createConfigItem=function createConfigItem(config,parentPattern){var _pattern2;if(typeof config==='string'){var _pattern3=parentPattern?joinPaths(parentPattern,config):config;return{pattern:_pattern3};}var pattern;if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';var screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:(_pattern2=pattern)===null||_pattern2===void 0?void 0:_pattern2.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens:screens};};var createNormalizedConfigs=function createNormalizedConfigs(options,pattern){return fromEntries(Object.entries(options).map(function(_ref2){var _ref5=_slicedToArray(_ref2,2),name=_ref5[0],c=_ref5[1];var result=createConfigItem(c,pattern);return[name,result];}));};","map":{"version":3,"names":["queryString","fromEntries","validatePathConfig","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","configs","screens","createNormalizedConfigs","path","current","allParams","_loop","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","_currentOptions$route","currentParams","Object","entries","map","_ref","_ref3","_slicedToArray","key","value","String","_extends","_objectSpread","_pattern","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","sort","replace","joinPaths","_ref4","_len","arguments","paths","Array","_key","concat","apply","_toConsumableArray","Boolean","createConfigItem","config","parentPattern","_pattern2","exact","_ref2","_ref5","c","result"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\@react-navigation\\core\\lib\\module\\getPathFromState.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport fromEntries from './fromEntries';\nimport type { PathConfig, PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = options?.screens\n    ? createNormalizedConfigs(options?.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"],"mappings":"82BAKA,MAAO,GAAK,CAAAA,WAAZ,KAA6B,cAA7B,CAEA,MAAO,CAAAC,WAAP,qBAEA,MAAO,CAAAC,kBAAP,4BAiBA,GAAM,CAAAC,cAAc,CAAI,QAAlB,CAAAA,cAAcA,CAAIC,KAAD,CAAqD,CAC1E,GAAM,CAAAC,KAAK,CACT,MAAO,CAAAD,KAAK,CAACE,KAAb,GAAuB,QAAvB,CACIF,KAAK,CAACG,MAAN,CAAaH,KAAK,CAACE,KAAnB,CADJ,CAEIF,KAAK,CAACG,MAAN,CAAaH,KAAK,CAACG,MAAN,CAAaC,MAAb,CAAsB,CAAnC,CAHN,CAKA,GAAIH,KAAK,CAACD,KAAV,CAAiB,CACf,MAAO,CAAAD,cAAc,CAACE,KAAK,CAACD,KAAP,CAArB,CACD,CAED,MAAO,CAAAC,KAAP,CACD,CAXD,CA0CA,cAAe,SAAS,CAAAI,gBAATA,CACbL,KADa,CAEbM,OAFa,CAGL,CACR,GAAIN,KAAK,EAAI,IAAb,CAAmB,CACjB,KAAM,CAAAO,KAAK,CACT,+EADS,CAAX,CAGD,CAED,GAAID,OAAJ,CAAa,CACXR,kBAAkB,CAACQ,OAAD,CAAlB,CACD,CAGD,GAAM,CAAAE,OAAmC,CAAGF,OAAO,OAAP,EAAAA,OAAO,SAAP,EAAAA,OAAO,CAAEG,OAAT,CACxCC,uBAAuB,CAACJ,OAAD,SAACA,OAAD,iBAACA,OAAO,CAAEG,OAAV,CADiB,CAExC,EAFJ,CAIA,GAAI,CAAAE,IAAI,CAAG,GAAX,CACA,GAAI,CAAAC,OAA0B,CAAGZ,KAAjC,CAEA,GAAM,CAAAa,SAA8B,CAAG,EAAvC,KAAAC,KAAA,UAAAA,MAAA,EAGE,GAAI,CAAAZ,KAAK,CAAG,MAAO,CAAAU,OAAO,CAACV,KAAf,GAAyB,QAAzB,CAAoCU,OAAO,CAACV,KAA5C,CAAoD,CAAhE,CACA,GAAI,CAAAD,KAAK,CAAGW,OAAO,CAACT,MAAR,CAAeD,KAAf,CAAZ,CAIA,GAAI,CAAAa,OAAJ,QAEA,GAAI,CAAAC,aAAJ,QACA,GAAI,CAAAC,YAAY,CAAGlB,cAAc,CAACC,KAAD,CAAjC,CACA,GAAI,CAAAkB,cAAc,CAAGV,OAArB,CAGA,GAAI,CAAAW,gBAAgB,CAAG,EAAvB,CAEA,GAAI,CAAAC,OAAO,CAAG,IAAd,CAEA,MAAOnB,KAAK,CAACoB,IAAN,GAAc,CAAAH,cAAd,EAAgCE,OAAvC,CAAgD,CAC9CL,OAAO,CAAGG,cAAc,CAACjB,KAAK,CAACoB,IAAP,CAAd,CAA2BN,OAArC,CAEAI,gBAAgB,CAACG,IAAjB,CAAsBrB,KAAK,CAACoB,IAA5B,EAEA,GAAIpB,KAAK,CAACsB,MAAV,CAAkB,aAChB,GAAM,CAAAC,SAAS,EAAAC,qBAAA,CAAGP,cAAc,CAACjB,KAAK,CAACoB,IAAP,CAAjB,UAAAI,qBAAA,iBAAGA,qBAAA,CAA4BD,SAA9C,CAEA,GAAM,CAAAE,aAAa,CAAG7B,WAAW,CAC/B8B,MAAM,CAACC,OAAP,CAAe3B,KAAK,CAACsB,MAArB,EAA6BM,GAA7B,CAAiC,SAAAC,IAAA,MAAAC,KAAA,CAAAC,cAAA,CAAAF,IAAA,IAAEG,GAAD,CAAAF,KAAA,IAAMG,KAAN,CAAAH,KAAA,IAAD,MAAkB,CACjDE,GADiD,CAEjDT,SAAS,OAAT,EAAAA,SAAS,SAAT,EAAAA,SAAS,CAAGS,GAAH,CAAT,CAAmBT,SAAS,CAACS,GAAD,CAAT,CAAeC,KAAf,CAAnB,CAA2CC,MAAM,CAACD,KAAD,CAFA,CAAlB,EAAjC,CAD+B,CAAjC,CAOA,GAAInB,OAAJ,CAAa,CACXqB,QAAA,CAAcvB,SAAd,CAAyBa,aAAzB,EACD,CAED,GAAIT,YAAY,GAAKhB,KAArB,CAA4B,CAG1Be,aAAa,CAAAqB,aAAA,IAAQX,aAAA,CAArB,CAEA,CAAAY,QAAA,CAAAvB,OAAO,QAAP,EAAAuB,QAAA,iBAAAA,QAAA,CACIC,KADJ,CACU,GADV,EAEGC,MAFH,CAEW,SAAAC,CAAD,QAAO,CAAAA,CAAC,CAACC,UAAF,CAAa,GAAb,CAFjB,IAIGC,OAJH,CAIY,SAAAF,CAAD,CAAO,CACd,GAAM,CAAApB,IAAI,CAAGuB,YAAY,CAACH,CAAD,CAAzB,CAGA,GAAIzB,aAAJ,CAAmB,CAEjB,MAAO,CAAAA,aAAa,CAACK,IAAD,CAApB,CACD,CACF,CAZH,EAaD,MACF,CAGD,GAAI,CAACH,cAAc,CAACjB,KAAK,CAACoB,IAAP,CAAd,CAA2BZ,OAA5B,EAAuCR,KAAK,CAACD,KAAN,GAAgB6C,SAA3D,CAAsE,CACpEzB,OAAO,CAAG,KAAV,CACD,CAFD,IAEO,CACLlB,KAAK,CACH,MAAO,CAAAD,KAAK,CAACD,KAAN,CAAYE,KAAnB,GAA6B,QAA7B,CACID,KAAK,CAACD,KAAN,CAAYE,KADhB,CAEID,KAAK,CAACD,KAAN,CAAYG,MAAZ,CAAmBC,MAAnB,CAA4B,CAHlC,CAKA,GAAM,CAAA0C,SAAS,CAAG7C,KAAK,CAACD,KAAN,CAAYG,MAAZ,CAAmBD,KAAnB,CAAlB,CACA,GAAM,CAAA6C,YAAY,CAAG7B,cAAc,CAACjB,KAAK,CAACoB,IAAP,CAAd,CAA2BZ,OAAhD,CAGA,GAAIsC,YAAY,EAAID,SAAS,CAACzB,IAAV,GAAkB,CAAA0B,YAAtC,CAAoD,CAClD9C,KAAK,CAAG6C,SAAR,CACA5B,cAAc,CAAG6B,YAAjB,CACD,CAHD,IAGO,CAEL3B,OAAO,CAAG,KAAV,CACD,CACF,CACF,CAED,GAAIL,OAAO,GAAK8B,SAAhB,CAA2B,CACzB9B,OAAO,CAAGI,gBAAgB,CAAC6B,IAAjB,CAAsB,GAAtB,CAAV,CACD,CAED,GAAI9B,cAAc,CAACjB,KAAK,CAACoB,IAAP,CAAd,GAA+BwB,SAAnC,CAA8C,CAC5ClC,IAAI,EAAII,OAAO,CACZwB,KADK,CACC,GADD,EAELV,GAFK,CAEA,SAAAY,CAAD,CAAO,CACV,GAAM,CAAApB,IAAI,CAAGuB,YAAY,CAACH,CAAD,CAAzB,CAKA,GAAIA,CAAC,GAAK,GAAV,CAAe,CACb,MAAO,CAAAxC,KAAK,CAACoB,IAAb,CACD,CAGD,GAAIoB,CAAC,CAACC,UAAF,CAAa,GAAb,CAAJ,CAAuB,CACrB,GAAM,CAAAR,KAAK,CAAGrB,SAAS,CAACQ,IAAD,CAAvB,CAEA,GAAIa,KAAK,GAAKW,SAAV,EAAuBJ,CAAC,CAACQ,QAAF,CAAW,GAAX,CAA3B,CAA4C,CAE1C,MAAO,EAAP,CACD,CAED,MAAO,CAAAC,kBAAkB,CAAChB,KAAD,CAAzB,CACD,CAED,MAAO,CAAAgB,kBAAkB,CAACT,CAAD,CAAzB,CACD,CAzBK,EA0BLO,IA1BK,CA0BA,GA1BA,CAAR,CA2BD,CA5BD,IA4BO,CACLrC,IAAI,EAAIuC,kBAAkB,CAACjD,KAAK,CAACoB,IAAP,CAA1B,CACD,CAED,GAAI,CAACL,aAAL,CAAoB,CAClBA,aAAa,CAAGC,YAAY,CAACM,MAA7B,CACD,CAED,GAAItB,KAAK,CAACD,KAAV,CAAiB,CACfW,IAAI,EAAI,GAAR,CACD,CAFD,IAEO,IAAIK,aAAJ,CAAmB,CACxB,IAAK,GAAI,CAAAmC,KAAT,GAAkB,CAAAnC,aAAlB,CAAiC,CAC/B,GAAIA,aAAa,CAACmC,KAAD,CAAb,GAAyB,WAA7B,CAA0C,CAExC,MAAO,CAAAnC,aAAa,CAACmC,KAAD,CAApB,CACD,CACF,CAED,GAAM,CAAAC,KAAK,CAAGxD,WAAW,CAAC4B,SAAZ,CAAsBR,aAAtB,CAAqC,CAAEqC,IAAI,CAAE,KAAR,CAArC,CAAd,CAEA,GAAID,KAAJ,CAAW,CACTzC,IAAI,MAAQyC,KAAZ,CACD,CACF,CAEDxC,OAAO,CAAGX,KAAK,CAACD,KAAhB,GAzIF,MAAOY,OAAP,CAAgB,IAsBM,CAAAa,qBAAA,IAcY,CAAAa,QAAA,CAAAxB,KAAA,GAsGjC,CAGDH,IAAI,CAAGA,IAAI,CAAC2C,OAAL,CAAa,MAAb,CAAqB,GAArB,CAAP,CACA3C,IAAI,CAAGA,IAAI,CAACP,MAAL,CAAc,CAAd,CAAkBO,IAAI,CAAC2C,OAAL,CAAa,KAAb,CAAoB,EAApB,CAAlB,CAA4C3C,IAAnD,CAEA,MAAO,CAAAA,IAAP,CACD,CAED,GAAM,CAAAiC,YAAY,CAAI,QAAhB,CAAAA,YAAYA,CAAI7B,OAAD,QACnB,CAAAA,OAAO,CAACuC,OAAR,CAAgB,IAAhB,CAAsB,EAAtB,EAA0BA,OAA1B,CAAkC,KAAlC,CAAyC,EAAzC,CADF,GAGA,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAA,CAAG,KAAAC,KAAA,SAAAC,IAAA,CAAAC,SAAA,CAAAtD,MAAA,CAAIuD,KAAJ,KAAAC,KAAA,CAAAH,IAAA,EAAAI,IAAA,GAAAA,IAAA,CAAAJ,IAAA,CAAAI,IAAA,IAAIF,KAAJ,CAAAE,IAAA,EAAAH,SAAA,CAAAG,IAAA,SACf,CAAAL,KAAA,GAAD,EACGM,MADH,CAAAC,KAAA,CAAAP,KAAA,CAAAQ,kBAAA,CACaL,KAAK,CAAC9B,GAAN,CAAW,SAAAY,CAAD,QAAO,CAAAA,CAAC,CAACF,KAAF,CAAQ,GAAR,CAAjB,GADb,GAEGC,MAFH,CAEUyB,OAFV,EAGGjB,IAHH,CAGQ,GAHR,CADgB,EAAlB,CAMA,GAAM,CAAAkB,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CACpBC,MADuB,CAEvBC,aAFuB,CAGR,KAAAC,SAAA,CACf,GAAI,MAAO,CAAAF,MAAP,GAAkB,QAAtB,CAAgC,CAE9B,GAAM,CAAApD,SAAO,CAAGqD,aAAa,CAAGb,SAAS,CAACa,aAAD,CAAgBD,MAAhB,CAAZ,CAAsCA,MAAnE,CAEA,MAAO,CAAEpD,OAAA,CAAAA,SAAF,CAAP,CACD,CAID,GAAI,CAAAA,OAAJ,CAEA,GAAIoD,MAAM,CAACG,KAAP,EAAgBH,MAAM,CAACxD,IAAP,GAAgBkC,SAApC,CAA+C,CAC7C,KAAM,IAAI,CAAAtC,KAAJ,CACJ,sJADI,CAAN,CAGD,CAEDQ,OAAO,CACLoD,MAAM,CAACG,KAAP,GAAiB,IAAjB,CACIf,SAAS,CAACa,aAAa,EAAI,EAAlB,CAAsBD,MAAM,CAACxD,IAAP,EAAe,EAArC,CADb,CAEIwD,MAAM,CAACxD,IAAP,EAAe,EAHrB,CAKA,GAAM,CAAAF,OAAO,CAAG0D,MAAM,CAAC1D,OAAP,CACZC,uBAAuB,CAACyD,MAAM,CAAC1D,OAAR,CAAiBM,OAAjB,CADX,CAEZ8B,SAFJ,CAIA,MAAO,CAEL9B,OAAO,EAAAsD,SAAA,CAAEtD,OAAF,UAAAsD,SAAA,iBAAEA,SAAA,CAAS9B,KAAT,CAAe,GAAf,EAAoBC,MAApB,CAA2ByB,OAA3B,EAAoCjB,IAApC,CAAyC,GAAzC,CAFJ,CAGLxB,SAAS,CAAE2C,MAAM,CAAC3C,SAHb,CAILf,OAAA,CAAAA,OAJK,CAAP,CAMD,CApCD,CAsCA,GAAM,CAAAC,uBAAuB,CAAG,QAA1B,CAAAA,uBAAuBA,CAC3BJ,OAD8B,CAE9BS,OAF8B,QAI9B,CAAAlB,WAAW,CACT8B,MAAM,CAACC,OAAP,CAAetB,OAAf,EAAwBuB,GAAxB,CAA4B,SAAA0C,KAAA,CAAe,KAAAC,KAAA,CAAAxC,cAAA,CAAAuC,KAAA,IAAblD,IAAD,CAAAmD,KAAA,IAAOC,CAAP,CAAAD,KAAA,IAC3B,GAAM,CAAAE,MAAM,CAAGR,gBAAgB,CAACO,CAAD,CAAI1D,OAAJ,CAA/B,CAEA,MAAO,CAACM,IAAD,CAAOqD,MAAP,CAAP,CACD,CAJD,CADS,CAJb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}