{"ast":null,"code":"export default function findFocusedRoute(state){var _current2,_current$index3,_current3;var current=state;while(((_current=current)===null||_current===void 0?void 0:_current.routes[(_current$index=current.index)!==null&&_current$index!==void 0?_current$index:0].state)!=null){var _current,_current$index,_current$index2;current=current.routes[(_current$index2=current.index)!==null&&_current$index2!==void 0?_current$index2:0].state;}var route=(_current2=current)===null||_current2===void 0?void 0:_current2.routes[(_current$index3=(_current3=current)===null||_current3===void 0?void 0:_current3.index)!==null&&_current$index3!==void 0?_current$index3:0];return route;}","map":{"version":3,"names":["findFocusedRoute","state","_current2","_current$index3","_current3","current","_current","routes","_current$index","index","_current$index2","route"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\@react-navigation\\core\\lib\\module\\findFocusedRoute.tsx"],"sourcesContent":["import type { InitialState } from '@react-navigation/routers';\n\nexport default function findFocusedRoute(state: InitialState) {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index ?? 0].state != null) {\n    current = current.routes[current.index ?? 0].state;\n  }\n\n  const route = current?.routes[current?.index ?? 0];\n\n  return route;\n}\n"],"mappings":"AAEA,cAAe,SAAS,CAAAA,gBAATA,CAA0BC,KAA1B,CAA+C,KAAAC,SAAA,CAAAC,eAAA,CAAAC,SAAA,CAC5D,GAAI,CAAAC,OAAiC,CAAGJ,KAAxC,CAEA,MAAO,EAAAK,QAAA,CAAAD,OAAO,QAAP,EAAAC,QAAA,iBAAAA,QAAA,CAASC,MAAT,EAAAC,cAAA,CAAgBH,OAAO,CAACI,KAAxB,UAAAD,cAAA,UAAAA,cAAA,CAAiC,CAAjC,EAAoCP,KAApC,GAA6C,IAApD,CAA0D,KAAAK,QAAA,CAAAE,cAAA,CAAAE,eAAA,CACxDL,OAAO,CAAGA,OAAO,CAACE,MAAR,EAAAG,eAAA,CAAeL,OAAO,CAACI,KAAvB,UAAAC,eAAA,UAAAA,eAAA,CAAgC,CAAhC,EAAmCT,KAA7C,CACD,CAED,GAAM,CAAAU,KAAK,EAAAT,SAAA,CAAGG,OAAH,UAAAH,SAAA,iBAAGA,SAAA,CAASK,MAAT,EAAAJ,eAAA,EAAAC,SAAA,CAAgBC,OAAhB,UAAAD,SAAA,iBAAgBA,SAAA,CAASK,KAAzB,UAAAN,eAAA,UAAAA,eAAA,CAAkC,CAAlC,CAAd,CAEA,MAAO,CAAAQ,KAAP,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}