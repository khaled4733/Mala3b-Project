{"ast":null,"code":"import invariant from'fbjs/lib/invariant';import requestIdleCallback,{cancelIdleCallback}from\"../../modules/requestIdleCallback\";var InteractionManager={Events:{interactionStart:'interactionStart',interactionComplete:'interactionComplete'},runAfterInteractions:function runAfterInteractions(task){var handle;var promise=new Promise(function(resolve){handle=requestIdleCallback(function(){if(task){resolve(task());}else{resolve();}});});return{then:promise.then.bind(promise),done:promise.then.bind(promise),cancel:function cancel(){cancelIdleCallback(handle);}};},createInteractionHandle:function createInteractionHandle(){return 1;},clearInteractionHandle:function clearInteractionHandle(handle){invariant(!!handle,'Must provide a handle to clear.');},addListener:function addListener(){}};export default InteractionManager;","map":{"version":3,"names":["invariant","requestIdleCallback","cancelIdleCallback","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","then","bind","done","cancel","createInteractionHandle","clearInteractionHandle","addListener"],"sources":["C:/Users/Ahmed Hamza/Desktop/Mal3ab project/Mala3b-Project/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\r\nvar InteractionManager = {\r\n  Events: {\r\n    interactionStart: 'interactionStart',\r\n    interactionComplete: 'interactionComplete'\r\n  },\r\n\r\n  /**\r\n   * Schedule a function to run after all interactions have completed.\r\n   */\r\n  runAfterInteractions: function runAfterInteractions(task) {\r\n    var handle;\r\n    var promise = new Promise(function (resolve) {\r\n      handle = requestIdleCallback(function () {\r\n        if (task) {\r\n          resolve(task());\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n    return {\r\n      then: promise.then.bind(promise),\r\n      done: promise.then.bind(promise),\r\n      cancel: function cancel() {\r\n        cancelIdleCallback(handle);\r\n      }\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Notify manager that an interaction has started.\r\n   */\r\n  createInteractionHandle: function createInteractionHandle() {\r\n    return 1;\r\n  },\r\n\r\n  /**\r\n   * Notify manager that an interaction has completed.\r\n   */\r\n  clearInteractionHandle: function clearInteractionHandle(handle) {\r\n    invariant(!!handle, 'Must provide a handle to clear.');\r\n  },\r\n  addListener: function addListener() {}\r\n};\r\nexport default InteractionManager;"],"mappings":"AASA,MAAO,CAAAA,SAAS,KAAM,oBAAoB,CAC1C,MAAO,CAAAC,mBAAmB,EAAIC,kBAAkB,yCAChD,GAAI,CAAAC,kBAAkB,CAAG,CACvBC,MAAM,CAAE,CACNC,gBAAgB,CAAE,kBAAkB,CACpCC,mBAAmB,CAAE,qBACvB,CAAC,CAKDC,oBAAoB,CAAE,QAAS,CAAAA,oBAAoBA,CAACC,IAAI,CAAE,CACxD,GAAI,CAAAC,MAAM,CACV,GAAI,CAAAC,OAAO,CAAG,GAAI,CAAAC,OAAO,CAAC,SAAUC,OAAO,CAAE,CAC3CH,MAAM,CAAGR,mBAAmB,CAAC,UAAY,CACvC,GAAIO,IAAI,CAAE,CACRI,OAAO,CAACJ,IAAI,CAAC,CAAC,CAAC,CACjB,CAAC,IAAM,CACLI,OAAO,CAAC,CAAC,CACX,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CACF,MAAO,CACLC,IAAI,CAAEH,OAAO,CAACG,IAAI,CAACC,IAAI,CAACJ,OAAO,CAAC,CAChCK,IAAI,CAAEL,OAAO,CAACG,IAAI,CAACC,IAAI,CAACJ,OAAO,CAAC,CAChCM,MAAM,CAAE,QAAS,CAAAA,MAAMA,CAAA,CAAG,CACxBd,kBAAkB,CAACO,MAAM,CAAC,CAC5B,CACF,CAAC,CACH,CAAC,CAKDQ,uBAAuB,CAAE,QAAS,CAAAA,uBAAuBA,CAAA,CAAG,CAC1D,MAAO,EAAC,CACV,CAAC,CAKDC,sBAAsB,CAAE,QAAS,CAAAA,sBAAsBA,CAACT,MAAM,CAAE,CAC9DT,SAAS,CAAC,CAAC,CAACS,MAAM,CAAE,iCAAiC,CAAC,CACxD,CAAC,CACDU,WAAW,CAAE,QAAS,CAAAA,WAAWA,CAAA,CAAG,CAAC,CACvC,CAAC,CACD,cAAe,CAAAhB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}