{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var formatToList=function formatToList(items){return items.map(function(key){return\"- \"+key;}).join('\\n');};export default function validatePathConfig(config){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var validKeys=['initialRouteName','screens'];if(!root){validKeys.push('path','exact','stringify','parse');}var invalidKeys=Object.keys(config).filter(function(key){return!validKeys.includes(key);});if(invalidKeys.length){throw new Error(\"Found invalid properties in the configuration:\\n\"+formatToList(invalidKeys)+\"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\"+formatToList(validKeys)+\"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");}if(config.screens){Object.entries(config.screens).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),_=_ref2[0],value=_ref2[1];if(typeof value!=='string'){validatePathConfig(value,false);}});}}","map":{"version":3,"names":["formatToList","items","map","key","join","validatePathConfig","config","root","arguments","length","undefined","validKeys","push","invalidKeys","Object","keys","filter","includes","Error","screens","entries","forEach","_ref","_ref2","_slicedToArray","_","value"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\@react-navigation\\core\\lib\\module\\validatePathConfig.tsx"],"sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"],"mappings":"iEAAA,GAAM,CAAAA,YAAY,CAAI,QAAhB,CAAAA,YAAYA,CAAIC,KAAD,QACnB,CAAAA,KAAK,CAACC,GAAN,CAAW,SAAAC,GAAD,aAAcA,GAAI,EAA5B,EAA+BC,IAA/B,CAAoC,IAApC,CADF,GAGA,cAAe,SAAS,CAAAC,kBAATA,CAA4BC,MAA5B,CAAsD,IAAb,CAAAC,IAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAN,IAAM,CACnE,GAAM,CAAAG,SAAS,CAAG,CAAC,kBAAD,CAAqB,SAArB,CAAlB,CAEA,GAAI,CAACJ,IAAL,CAAW,CACTI,SAAS,CAACC,IAAV,CAAe,MAAf,CAAuB,OAAvB,CAAgC,WAAhC,CAA6C,OAA7C,EACD,CAED,GAAM,CAAAC,WAAW,CAAGC,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,MAApB,CACjB,SAAAb,GAAD,QAAS,CAACQ,SAAS,CAACM,QAAV,CAAmBd,GAAnB,CADQ,GAApB,CAIA,GAAIU,WAAW,CAACJ,MAAhB,CAAwB,CACtB,KAAM,IAAI,CAAAS,KAAJ,oDAC+ClB,YAAY,CAC7Da,WAD6D,CAE7D,sHAAoHb,YAAY,CAChIW,SADgI,CAEhI,yHALE,CAAN,CAOD,CAED,GAAIL,MAAM,CAACa,OAAX,CAAoB,CAClBL,MAAM,CAACM,OAAP,CAAed,MAAM,CAACa,OAAtB,EAA+BE,OAA/B,CAAuC,SAAAC,IAAA,CAAgB,KAAAC,KAAA,CAAAC,cAAA,CAAAF,IAAA,IAAdG,CAAD,CAAAF,KAAA,IAAIG,KAAJ,CAAAH,KAAA,IACtC,GAAI,MAAO,CAAAG,KAAP,GAAiB,QAArB,CAA+B,CAC7BrB,kBAAkB,CAACqB,KAAD,CAAQ,KAAR,CAAlB,CACD,CACF,CAJD,EAKD,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}