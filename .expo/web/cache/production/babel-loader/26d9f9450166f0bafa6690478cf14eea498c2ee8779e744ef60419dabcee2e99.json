{"ast":null,"code":"import{canUseDOM}from'fbjs/lib/ExecutionEnvironment';import createResponderEvent from\"./createResponderEvent\";import{isCancelish,isEndish,isMoveish,isScroll,isSelectionChange,isStartish}from\"./ResponderEventTypes\";import{getLowestCommonAncestor,getResponderPaths,hasTargetTouches,hasValidSelection,isPrimaryPointerDown,setResponderId}from\"./utils\";import ResponderTouchHistoryStore from\"./ResponderTouchHistoryStore\";var emptyObject={};var startRegistration=['onStartShouldSetResponderCapture','onStartShouldSetResponder',{bubbles:true}];var moveRegistration=['onMoveShouldSetResponderCapture','onMoveShouldSetResponder',{bubbles:true}];var scrollRegistration=['onScrollShouldSetResponderCapture','onScrollShouldSetResponder',{bubbles:false}];var shouldSetResponderEvents={touchstart:startRegistration,mousedown:startRegistration,touchmove:moveRegistration,mousemove:moveRegistration,scroll:scrollRegistration};var emptyResponder={id:null,idPath:null,node:null};var responderListenersMap=new Map();var isEmulatingMouseEvents=false;var trackedTouchCount=0;var currentResponder={id:null,node:null,idPath:null};function changeCurrentResponder(responder){currentResponder=responder;}function getResponderConfig(id){var config=responderListenersMap.get(id);return config!=null?config:emptyObject;}function eventListener(domEvent){var eventType=domEvent.type;var eventTarget=domEvent.target;if(eventType==='touchstart'){isEmulatingMouseEvents=true;}if(eventType==='touchmove'||trackedTouchCount>1){isEmulatingMouseEvents=false;}if(eventType==='mousedown'&&isEmulatingMouseEvents||eventType==='mousemove'&&isEmulatingMouseEvents||eventType==='mousemove'&&trackedTouchCount<1){return;}if(isEmulatingMouseEvents&&eventType==='mouseup'){if(trackedTouchCount===0){isEmulatingMouseEvents=false;}return;}var isStartEvent=isStartish(eventType)&&isPrimaryPointerDown(domEvent);var isMoveEvent=isMoveish(eventType);var isEndEvent=isEndish(eventType);var isScrollEvent=isScroll(eventType);var isSelectionChangeEvent=isSelectionChange(eventType);var responderEvent=createResponderEvent(domEvent);if(isStartEvent||isMoveEvent||isEndEvent){if(domEvent.touches){trackedTouchCount=domEvent.touches.length;}else{if(isStartEvent){trackedTouchCount=1;}else if(isEndEvent){trackedTouchCount=0;}}ResponderTouchHistoryStore.recordTouchTrack(eventType,responderEvent.nativeEvent);}var eventPaths=getResponderPaths(domEvent);var wasNegotiated=false;var wantsResponder;if(isStartEvent||isMoveEvent||isScrollEvent&&trackedTouchCount>0){var currentResponderIdPath=currentResponder.idPath;var eventIdPath=eventPaths.idPath;if(currentResponderIdPath!=null&&eventIdPath!=null){var lowestCommonAncestor=getLowestCommonAncestor(currentResponderIdPath,eventIdPath);if(lowestCommonAncestor!=null){var indexOfLowestCommonAncestor=eventIdPath.indexOf(lowestCommonAncestor);var index=indexOfLowestCommonAncestor+(lowestCommonAncestor===currentResponder.id?1:0);eventPaths={idPath:eventIdPath.slice(index),nodePath:eventPaths.nodePath.slice(index)};}else{eventPaths=null;}}if(eventPaths!=null){wantsResponder=findWantsResponder(eventPaths,domEvent,responderEvent);if(wantsResponder!=null){attemptTransfer(responderEvent,wantsResponder);wasNegotiated=true;}}}if(currentResponder.id!=null&&currentResponder.node!=null){var _currentResponder=currentResponder,id=_currentResponder.id,node=_currentResponder.node;var _getResponderConfig=getResponderConfig(id),onResponderStart=_getResponderConfig.onResponderStart,onResponderMove=_getResponderConfig.onResponderMove,onResponderEnd=_getResponderConfig.onResponderEnd,onResponderRelease=_getResponderConfig.onResponderRelease,onResponderTerminate=_getResponderConfig.onResponderTerminate,onResponderTerminationRequest=_getResponderConfig.onResponderTerminationRequest;responderEvent.bubbles=false;responderEvent.cancelable=false;responderEvent.currentTarget=node;if(isStartEvent){if(onResponderStart!=null){responderEvent.dispatchConfig.registrationName='onResponderStart';onResponderStart(responderEvent);}}else if(isMoveEvent){if(onResponderMove!=null){responderEvent.dispatchConfig.registrationName='onResponderMove';onResponderMove(responderEvent);}}else{var isTerminateEvent=isCancelish(eventType)||eventType==='contextmenu'||eventType==='blur'&&eventTarget===window||eventType==='blur'&&eventTarget.contains(node)&&domEvent.relatedTarget!==node||isScrollEvent&&trackedTouchCount===0||isScrollEvent&&eventTarget.contains(node)&&eventTarget!==node||isSelectionChangeEvent&&hasValidSelection(domEvent);var isReleaseEvent=isEndEvent&&!isTerminateEvent&&!hasTargetTouches(node,domEvent.touches);if(isEndEvent){if(onResponderEnd!=null){responderEvent.dispatchConfig.registrationName='onResponderEnd';onResponderEnd(responderEvent);}}if(isReleaseEvent){if(onResponderRelease!=null){responderEvent.dispatchConfig.registrationName='onResponderRelease';onResponderRelease(responderEvent);}changeCurrentResponder(emptyResponder);}if(isTerminateEvent){var shouldTerminate=true;if(eventType==='contextmenu'||eventType==='scroll'||eventType==='selectionchange'){if(wasNegotiated){shouldTerminate=false;}else if(onResponderTerminationRequest!=null){responderEvent.dispatchConfig.registrationName='onResponderTerminationRequest';if(onResponderTerminationRequest(responderEvent)===false){shouldTerminate=false;}}}if(shouldTerminate){if(onResponderTerminate!=null){responderEvent.dispatchConfig.registrationName='onResponderTerminate';onResponderTerminate(responderEvent);}changeCurrentResponder(emptyResponder);isEmulatingMouseEvents=false;trackedTouchCount=0;}}}}}function findWantsResponder(eventPaths,domEvent,responderEvent){var shouldSetCallbacks=shouldSetResponderEvents[domEvent.type];if(shouldSetCallbacks!=null){var idPath=eventPaths.idPath,nodePath=eventPaths.nodePath;var shouldSetCallbackCaptureName=shouldSetCallbacks[0];var shouldSetCallbackBubbleName=shouldSetCallbacks[1];var bubbles=shouldSetCallbacks[2].bubbles;var check=function check(id,node,callbackName){var config=getResponderConfig(id);var shouldSetCallback=config[callbackName];if(shouldSetCallback!=null){responderEvent.currentTarget=node;if(shouldSetCallback(responderEvent)===true){var prunedIdPath=idPath.slice(idPath.indexOf(id));return{id:id,node:node,idPath:prunedIdPath};}}};for(var i=idPath.length-1;i>=0;i--){var id=idPath[i];var node=nodePath[i];var result=check(id,node,shouldSetCallbackCaptureName);if(result!=null){return result;}if(responderEvent.isPropagationStopped()===true){return;}}if(bubbles){for(var _i=0;_i<idPath.length;_i++){var _id=idPath[_i];var _node=nodePath[_i];var _result=check(_id,_node,shouldSetCallbackBubbleName);if(_result!=null){return _result;}if(responderEvent.isPropagationStopped()===true){return;}}}else{var _id2=idPath[0];var _node2=nodePath[0];var target=domEvent.target;if(target===_node2){return check(_id2,_node2,shouldSetCallbackBubbleName);}}}}function attemptTransfer(responderEvent,wantsResponder){var _currentResponder2=currentResponder,currentId=_currentResponder2.id,currentNode=_currentResponder2.node;var id=wantsResponder.id,node=wantsResponder.node;var _getResponderConfig2=getResponderConfig(id),onResponderGrant=_getResponderConfig2.onResponderGrant,onResponderReject=_getResponderConfig2.onResponderReject;responderEvent.bubbles=false;responderEvent.cancelable=false;responderEvent.currentTarget=node;if(currentId==null){if(onResponderGrant!=null){responderEvent.currentTarget=node;responderEvent.dispatchConfig.registrationName='onResponderGrant';onResponderGrant(responderEvent);}changeCurrentResponder(wantsResponder);}else{var _getResponderConfig3=getResponderConfig(currentId),onResponderTerminate=_getResponderConfig3.onResponderTerminate,onResponderTerminationRequest=_getResponderConfig3.onResponderTerminationRequest;var allowTransfer=true;if(onResponderTerminationRequest!=null){responderEvent.currentTarget=currentNode;responderEvent.dispatchConfig.registrationName='onResponderTerminationRequest';if(onResponderTerminationRequest(responderEvent)===false){allowTransfer=false;}}if(allowTransfer){if(onResponderTerminate!=null){responderEvent.currentTarget=currentNode;responderEvent.dispatchConfig.registrationName='onResponderTerminate';onResponderTerminate(responderEvent);}if(onResponderGrant!=null){responderEvent.currentTarget=node;responderEvent.dispatchConfig.registrationName='onResponderGrant';onResponderGrant(responderEvent);}changeCurrentResponder(wantsResponder);}else{if(onResponderReject!=null){responderEvent.currentTarget=node;responderEvent.dispatchConfig.registrationName='onResponderReject';onResponderReject(responderEvent);}}}}var documentEventsCapturePhase=['blur','scroll'];var documentEventsBubblePhase=['mousedown','mousemove','mouseup','dragstart','touchstart','touchmove','touchend','touchcancel','contextmenu','select','selectionchange'];export function attachListeners(){if(canUseDOM&&window.__reactResponderSystemActive==null){window.addEventListener('blur',eventListener);documentEventsBubblePhase.forEach(function(eventType){document.addEventListener(eventType,eventListener);});documentEventsCapturePhase.forEach(function(eventType){document.addEventListener(eventType,eventListener,true);});window.__reactResponderSystemActive=true;}}export function addNode(id,node,config){setResponderId(node,id);responderListenersMap.set(id,config);}export function removeNode(id){if(currentResponder.id===id){terminateResponder();}if(responderListenersMap.has(id)){responderListenersMap.delete(id);}}export function terminateResponder(){var _currentResponder3=currentResponder,id=_currentResponder3.id,node=_currentResponder3.node;if(id!=null&&node!=null){var _getResponderConfig4=getResponderConfig(id),onResponderTerminate=_getResponderConfig4.onResponderTerminate;if(onResponderTerminate!=null){var event=createResponderEvent({});event.currentTarget=node;onResponderTerminate(event);}changeCurrentResponder(emptyResponder);}isEmulatingMouseEvents=false;trackedTouchCount=0;}export function getResponderNode(){return currentResponder.node;}","map":{"version":3,"names":["canUseDOM","createResponderEvent","isCancelish","isEndish","isMoveish","isScroll","isSelectionChange","isStartish","getLowestCommonAncestor","getResponderPaths","hasTargetTouches","hasValidSelection","isPrimaryPointerDown","setResponderId","ResponderTouchHistoryStore","emptyObject","startRegistration","bubbles","moveRegistration","scrollRegistration","shouldSetResponderEvents","touchstart","mousedown","touchmove","mousemove","scroll","emptyResponder","id","idPath","node","responderListenersMap","Map","isEmulatingMouseEvents","trackedTouchCount","currentResponder","changeCurrentResponder","responder","getResponderConfig","config","get","eventListener","domEvent","eventType","type","eventTarget","target","isStartEvent","isMoveEvent","isEndEvent","isScrollEvent","isSelectionChangeEvent","responderEvent","touches","length","recordTouchTrack","nativeEvent","eventPaths","wasNegotiated","wantsResponder","currentResponderIdPath","eventIdPath","lowestCommonAncestor","indexOfLowestCommonAncestor","indexOf","index","slice","nodePath","findWantsResponder","attemptTransfer","_currentResponder","_getResponderConfig","onResponderStart","onResponderMove","onResponderEnd","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","currentTarget","dispatchConfig","registrationName","isTerminateEvent","window","contains","relatedTarget","isReleaseEvent","shouldTerminate","shouldSetCallbacks","shouldSetCallbackCaptureName","shouldSetCallbackBubbleName","check","callbackName","shouldSetCallback","prunedIdPath","i","result","isPropagationStopped","_i","_id","_node","_result","_id2","_node2","_currentResponder2","currentId","currentNode","_getResponderConfig2","onResponderGrant","onResponderReject","_getResponderConfig3","allowTransfer","documentEventsCapturePhase","documentEventsBubblePhase","attachListeners","__reactResponderSystemActive","addEventListener","forEach","document","addNode","set","removeNode","terminateResponder","has","delete","_currentResponder3","_getResponderConfig4","event","getResponderNode"],"sources":["C:/Users/Ahmed Hamza/Desktop/Mal3ab project/Mala3b-Project/node_modules/react-native-web/dist/modules/useResponderEvents/ResponderSystem.js"],"sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\n\r\n/**\r\n * RESPONDER EVENT SYSTEM\r\n *\r\n * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\r\n * that pointer interactions are exclusive to that view and none other. The \"interaction\r\n * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\r\n * pointers continue to be active.\r\n *\r\n * Responder being granted:\r\n *\r\n * A view can become the \"responder\" after the following events:\r\n *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\r\n *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\r\n *  * \"scroll\" (while a pointer is down)\r\n *  * \"selectionchange\" (while a pointer is down)\r\n *\r\n * If nothing is already the \"responder\", the event propagates to (capture) and from\r\n * (bubble) the event target until a view returns `true` for\r\n * `on*ShouldSetResponder(Capture)`.\r\n *\r\n * If something is already the responder, the event propagates to (capture) and from\r\n * (bubble) the lowest common ancestor of the event target and the current \"responder\".\r\n * Then negotiation happens between the current \"responder\" and a view that wants to\r\n * become the \"responder\": see the timing diagram below.\r\n *\r\n * (NOTE: Scrolled views either automatically become the \"responder\" or release the\r\n * \"interaction lock\". A native scroll view that isn't built on top of the responder\r\n * system must result in the current \"responder\" being notified that it no longer has\r\n * the \"interaction lock\" - the native system has taken over.\r\n *\r\n * Responder being released:\r\n *\r\n * As soon as there are no more active pointers that *started* inside descendants\r\n * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\r\n * current \"responder\", and the responder lock is released.\r\n *\r\n * Typical sequence of events:\r\n *  * startShouldSetResponder\r\n *  * responderGrant/Reject\r\n *  * responderStart\r\n *  * responderMove\r\n *  * responderEnd\r\n *  * responderRelease\r\n */\r\n\r\n/*                                             Negotiation Performed\r\n                                             +-----------------------+\r\n                                            /                         \\\r\nProcess low level events to    +     Current Responder      +   wantsResponderID\r\ndetermine who to perform negot-|   (if any exists at all)   |\r\niation/transition              | Otherwise just pass through|\r\n-------------------------------+----------------------------+------------------+\r\nBubble to find first ID        |                            |\r\nto return true:wantsResponderID|                            |\r\n                               |                            |\r\n     +--------------+          |                            |\r\n     | onTouchStart |          |                            |\r\n     +------+-------+    none  |                            |\r\n            |            return|                            |\r\n+-----------v-------------+true| +------------------------+ |\r\n|onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\r\n+-----------+-------------+    | +------------------------+ |          |\r\n            |                  |                            | +--------+-------+\r\n            | returned true for|       false:REJECT +-------->|onResponderReject\r\n            | wantsResponderID |                    |       | +----------------+\r\n            | (now attempt     | +------------------+-----+ |\r\n            |  handoff)        | | onResponder            | |\r\n            +------------------->|    TerminationRequest  | |\r\n                               | +------------------+-----+ |\r\n                               |                    |       | +----------------+\r\n                               |         true:GRANT +-------->|onResponderGrant|\r\n                               |                            | +--------+-------+\r\n                               | +------------------------+ |          |\r\n                               | | onResponderTerminate   |<-----------+\r\n                               | +------------------+-----+ |\r\n                               |                    |       | +----------------+\r\n                               |                    +-------->|onResponderStart|\r\n                               |                            | +----------------+\r\nBubble to find first ID        |                            |\r\nto return true:wantsResponderID|                            |\r\n                               |                            |\r\n     +-------------+           |                            |\r\n     | onTouchMove |           |                            |\r\n     +------+------+     none  |                            |\r\n            |            return|                            |\r\n+-----------v-------------+true| +------------------------+ |\r\n|onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\r\n+-----------+-------------+    | +------------------------+ |          |\r\n            |                  |                            | +--------+-------+\r\n            | returned true for|       false:REJECT +-------->|onResponderReject\r\n            | wantsResponderID |                    |       | +----------------+\r\n            | (now attempt     | +------------------+-----+ |\r\n            |  handoff)        | |   onResponder          | |\r\n            +------------------->|      TerminationRequest| |\r\n                               | +------------------+-----+ |\r\n                               |                    |       | +----------------+\r\n                               |         true:GRANT +-------->|onResponderGrant|\r\n                               |                            | +--------+-------+\r\n                               | +------------------------+ |          |\r\n                               | |   onResponderTerminate |<-----------+\r\n                               | +------------------+-----+ |\r\n                               |                    |       | +----------------+\r\n                               |                    +-------->|onResponderMove |\r\n                               |                            | +----------------+\r\n                               |                            |\r\n                               |                            |\r\n      Some active touch started|                            |\r\n      inside current responder | +------------------------+ |\r\n      +------------------------->|      onResponderEnd    | |\r\n      |                        | +------------------------+ |\r\n  +---+---------+              |                            |\r\n  | onTouchEnd  |              |                            |\r\n  +---+---------+              |                            |\r\n      |                        | +------------------------+ |\r\n      +------------------------->|     onResponderEnd     | |\r\n      No active touches started| +-----------+------------+ |\r\n      inside current responder |             |              |\r\n                               |             v              |\r\n                               | +------------------------+ |\r\n                               | |    onResponderRelease  | |\r\n                               | +------------------------+ |\r\n                               |                            |\r\n                               +                            + */\r\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\r\nimport createResponderEvent from './createResponderEvent';\r\nimport { isCancelish, isEndish, isMoveish, isScroll, isSelectionChange, isStartish } from './ResponderEventTypes';\r\nimport { getLowestCommonAncestor, getResponderPaths, hasTargetTouches, hasValidSelection, isPrimaryPointerDown, setResponderId } from './utils';\r\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\r\n/* ------------ TYPES ------------ */\r\n\r\nvar emptyObject = {};\r\n/* ------------ IMPLEMENTATION ------------ */\r\n\r\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\r\n  bubbles: true\r\n}];\r\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\r\n  bubbles: true\r\n}];\r\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\r\n  bubbles: false\r\n}];\r\nvar shouldSetResponderEvents = {\r\n  touchstart: startRegistration,\r\n  mousedown: startRegistration,\r\n  touchmove: moveRegistration,\r\n  mousemove: moveRegistration,\r\n  scroll: scrollRegistration\r\n};\r\nvar emptyResponder = {\r\n  id: null,\r\n  idPath: null,\r\n  node: null\r\n};\r\nvar responderListenersMap = new Map();\r\nvar isEmulatingMouseEvents = false;\r\nvar trackedTouchCount = 0;\r\nvar currentResponder = {\r\n  id: null,\r\n  node: null,\r\n  idPath: null\r\n};\r\n\r\nfunction changeCurrentResponder(responder) {\r\n  currentResponder = responder;\r\n}\r\n\r\nfunction getResponderConfig(id) {\r\n  var config = responderListenersMap.get(id);\r\n  return config != null ? config : emptyObject;\r\n}\r\n/**\r\n * Process native events\r\n *\r\n * A single event listener is used to manage the responder system.\r\n * All pointers are tracked in the ResponderTouchHistoryStore. Native events\r\n * are interpreted in terms of the Responder System and checked to see if\r\n * the responder should be transferred. Each host node that is attached to\r\n * the Responder System has an ID, which is used to look up its associated\r\n * callbacks.\r\n */\r\n\r\n\r\nfunction eventListener(domEvent) {\r\n  var eventType = domEvent.type;\r\n  var eventTarget = domEvent.target;\r\n  /**\r\n   * Manage emulated events and early bailout.\r\n   * Since PointerEvent is not used yet (lack of support in older Safari), it's\r\n   * necessary to manually manage the mess of browser touch/mouse events.\r\n   * And bailout early for termination events when there is no active responder.\r\n   */\r\n  // Flag when browser may produce emulated events\r\n\r\n  if (eventType === 'touchstart') {\r\n    isEmulatingMouseEvents = true;\r\n  } // Remove flag when browser will not produce emulated events\r\n\r\n\r\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\r\n    isEmulatingMouseEvents = false;\r\n  } // Ignore various events in particular circumstances\r\n\r\n\r\n  if ( // Ignore browser emulated mouse events\r\n  eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first\r\n  eventType === 'mousemove' && trackedTouchCount < 1) {\r\n    return;\r\n  } // Remove flag after emulated events are finished\r\n\r\n\r\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\r\n    if (trackedTouchCount === 0) {\r\n      isEmulatingMouseEvents = false;\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  var isStartEvent = isStartish(eventType) && isPrimaryPointerDown(domEvent);\r\n  var isMoveEvent = isMoveish(eventType);\r\n  var isEndEvent = isEndish(eventType);\r\n  var isScrollEvent = isScroll(eventType);\r\n  var isSelectionChangeEvent = isSelectionChange(eventType);\r\n  var responderEvent = createResponderEvent(domEvent);\r\n  /**\r\n   * Record the state of active pointers\r\n   */\r\n\r\n  if (isStartEvent || isMoveEvent || isEndEvent) {\r\n    if (domEvent.touches) {\r\n      trackedTouchCount = domEvent.touches.length;\r\n    } else {\r\n      if (isStartEvent) {\r\n        trackedTouchCount = 1;\r\n      } else if (isEndEvent) {\r\n        trackedTouchCount = 0;\r\n      }\r\n    }\r\n\r\n    ResponderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\r\n  }\r\n  /**\r\n   * Responder System logic\r\n   */\r\n\r\n\r\n  var eventPaths = getResponderPaths(domEvent);\r\n  var wasNegotiated = false;\r\n  var wantsResponder; // If an event occured that might change the current responder...\r\n\r\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\r\n    // If there is already a responder, prune the event paths to the lowest common ancestor\r\n    // of the existing responder and deepest target of the event.\r\n    var currentResponderIdPath = currentResponder.idPath;\r\n    var eventIdPath = eventPaths.idPath;\r\n\r\n    if (currentResponderIdPath != null && eventIdPath != null) {\r\n      var lowestCommonAncestor = getLowestCommonAncestor(currentResponderIdPath, eventIdPath);\r\n\r\n      if (lowestCommonAncestor != null) {\r\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor); // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\r\n\r\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\r\n        eventPaths = {\r\n          idPath: eventIdPath.slice(index),\r\n          nodePath: eventPaths.nodePath.slice(index)\r\n        };\r\n      } else {\r\n        eventPaths = null;\r\n      }\r\n    }\r\n\r\n    if (eventPaths != null) {\r\n      // If a node wants to become the responder, attempt to transfer.\r\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\r\n\r\n      if (wantsResponder != null) {\r\n        // Sets responder if none exists, or negotates with existing responder.\r\n        attemptTransfer(responderEvent, wantsResponder);\r\n        wasNegotiated = true;\r\n      }\r\n    }\r\n  } // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\r\n\r\n\r\n  if (currentResponder.id != null && currentResponder.node != null) {\r\n    var _currentResponder = currentResponder,\r\n        id = _currentResponder.id,\r\n        node = _currentResponder.node;\r\n\r\n    var _getResponderConfig = getResponderConfig(id),\r\n        onResponderStart = _getResponderConfig.onResponderStart,\r\n        onResponderMove = _getResponderConfig.onResponderMove,\r\n        onResponderEnd = _getResponderConfig.onResponderEnd,\r\n        onResponderRelease = _getResponderConfig.onResponderRelease,\r\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\r\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\r\n\r\n    responderEvent.bubbles = false;\r\n    responderEvent.cancelable = false;\r\n    responderEvent.currentTarget = node; // Start\r\n\r\n    if (isStartEvent) {\r\n      if (onResponderStart != null) {\r\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\r\n        onResponderStart(responderEvent);\r\n      }\r\n    } // Move\r\n    else if (isMoveEvent) {\r\n        if (onResponderMove != null) {\r\n          responderEvent.dispatchConfig.registrationName = 'onResponderMove';\r\n          onResponderMove(responderEvent);\r\n        }\r\n      } else {\r\n        var isTerminateEvent = isCancelish(eventType) || // native context menu\r\n        eventType === 'contextmenu' || // window blur\r\n        eventType === 'blur' && eventTarget === window || // responder (or ancestors) blur\r\n        eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer\r\n        isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)\r\n        isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node\r\n        isSelectionChangeEvent && hasValidSelection(domEvent);\r\n        var isReleaseEvent = isEndEvent && !isTerminateEvent && !hasTargetTouches(node, domEvent.touches); // End\r\n\r\n        if (isEndEvent) {\r\n          if (onResponderEnd != null) {\r\n            responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\r\n            onResponderEnd(responderEvent);\r\n          }\r\n        } // Release\r\n\r\n\r\n        if (isReleaseEvent) {\r\n          if (onResponderRelease != null) {\r\n            responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\r\n            onResponderRelease(responderEvent);\r\n          }\r\n\r\n          changeCurrentResponder(emptyResponder);\r\n        } // Terminate\r\n\r\n\r\n        if (isTerminateEvent) {\r\n          var shouldTerminate = true; // Responders can still avoid termination but only for these events.\r\n\r\n          if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\r\n            // Only call this function is it wasn't already called during negotiation.\r\n            if (wasNegotiated) {\r\n              shouldTerminate = false;\r\n            } else if (onResponderTerminationRequest != null) {\r\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\r\n\r\n              if (onResponderTerminationRequest(responderEvent) === false) {\r\n                shouldTerminate = false;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (shouldTerminate) {\r\n            if (onResponderTerminate != null) {\r\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\r\n              onResponderTerminate(responderEvent);\r\n            }\r\n\r\n            changeCurrentResponder(emptyResponder);\r\n            isEmulatingMouseEvents = false;\r\n            trackedTouchCount = 0;\r\n          }\r\n        }\r\n      }\r\n  }\r\n}\r\n/**\r\n * Walk the event path to/from the target node. At each node, stop and call the\r\n * relevant \"shouldSet\" functions for the given event type. If any of those functions\r\n * call \"stopPropagation\" on the event, stop searching for a responder.\r\n */\r\n\r\n\r\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\r\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type]; // for Flow\r\n\r\n  if (shouldSetCallbacks != null) {\r\n    var idPath = eventPaths.idPath,\r\n        nodePath = eventPaths.nodePath;\r\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\r\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\r\n    var bubbles = shouldSetCallbacks[2].bubbles;\r\n\r\n    var check = function check(id, node, callbackName) {\r\n      var config = getResponderConfig(id);\r\n      var shouldSetCallback = config[callbackName];\r\n\r\n      if (shouldSetCallback != null) {\r\n        responderEvent.currentTarget = node;\r\n\r\n        if (shouldSetCallback(responderEvent) === true) {\r\n          // Start the path from the potential responder\r\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\r\n          return {\r\n            id: id,\r\n            node: node,\r\n            idPath: prunedIdPath\r\n          };\r\n        }\r\n      }\r\n    }; // capture\r\n\r\n\r\n    for (var i = idPath.length - 1; i >= 0; i--) {\r\n      var id = idPath[i];\r\n      var node = nodePath[i];\r\n      var result = check(id, node, shouldSetCallbackCaptureName);\r\n\r\n      if (result != null) {\r\n        return result;\r\n      }\r\n\r\n      if (responderEvent.isPropagationStopped() === true) {\r\n        return;\r\n      }\r\n    } // bubble\r\n\r\n\r\n    if (bubbles) {\r\n      for (var _i = 0; _i < idPath.length; _i++) {\r\n        var _id = idPath[_i];\r\n        var _node = nodePath[_i];\r\n\r\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\r\n\r\n        if (_result != null) {\r\n          return _result;\r\n        }\r\n\r\n        if (responderEvent.isPropagationStopped() === true) {\r\n          return;\r\n        }\r\n      }\r\n    } else {\r\n      var _id2 = idPath[0];\r\n      var _node2 = nodePath[0];\r\n      var target = domEvent.target;\r\n\r\n      if (target === _node2) {\r\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * Attempt to transfer the responder.\r\n */\r\n\r\n\r\nfunction attemptTransfer(responderEvent, wantsResponder) {\r\n  var _currentResponder2 = currentResponder,\r\n      currentId = _currentResponder2.id,\r\n      currentNode = _currentResponder2.node;\r\n  var id = wantsResponder.id,\r\n      node = wantsResponder.node;\r\n\r\n  var _getResponderConfig2 = getResponderConfig(id),\r\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\r\n      onResponderReject = _getResponderConfig2.onResponderReject;\r\n\r\n  responderEvent.bubbles = false;\r\n  responderEvent.cancelable = false;\r\n  responderEvent.currentTarget = node; // Set responder\r\n\r\n  if (currentId == null) {\r\n    if (onResponderGrant != null) {\r\n      responderEvent.currentTarget = node;\r\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\r\n      onResponderGrant(responderEvent);\r\n    }\r\n\r\n    changeCurrentResponder(wantsResponder);\r\n  } // Negotiate with current responder\r\n  else {\r\n      var _getResponderConfig3 = getResponderConfig(currentId),\r\n          onResponderTerminate = _getResponderConfig3.onResponderTerminate,\r\n          onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\r\n\r\n      var allowTransfer = true;\r\n\r\n      if (onResponderTerminationRequest != null) {\r\n        responderEvent.currentTarget = currentNode;\r\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\r\n\r\n        if (onResponderTerminationRequest(responderEvent) === false) {\r\n          allowTransfer = false;\r\n        }\r\n      }\r\n\r\n      if (allowTransfer) {\r\n        // Terminate existing responder\r\n        if (onResponderTerminate != null) {\r\n          responderEvent.currentTarget = currentNode;\r\n          responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\r\n          onResponderTerminate(responderEvent);\r\n        } // Grant next responder\r\n\r\n\r\n        if (onResponderGrant != null) {\r\n          responderEvent.currentTarget = node;\r\n          responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\r\n          onResponderGrant(responderEvent);\r\n        }\r\n\r\n        changeCurrentResponder(wantsResponder);\r\n      } else {\r\n        // Reject responder request\r\n        if (onResponderReject != null) {\r\n          responderEvent.currentTarget = node;\r\n          responderEvent.dispatchConfig.registrationName = 'onResponderReject';\r\n          onResponderReject(responderEvent);\r\n        }\r\n      }\r\n    }\r\n}\r\n/* ------------ PUBLIC API ------------ */\r\n\r\n/**\r\n * Attach Listeners\r\n *\r\n * Use native events as ReactDOM doesn't have a non-plugin API to implement\r\n * this system.\r\n */\r\n\r\n\r\nvar documentEventsCapturePhase = ['blur', 'scroll'];\r\nvar documentEventsBubblePhase = [// mouse\r\n'mousedown', 'mousemove', 'mouseup', 'dragstart', // touch\r\n'touchstart', 'touchmove', 'touchend', 'touchcancel', // other\r\n'contextmenu', 'select', 'selectionchange'];\r\nexport function attachListeners() {\r\n  if (canUseDOM && window.__reactResponderSystemActive == null) {\r\n    window.addEventListener('blur', eventListener);\r\n    documentEventsBubblePhase.forEach(function (eventType) {\r\n      document.addEventListener(eventType, eventListener);\r\n    });\r\n    documentEventsCapturePhase.forEach(function (eventType) {\r\n      document.addEventListener(eventType, eventListener, true);\r\n    });\r\n    window.__reactResponderSystemActive = true;\r\n  }\r\n}\r\n/**\r\n * Register a node with the ResponderSystem.\r\n */\r\n\r\nexport function addNode(id, node, config) {\r\n  setResponderId(node, id);\r\n  responderListenersMap.set(id, config);\r\n}\r\n/**\r\n * Unregister a node with the ResponderSystem.\r\n */\r\n\r\nexport function removeNode(id) {\r\n  if (currentResponder.id === id) {\r\n    terminateResponder();\r\n  }\r\n\r\n  if (responderListenersMap.has(id)) {\r\n    responderListenersMap.delete(id);\r\n  }\r\n}\r\n/**\r\n * Allow the current responder to be terminated from within components to support\r\n * more complex requirements, such as use with other React libraries for working\r\n * with scroll views, input views, etc.\r\n */\r\n\r\nexport function terminateResponder() {\r\n  var _currentResponder3 = currentResponder,\r\n      id = _currentResponder3.id,\r\n      node = _currentResponder3.node;\r\n\r\n  if (id != null && node != null) {\r\n    var _getResponderConfig4 = getResponderConfig(id),\r\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\r\n\r\n    if (onResponderTerminate != null) {\r\n      var event = createResponderEvent({});\r\n      event.currentTarget = node;\r\n      onResponderTerminate(event);\r\n    }\r\n\r\n    changeCurrentResponder(emptyResponder);\r\n  }\r\n\r\n  isEmulatingMouseEvents = false;\r\n  trackedTouchCount = 0;\r\n}\r\n/**\r\n * Allow unit tests to inspect the current responder in the system.\r\n * FOR TESTING ONLY.\r\n */\r\n\r\nexport function getResponderNode() {\r\n  return currentResponder.node;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}