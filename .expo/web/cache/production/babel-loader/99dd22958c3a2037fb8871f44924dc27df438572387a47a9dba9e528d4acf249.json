{"ast":null,"code":"import{CHILD_STATE}from\"./useRouteCache\";export default function getFocusedRouteNameFromRoute(route){var _route$CHILD_STATE,_state$index;var state=(_route$CHILD_STATE=route[CHILD_STATE])!==null&&_route$CHILD_STATE!==void 0?_route$CHILD_STATE:route.state;var params=route.params;var routeName=state?state.routes[(_state$index=state.index)!==null&&_state$index!==void 0?_state$index:typeof state.type==='string'&&state.type!=='stack'?0:state.routes.length-1].name:typeof(params===null||params===void 0?void 0:params.screen)==='string'?params.screen:undefined;return routeName;}","map":{"version":3,"names":["CHILD_STATE","getFocusedRouteNameFromRoute","route","_route$CHILD_STATE","_state$index","state","params","routeName","routes","index","type","length","name","screen","undefined"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\@react-navigation\\core\\lib\\module\\getFocusedRouteNameFromRoute.tsx"],"sourcesContent":["import type { Route } from '@react-navigation/routers';\n\nimport { CHILD_STATE } from './useRouteCache';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>>\n): string | undefined {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n"],"mappings":"AAEA,OAASA,WAAT,uBAEA,cAAe,SAAS,CAAAC,4BAATA,CACbC,KADa,CAEO,KAAAC,kBAAA,CAAAC,YAAA,CAEpB,GAAM,CAAAC,KAAK,EAAAF,kBAAA,CAAGD,KAAK,CAACF,WAAD,CAAR,UAAAG,kBAAA,UAAAA,kBAAA,CAAyBD,KAAK,CAACG,KAA1C,CACA,GAAM,CAAAC,MAAM,CAAGJ,KAAK,CAACI,MAArB,CAEA,GAAM,CAAAC,SAAS,CAAGF,KAAK,CAEnBA,KAAK,CAACG,MAAN,EAAAJ,YAAA,CAGEC,KAAK,CAACI,KAHR,UAAAL,YAAA,UAAAA,YAAA,CAIK,MAAO,CAAAC,KAAK,CAACK,IAAb,GAAsB,QAAtB,EAAkCL,KAAK,CAACK,IAAN,GAAe,OAAjD,CACG,CADH,CAEGL,KAAK,CAACG,MAAN,CAAaG,MAAb,CAAsB,CAN9B,EAOEC,IATiB,CAWrB,OAAON,MAAP,SAAOA,MAAP,iBAAOA,MAAM,CAAEO,MAAf,IAA0B,QAA1B,CACEP,MAAM,CAACO,MADT,CAEEC,SAbJ,CAeA,MAAO,CAAAP,SAAP,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}