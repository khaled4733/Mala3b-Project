{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError}from'expo-modules-core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font\";function uriFromFontSource(asset){if(typeof asset==='string'){return asset||null;}else if(typeof asset==='object'){return asset.uri||asset.localUri||null;}return null;}function displayFromFontSource(asset){return asset.display||FontDisplay.AUTO;}export function fontFamilyNeedsScoping(name){return false;}export function getAssetForSource(source){var uri=uriFromFontSource(source);var display=displayFromFontSource(source);if(!uri||typeof uri!=='string'){throwInvalidSourceError(uri);}return{uri:uri,display:display};}function throwInvalidSourceError(source){var type=typeof source;if(type==='object')type=JSON.stringify(source,null,2);throw new CodedError(\"ERR_FONT_SOURCE\",\"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \"+type);}export function loadSingleFontAsync(name,input){return _regeneratorRuntime.async(function loadSingleFontAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(typeof input!=='object'||typeof input.uri!=='string'||input.downloadAsync){throwInvalidSourceError(input);}_context.next=3;return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name,input));case 3:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function getNativeFontName(name){return name;}","map":{"version":3,"names":["CodedError","ExpoFontLoader","FontDisplay","uriFromFontSource","asset","uri","localUri","displayFromFontSource","display","AUTO","fontFamilyNeedsScoping","name","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","loadSingleFontAsync","input","_regeneratorRuntime","async","loadSingleFontAsync$","_context","prev","next","downloadAsync","awrap","loadAsync","stop","Promise","getNativeFontName"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\expo-font\\src\\FontLoader.web.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"mappings":"4DACA,OAASA,UAAU,KAAQ,mBAAmB,CAE9C,MAAO,CAAAC,cAAc,wBACrB,OAASC,WAAW,cAGpB,QAAS,CAAAC,iBAAiBA,CAACC,KAAU,EACnC,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,CAAAA,KAAK,EAAI,IAAI,C,CACrB,IAAM,IAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CACpC,MAAO,CAAAA,KAAK,CAACC,GAAG,EAAID,KAAK,CAACE,QAAQ,EAAI,IAAI,C,CAE5C,MAAO,KAAI,CACb,CAEA,QAAS,CAAAC,qBAAqBA,CAACH,KAAU,EACvC,MAAO,CAAAA,KAAK,CAACI,OAAO,EAAIN,WAAW,CAACO,IAAI,CAC1C,CAEA,MAAM,SAAU,CAAAC,sBAAsBA,CAACC,IAAY,EACjD,MAAO,MAAK,CACd,CAEA,MAAM,SAAU,CAAAC,iBAAiBA,CAACC,MAAkB,EAClD,GAAM,CAAAR,GAAG,CAAGF,iBAAiB,CAACU,MAAM,CAAC,CACrC,GAAM,CAAAL,OAAO,CAAGD,qBAAqB,CAACM,MAAM,CAAC,CAE7C,GAAI,CAACR,GAAG,EAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,CAAE,CACnCS,uBAAuB,CAACT,GAAG,CAAC,C,CAG9B,MAAO,CACLA,GAAG,CAAEA,GAAI,CACTG,OAAO,CAAPA,O,CACD,CACH,CAEA,QAAS,CAAAM,uBAAuBA,CAACD,MAAW,EAC1C,GAAI,CAAAE,IAAI,CAAW,MAAO,CAAAF,MAAM,CAChC,GAAIE,IAAI,GAAK,QAAQ,CAAEA,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAE,IAAI,CAAE,CAAC,CAAC,CAC7D,KAAM,IAAI,CAAAb,UAAU,gIAE6Fe,IAAM,CACtH,CACH,CAEA,MAAO,SAAe,CAAAG,mBAAmBA,CACvCP,IAAY,CACZQ,KAA2B,SAAAC,mBAAA,CAAAC,KAAA,UAAAC,qBAAAC,QAAA,kBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAE3B,GAAI,MAAO,CAAAN,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAA,KAAK,CAACd,GAAG,GAAK,QAAQ,EAAKc,KAAa,CAACO,aAAa,CAAE,CAC9FZ,uBAAuB,CAACK,KAAK,CAAC,C,CAC/BI,QAAA,CAAAE,IAAA,UAAAL,mBAAA,CAAAO,KAAA,CAEK1B,cAAc,CAAC2B,SAAS,CAACjB,IAAI,CAAEQ,KAAK,CAAC,0BAAAI,QAAA,CAAAM,IAAA,sBAAAC,OAAA,GAG7C,MAAM,SAAU,CAAAC,iBAAiBA,CAACpB,IAAY,EAC5C,MAAO,CAAAA,IAAI,CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}