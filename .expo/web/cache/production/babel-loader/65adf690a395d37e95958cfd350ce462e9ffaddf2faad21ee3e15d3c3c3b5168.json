{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import{useState}from'react';import useNavigation from\"./useNavigation\";export default function useIsFocused(){var navigation=useNavigation();var _useState=useState(navigation.isFocused),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var valueToReturn=navigation.isFocused();if(isFocused!==valueToReturn){setIsFocused(valueToReturn);}React.useEffect(function(){var unsubscribeFocus=navigation.addListener('focus',function(){return setIsFocused(true);});var unsubscribeBlur=navigation.addListener('blur',function(){return setIsFocused(false);});return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);React.useDebugValue(valueToReturn);return valueToReturn;}","map":{"version":3,"names":["React","useState","useNavigation","useIsFocused","navigation","_useState","isFocused","_useState2","_slicedToArray","setIsFocused","valueToReturn","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\@react-navigation\\core\\lib\\module\\useIsFocused.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"],"mappings":"iEAAA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,KAAyB,OAAzB,CAEA,MAAO,CAAAC,aAAP,uBAMA,cAAe,SAAS,CAAAC,YAATA,CAAA,CAAiC,CAC9C,GAAM,CAAAC,UAAU,CAAGF,aAAa,EAAhC,CACA,IAAAG,SAAA,CAAkCJ,QAAQ,CAACG,UAAU,CAACE,SAAZ,CAA1C,CAAAC,UAAA,CAAAC,cAAA,CAAAH,SAAA,IAAOC,SAAD,CAAAC,UAAA,IAAYE,YAAZ,CAAAF,UAAA,IAEN,GAAM,CAAAG,aAAa,CAAGN,UAAU,CAACE,SAAX,EAAtB,CAEA,GAAIA,SAAS,GAAKI,aAAlB,CAAiC,CAM/BD,YAAY,CAACC,aAAD,CAAZ,CACD,CAEDV,KAAK,CAACW,SAAN,CAAgB,UAAM,CACpB,GAAM,CAAAC,gBAAgB,CAAGR,UAAU,CAACS,WAAX,CAAuB,OAAvB,CAAgC,iBACvD,CAAAJ,YAAY,CAAC,IAAD,CADW,GAAzB,CAIA,GAAM,CAAAK,eAAe,CAAGV,UAAU,CAACS,WAAX,CAAuB,MAAvB,CAA+B,iBACrD,CAAAJ,YAAY,CAAC,KAAD,CADU,GAAxB,CAIA,MAAO,WAAM,CACXG,gBAAgB,GAChBE,eAAe,GAChB,CAHD,CAID,CAbD,CAaG,CAACV,UAAD,CAbH,EAeAJ,KAAK,CAACe,aAAN,CAAoBL,aAApB,EAEA,MAAO,CAAAA,aAAP,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}