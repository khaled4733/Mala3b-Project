{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useOnRouteFocus(_ref){var router=_ref.router,getState=_ref.getState,sourceRouteKey=_ref.key,setState=_ref.setState;var _React$useContext=React.useContext(NavigationBuilderContext),onRouteFocusParent=_React$useContext.onRouteFocus;return React.useCallback(function(key){var state=getState();var result=router.getStateForRouteFocus(state,key);if(result!==state){setState(result);}if(onRouteFocusParent!==undefined&&sourceRouteKey!==undefined){onRouteFocusParent(sourceRouteKey);}},[getState,onRouteFocusParent,router,setState,sourceRouteKey]);}","map":{"version":3,"names":["React","NavigationBuilderContext","useOnRouteFocus","_ref","router","getState","sourceRouteKey","key","setState","_React$useContext","useContext","onRouteFocusParent","onRouteFocus","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["C:\\Users\\Ahmed Hamza\\Desktop\\Mal3ab project\\Mala3b-Project\\node_modules\\@react-navigation\\core\\lib\\module\\useOnRouteFocus.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"],"mappings":"AAKA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,CAEA,MAAO,CAAAC,wBAAP,kCAcA,cAAe,SAAS,CAAAC,eAATA,CAAAC,IAAA,CAKK,IAJlB,CAAAC,MADuE,CAKrDD,IAAA,CAJlBC,MADuE,CAEvEC,QAFuE,CAKrDF,IAAA,CAHlBE,QAFuE,CAGlEC,cAHkE,CAKrDH,IAAA,CAFlBI,GAAG,CACHC,QAAA,CACkBL,IAAA,CADlBK,QAAA,CAEA,IAAAC,iBAAA,CAA6CT,KAAK,CAACU,UAAN,CAC3CT,wBAD2C,CAA7C,CAAsBU,kBAAA,CAAAF,iBAAA,CAAdG,YAAY,CAIpB,MAAO,CAAAZ,KAAK,CAACa,WAAN,CACJ,SAAAN,GAAD,CAAiB,CACf,GAAM,CAAAO,KAAK,CAAGT,QAAQ,EAAtB,CACA,GAAM,CAAAU,MAAM,CAAGX,MAAM,CAACY,qBAAP,CAA6BF,KAA7B,CAAoCP,GAApC,CAAf,CAEA,GAAIQ,MAAM,GAAKD,KAAf,CAAsB,CACpBN,QAAQ,CAACO,MAAD,CAAR,CACD,CAED,GAAIJ,kBAAkB,GAAKM,SAAvB,EAAoCX,cAAc,GAAKW,SAA3D,CAAsE,CACpEN,kBAAkB,CAACL,cAAD,CAAlB,CACD,CACF,CAZI,CAaL,CAACD,QAAD,CAAWM,kBAAX,CAA+BP,MAA/B,CAAuCI,QAAvC,CAAiDF,cAAjD,CAbK,CAAP,CAeD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}